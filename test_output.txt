[0/1] Planning build
Building for debugging...
[0/4] Write sources
[1/4] Write swift-version--58304C5D6DBC2206.txt
[3/32] Compiling AIKOTests SecurityTests.swift
/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:61:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
  59 |         // viewModel.currentSuggestions = [cuiSuggestion]
  60 | 
  61 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
  62 | 
  63 |         // When: View renders CUI data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:71:13: warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
  69 |     func testSuggestionViewModel_DataAtRest_EncryptsProperlyAtRest() async throws {
  70 |         // Given: ViewModel with sensitive acquisition data
  71 |         let sensitiveContext = createClassifiedContext()
     |             `- warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
  72 | 
  73 |         // When: Data is stored

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:153:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 151 | 
 152 |         // When: Low privilege user attempts access
 153 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 154 | 
 155 |         // Then: Should enforce appropriate access restrictions

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:163:13: warning: variable 'authenticatedFeedback' was written to, but never read
 161 |         // Given: SuggestionFeedbackView requiring authenticated feedback
 162 |         let suggestion = createAIKOTestDecisionResponse()
 163 |         var authenticatedFeedback: AgenticUserFeedback?
     |             `- warning: variable 'authenticatedFeedback' was written to, but never read
 164 | 
 165 |         let view = SuggestionFeedbackView(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:165:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 163 |         var authenticatedFeedback: AgenticUserFeedback?
 164 | 
 165 |         let view = SuggestionFeedbackView(
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 166 |             suggestion: suggestion,
 167 |             onFeedback: { feedback in

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:173:13: warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 171 | 
 172 |         // When: Feedback is submitted
 173 |         let feedback = AgenticUserFeedback(
     |             `- warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 174 |             outcome: .success,
 175 |             satisfactionScore: 0.9,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:227:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 225 |         // Given: SuggestionFeedbackView with audit logging
 226 |         let suggestion = createAIKOTestDecisionResponse()
 227 |         let view = SuggestionFeedbackView(
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 228 |             suggestion: suggestion,
 229 |             onFeedback: { _ in }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:233:13: warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 231 | 
 232 |         // When: User provides feedback
 233 |         let feedback = AgenticUserFeedback(
     |             `- warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 234 |             outcome: .success,
 235 |             satisfactionScore: 0.85,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:254:13: warning: variable 'sanitizedInput' was never used; consider replacing with '_' or removing it
 252 |         // Given: SuggestionFeedbackView with potentially malicious input
 253 |         let suggestion = createAIKOTestDecisionResponse()
 254 |         var sanitizedInput: String?
     |             `- warning: variable 'sanitizedInput' was never used; consider replacing with '_' or removing it
 255 | 
 256 |         let view = SuggestionFeedbackView(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:256:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 254 |         var sanitizedInput: String?
 255 | 
 256 |         let view = SuggestionFeedbackView(
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 257 |             suggestion: suggestion,
 258 |             onFeedback: { _ in }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:289:106: error: value of type 'DecisionResponse' has no member 'complianceContext'
 287 |             return
 288 |         }
 289 |         let allReferencesValid = mockSecurityManager.validateRegulatoryReferences(decisionWithReferences.complianceContext)
     |                                                                                                          `- error: value of type 'DecisionResponse' has no member 'complianceContext'
 290 | 
 291 |         // Then: Should validate authenticity of regulatory references

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:373:13: warning: initialization of immutable value 'sensitiveDecision' was never used; consider replacing with assignment to '_' or removing it
 371 |     func testAgenticSuggestionView_DataLossPrevention_PreventsCopyPaste() throws {
 372 |         // Given: AgenticSuggestionView with sensitive data
 373 |         let sensitiveDecision = createCUIDecisionResponse()
     |             `- warning: initialization of immutable value 'sensitiveDecision' was never used; consider replacing with assignment to '_' or removing it
 374 |         guard let viewModel else {
 375 |             XCTFail("ViewModel should be initialized")

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:380:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 378 |         // Mock setting current suggestions - actual implementation would use load method
 379 |         // viewModel.currentSuggestions = [sensitiveDecision]
 380 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 381 | 
 382 |         // When: User attempts to copy sensitive content

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:391:31: error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 389 |         let classifiedDecision = createClassifiedDecisionResponse()
 390 |         let view = AIReasoningView(
 391 |             decisionResponse: classifiedDecision,
     |                               `- error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 392 |             complianceContext: createClassifiedComplianceContext()
 393 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:404:13: warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
 402 |     func testSuggestionViewModel_Cryptography_UsesApprovedAlgorithms() async throws {
 403 |         // Given: ViewModel requiring cryptographic operations
 404 |         let sensitiveContext = createCUIMarkedContext()
     |             `- warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
 405 | 
 406 |         // When: Cryptographic operations are performed

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:440:25: error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 438 |         let suggestion = createTestDecisionResponse()
 439 |         let view = SuggestionFeedbackView(
 440 |             suggestion: suggestion,
     |                         `- error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 441 |             onFeedback: { _ in }
 442 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:466:13: warning: initialization of immutable value 'federalDecision' was never used; consider replacing with assignment to '_' or removing it
 464 |         // Given: AgenticSuggestionView in FedRAMP environment
 465 |         let federalContext = createFederalAcquisitionContext()
 466 |         let federalDecision = createFederalDecisionResponse(context: federalContext)
     |             `- warning: initialization of immutable value 'federalDecision' was never used; consider replacing with assignment to '_' or removing it
 467 |         guard let viewModel else {
 468 |             XCTFail("ViewModel should be initialized")

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:474:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 472 |         // viewModel.currentSuggestions = [federalDecision]
 473 | 
 474 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 475 | 
 476 |         // When: FedRAMP compliance is validated

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:520:54: error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
 518 |         }
 519 |         do {
 520 |             try await viewModel.loadSuggestions(for: maliciousContext)
     |                                                      `- error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
 521 |         } catch {
 522 |             // Expected to handle malicious input gracefully

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:537:13: warning: initialization of immutable value 'oversizedSuggestions' was never used; consider replacing with assignment to '_' or removing it
 535 |     func testAgenticSuggestionView_VulnerabilityTesting_HandlesBufferOverflows() throws {
 536 |         // Given: AgenticSuggestionView with large data sets
 537 |         let oversizedSuggestions = createOversizedSuggestionSet()
     |             `- warning: initialization of immutable value 'oversizedSuggestions' was never used; consider replacing with assignment to '_' or removing it
 538 | 
 539 |         // When: Large data is processed

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:546:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 544 |         // Mock setting current suggestions - actual implementation would use load method
 545 |         // viewModel.currentSuggestions = oversizedSuggestions
 546 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 547 | 
 548 |         // Then: Should handle large data without buffer overflows

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:561:35: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call
 559 | 
 560 |     private func createTestAcquisitionContext() -> AppCore.AcquisitionContext {
 561 |         AppCore.AcquisitionContext(
     |                                   `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call
 562 |             acquisitionId: UUID(),
 563 |             documentType: .requestForProposal,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:262:12: note: 'init(type:confidence:subContexts:metadata:)' declared here
260 |     }
261 | 
262 |     public init(type: ContextCategory, confidence: ContextConfidence, subContexts: [String], metadata: ContextMetadata) {
    |            `- note: 'init(type:confidence:subContexts:metadata:)' declared here
263 |         self.type = type
264 |         self.confidence = confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:561:35: error: missing arguments for parameters 'type', 'confidence', 'subContexts', 'metadata' in call
 559 | 
 560 |     private func createTestAcquisitionContext() -> AppCore.AcquisitionContext {
 561 |         AppCore.AcquisitionContext(
     |                                   `- error: missing arguments for parameters 'type', 'confidence', 'subContexts', 'metadata' in call
 562 |             acquisitionId: UUID(),
 563 |             documentType: .requestForProposal,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:262:12: note: 'init(type:confidence:subContexts:metadata:)' declared here
260 |     }
261 | 
262 |     public init(type: ContextCategory, confidence: ContextConfidence, subContexts: [String], metadata: ContextMetadata) {
    |            `- note: 'init(type:confidence:subContexts:metadata:)' declared here
263 |         self.type = type
264 |         self.confidence = confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:563:28: error: cannot infer contextual base in reference to member 'requestForProposal'
 561 |         AppCore.AcquisitionContext(
 562 |             acquisitionId: UUID(),
 563 |             documentType: .requestForProposal,
     |                            `- error: cannot infer contextual base in reference to member 'requestForProposal'
 564 |             acquisitionValue: 300_000.0,
 565 |             complexity: TestComplexityLevel(score: 3.2, factors: ["security", "classified", "federal"]),

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:600:17: error: value of type 'AcquisitionContext' has no member 'documentType'
 598 |         var context = createTestAcquisitionContext()
 599 |         // Inject potentially malicious content
 600 |         context.documentType = .other("; DROP TABLE acquisitions; --")
     |                 `- error: value of type 'AcquisitionContext' has no member 'documentType'
 601 |         return context
 602 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:600:33: error: cannot infer contextual base in reference to member 'other'
 598 |         var context = createTestAcquisitionContext()
 599 |         // Inject potentially malicious content
 600 |         context.documentType = .other("; DROP TABLE acquisitions; --")
     |                                 `- error: cannot infer contextual base in reference to member 'other'
 601 |         return context
 602 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:605:33: error: extra arguments at positions #3, #4, #5, #6 in call
 603 | 
 604 |     private func createTestDecisionResponse() -> AppCore.DecisionResponse {
 605 |         AppCore.DecisionResponse(
     |                                 `- error: extra arguments at positions #3, #4, #5, #6 in call
 606 |             selectedAction: WorkflowAction.placeholder,
 607 |             confidence: 0.82,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:129:12: note: 'init(selectedAction:confidence:timestamp:)' declared here
127 |     public let timestamp: Date
128 | 
129 |     public init(selectedAction: RLAction, confidence: Double, timestamp: Date = Date()) {
    |            `- note: 'init(selectedAction:confidence:timestamp:)' declared here
130 |         self.selectedAction = selectedAction
131 |         self.confidence = confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:606:44: error: cannot convert value of type 'WorkflowAction' to expected argument type 'RLAction'
 604 |     private func createTestDecisionResponse() -> AppCore.DecisionResponse {
 605 |         AppCore.DecisionResponse(
 606 |             selectedAction: WorkflowAction.placeholder,
     |                                            `- error: cannot convert value of type 'WorkflowAction' to expected argument type 'RLAction'
 607 |             confidence: 0.82,
 608 |             decisionMode: .assisted,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:608:28: error: cannot infer contextual base in reference to member 'assisted'
 606 |             selectedAction: WorkflowAction.placeholder,
 607 |             confidence: 0.82,
 608 |             decisionMode: .assisted,
     |                            `- error: cannot infer contextual base in reference to member 'assisted'
 609 |             reasoning: "Security-tested decision response with audit trail",
 610 |             alternativeActions: [],

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:622:22: error: value of type 'DecisionResponse' has no member 'context'
 620 |         decision.containsCUI = true
 621 |         if let context = context {
 622 |             decision.context = context
     |                      `- error: value of type 'DecisionResponse' has no member 'context'
 623 |         }
 624 |         return decision

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:643:18: error: value of type 'DecisionResponse' has no member 'context'
 641 |     private func createFederalDecisionResponse(context: AppCore.AcquisitionContext) -> AppCore.DecisionResponse {
 642 |         var decision = createTestDecisionResponse()
 643 |         decision.context = context
     |                  `- error: value of type 'DecisionResponse' has no member 'context'
 644 |         decision.isFederalDecision = true
 645 |         decision.fedRAMPValidated = true

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:666:31: error: extra argument 'securityControls' in call
 664 |             complianceScore: 0.94,
 665 |             riskFactors: ["cybersecurity", "data protection", "cui handling"],
 666 |             securityControls: ["AC-2", "AU-2", "IR-4", "SC-7"]
     |                               `- error: extra argument 'securityControls' in call
 667 |         )
 668 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:658:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 656 |         ComplianceContext(
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
     |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
 660 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:659:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
     |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 660 |             ],
 661 |             dfarsReferences: [

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:658:29: error: extra arguments at positions #2, #3 in call
 656 |         ComplianceContext(
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
     |                             `- error: extra arguments at positions #2, #3 in call
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
 660 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:658:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 656 |         ComplianceContext(
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
     |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
 660 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:659:29: error: extra arguments at positions #2, #3 in call
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
     |                             `- error: extra arguments at positions #2, #3 in call
 660 |             ],
 661 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:659:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
     |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 660 |             ],
 661 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:662:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
 660 |             ],
 661 |             dfarsReferences: [
 662 |                 DFARSReference(section: "252.204-7012", title: "Safeguarding Covered Defense Information", url: "https://acquisition.gov/dfars/252.204-7012"),
     |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
 663 |             ],
 664 |             complianceScore: 0.94,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:662:31: error: extra arguments at positions #2, #3 in call
 660 |             ],
 661 |             dfarsReferences: [
 662 |                 DFARSReference(section: "252.204-7012", title: "Safeguarding Covered Defense Information", url: "https://acquisition.gov/dfars/252.204-7012"),
     |                               `- error: extra arguments at positions #2, #3 in call
 663 |             ],
 664 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:662:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 660 |             ],
 661 |             dfarsReferences: [
 662 |                 DFARSReference(section: "252.204-7012", title: "Safeguarding Covered Defense Information", url: "https://acquisition.gov/dfars/252.204-7012"),
     |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 663 |             ],
 664 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:689:22: error: value of type 'DecisionResponse' has no member 'reasoning'
 687 |         Array(0 ..< 10000).map { _ in
 688 |             var decision = createTestDecisionResponse()
 689 |             decision.reasoning = String(repeating: "Large reasoning content ", count: 1000)
     |                      `- error: value of type 'DecisionResponse' has no member 'reasoning'
 690 |             return decision
 691 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:1024:22: error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1022 |             reasoning: "Security-tested AIKO decision response with audit trail",
1023 |             alternativeActions: [],
1024 |             context: testContext,
     |                      `- error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1025 |             timestamp: Date()
1026 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:1039:22: error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1037 |             reasoning: "Decision with regulatory compliance references",
1038 |             alternativeActions: [],
1039 |             context: testContext,
     |                      `- error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1040 |             timestamp: Date()
1041 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:41:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 39 |             return
 40 |         }
 41 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 42 |             suggestion: testSuggestion,
 43 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:57:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 55 |             return
 56 |         }
 57 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 58 |             suggestion: testSuggestion,
 59 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:73:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 71 |             return
 72 |         }
 73 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 74 |             suggestion: testSuggestion,
 75 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:91:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 89 |             return
 90 |         }
 91 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 92 |             suggestion: testSuggestion,
 93 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:110:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
108 |             return
109 |         }
110 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
111 |             suggestion: testSuggestion,
112 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:131:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
129 |             return
130 |         }
131 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
132 |             suggestion: testSuggestion,
133 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:147:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
145 |             return
146 |         }
147 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
148 |             suggestion: testSuggestion,
149 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:167:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
165 |             return
166 |         }
167 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
168 |             suggestion: testSuggestion,
169 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:188:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
186 |             return
187 |         }
188 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
189 |             suggestion: testSuggestion,
190 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:207:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
205 |             return
206 |         }
207 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
208 |             suggestion: testSuggestion,
209 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:226:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
224 |         }
225 |         let batchSuggestions = createBatchSuggestions()
226 |         let view = BatchSuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
227 |             suggestions: batchSuggestions,
228 |             onBatchFeedback: feedbackCallbacks.onBatchFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:248:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
246 |         }
247 |         let documentSuggestion = createDocumentGenerationSuggestion()
248 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
249 |             suggestion: documentSuggestion,
250 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:265:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
263 |         }
264 |         let complianceSuggestion = createComplianceSuggestion()
265 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
266 |             suggestion: complianceSuggestion,
267 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:283:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
281 |             return
282 |         }
283 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
284 |             suggestion: testSuggestion,
285 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:309:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
307 |             return
308 |         }
309 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
310 |             suggestion: testSuggestion,
311 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:325:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
323 |             return
324 |         }
325 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
326 |             suggestion: testSuggestion,
327 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:343:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
341 |             return
342 |         }
343 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
344 |             suggestion: testSuggestion,
345 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:366:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
364 |             return
365 |         }
366 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
367 |             suggestion: testSuggestion,
368 |             onFeedback: feedbackCallbacks.onFeedback,

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:383:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
381 |             return
382 |         }
383 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
384 |             suggestion: testSuggestion,
385 |             onFeedback: feedbackCallbacks.onFeedback,

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    :
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var testContext: AcquisitionContext?
 16 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:15:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:331:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
329 |     // MARK: - Helper Methods
330 | 
331 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
332 |         AcquisitionContext(
333 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:346:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
344 |     }
345 | 
346 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
347 |         DecisionResponse(
348 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:358:54: error: 'DecisionResponse' is ambiguous for type lookup in this context
356 |     }
357 | 
358 |     private func createHighConfidenceSuggestion() -> DecisionResponse {
    |                                                      `- error: 'DecisionResponse' is ambiguous for type lookup in this context
359 |         DecisionResponse(
360 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:370:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |     }
369 | 
370 |     private func createLowConfidenceSuggestion() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
371 |         DecisionResponse(
372 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:382:49: error: 'DecisionResponse' is ambiguous for type lookup in this context
380 |     }
381 | 
382 |     private func createLargeSuggestionSet() -> [DecisionResponse] {
    |                                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
383 |         Array(0 ..< 100).map { index in
384 |             DecisionResponse(

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:404:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
402 |     var feedbackCallCount = 0
403 | 
404 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
405 |         if shouldThrowError {
406 |             throw TestError.mockError

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:424:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
422 |     }
423 | 
424 |     func provideFeedback(for _: DecisionResponse, feedback _: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
425 |         feedbackCallCount += 1
426 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:400:9: error: stored property 'shouldThrowError' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
398 | 
399 | class MockAgenticOrchestrator: Sendable {
400 |     var shouldThrowError = false
    |         `- error: stored property 'shouldThrowError' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
401 |     var networkError = false
402 |     var feedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: error: invalid redeclaration of 'MockAgenticOrchestrator'
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- error: invalid redeclaration of 'MockAgenticOrchestrator'
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:433:6: error: invalid redeclaration of 'TestError'
431 | }
432 | 
433 | enum TestError: Error {
    |      `- error: invalid redeclaration of 'TestError'
434 |     case mockError
435 |     case networkError

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:144:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
142 |         }
143 |         let testSuggestion = createTestDecisionResponse()
144 |         viewModel.currentSuggestions = [testSuggestion]
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
145 | 
146 |         let feedback = AgenticUserFeedback(

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:190:37: error: value of type 'SuggestionViewModel' has no member '$currentSuggestions'
188 |         }
189 |         var observedChanges = 0
190 |         let observation = viewModel.$currentSuggestions.sink { _ in
    |                                     `- error: value of type 'SuggestionViewModel' has no member '$currentSuggestions'
191 |             observedChanges += 1
192 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:197:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
195 | 
196 |         // When: State changes
197 |         viewModel.currentSuggestions = [createTestDecisionResponse()]
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
198 | 
199 |         // Then: Should notify observers

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:236:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
234 |         let highConfidenceSuggestion = createHighConfidenceSuggestion()
235 |         let lowConfidenceSuggestion = createLowConfidenceSuggestion()
236 |         viewModel.currentSuggestions = [highConfidenceSuggestion, lowConfidenceSuggestion]
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
237 | 
238 |         // When: Confidence threshold is updated

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:431:35: error: 'DecisionResponse' is ambiguous for type lookup in this context
429 |     }
430 | 
431 |     func processRealTimeUpdate(_: DecisionResponse) async throws {
    |                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |         // RED PHASE: Not implemented
433 |         throw IntegrationTestError.serviceUnavailable

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:277:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
275 | 
276 |         // When: Large suggestion set is loaded
277 |         viewModel.currentSuggestions = largeSuggestionSet
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
278 | 
279 |         // Then: Should manage memory efficiently

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:406:29: error: type 'TestError' has no member 'mockError'
404 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
405 |         if shouldThrowError {
406 |             throw TestError.mockError
    |                             `- error: type 'TestError' has no member 'mockError'
407 |         }
408 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:428:29: error: type 'TestError' has no member 'mockError'
426 | 
427 |         if shouldThrowError {
428 |             throw TestError.mockError
    |                             `- error: type 'TestError' has no member 'mockError'
429 |         }
430 |     }
[4/32] Compiling AIKOTests SuggestionFeedbackViewTests.swift
/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:61:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
  59 |         // viewModel.currentSuggestions = [cuiSuggestion]
  60 | 
  61 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
  62 | 
  63 |         // When: View renders CUI data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:71:13: warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
  69 |     func testSuggestionViewModel_DataAtRest_EncryptsProperlyAtRest() async throws {
  70 |         // Given: ViewModel with sensitive acquisition data
  71 |         let sensitiveContext = createClassifiedContext()
     |             `- warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
  72 | 
  73 |         // When: Data is stored

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:153:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 151 | 
 152 |         // When: Low privilege user attempts access
 153 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 154 | 
 155 |         // Then: Should enforce appropriate access restrictions

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:163:13: warning: variable 'authenticatedFeedback' was written to, but never read
 161 |         // Given: SuggestionFeedbackView requiring authenticated feedback
 162 |         let suggestion = createAIKOTestDecisionResponse()
 163 |         var authenticatedFeedback: AgenticUserFeedback?
     |             `- warning: variable 'authenticatedFeedback' was written to, but never read
 164 | 
 165 |         let view = SuggestionFeedbackView(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:165:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 163 |         var authenticatedFeedback: AgenticUserFeedback?
 164 | 
 165 |         let view = SuggestionFeedbackView(
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 166 |             suggestion: suggestion,
 167 |             onFeedback: { feedback in

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:173:13: warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 171 | 
 172 |         // When: Feedback is submitted
 173 |         let feedback = AgenticUserFeedback(
     |             `- warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 174 |             outcome: .success,
 175 |             satisfactionScore: 0.9,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:227:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 225 |         // Given: SuggestionFeedbackView with audit logging
 226 |         let suggestion = createAIKOTestDecisionResponse()
 227 |         let view = SuggestionFeedbackView(
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 228 |             suggestion: suggestion,
 229 |             onFeedback: { _ in }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:233:13: warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 231 | 
 232 |         // When: User provides feedback
 233 |         let feedback = AgenticUserFeedback(
     |             `- warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 234 |             outcome: .success,
 235 |             satisfactionScore: 0.85,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:254:13: warning: variable 'sanitizedInput' was never used; consider replacing with '_' or removing it
 252 |         // Given: SuggestionFeedbackView with potentially malicious input
 253 |         let suggestion = createAIKOTestDecisionResponse()
 254 |         var sanitizedInput: String?
     |             `- warning: variable 'sanitizedInput' was never used; consider replacing with '_' or removing it
 255 | 
 256 |         let view = SuggestionFeedbackView(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:256:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 254 |         var sanitizedInput: String?
 255 | 
 256 |         let view = SuggestionFeedbackView(
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 257 |             suggestion: suggestion,
 258 |             onFeedback: { _ in }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:289:106: error: value of type 'DecisionResponse' has no member 'complianceContext'
 287 |             return
 288 |         }
 289 |         let allReferencesValid = mockSecurityManager.validateRegulatoryReferences(decisionWithReferences.complianceContext)
     |                                                                                                          `- error: value of type 'DecisionResponse' has no member 'complianceContext'
 290 | 
 291 |         // Then: Should validate authenticity of regulatory references

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:373:13: warning: initialization of immutable value 'sensitiveDecision' was never used; consider replacing with assignment to '_' or removing it
 371 |     func testAgenticSuggestionView_DataLossPrevention_PreventsCopyPaste() throws {
 372 |         // Given: AgenticSuggestionView with sensitive data
 373 |         let sensitiveDecision = createCUIDecisionResponse()
     |             `- warning: initialization of immutable value 'sensitiveDecision' was never used; consider replacing with assignment to '_' or removing it
 374 |         guard let viewModel else {
 375 |             XCTFail("ViewModel should be initialized")

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:380:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 378 |         // Mock setting current suggestions - actual implementation would use load method
 379 |         // viewModel.currentSuggestions = [sensitiveDecision]
 380 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 381 | 
 382 |         // When: User attempts to copy sensitive content

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:391:31: error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 389 |         let classifiedDecision = createClassifiedDecisionResponse()
 390 |         let view = AIReasoningView(
 391 |             decisionResponse: classifiedDecision,
     |                               `- error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 392 |             complianceContext: createClassifiedComplianceContext()
 393 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:404:13: warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
 402 |     func testSuggestionViewModel_Cryptography_UsesApprovedAlgorithms() async throws {
 403 |         // Given: ViewModel requiring cryptographic operations
 404 |         let sensitiveContext = createCUIMarkedContext()
     |             `- warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
 405 | 
 406 |         // When: Cryptographic operations are performed

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:440:25: error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 438 |         let suggestion = createTestDecisionResponse()
 439 |         let view = SuggestionFeedbackView(
 440 |             suggestion: suggestion,
     |                         `- error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 441 |             onFeedback: { _ in }
 442 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:466:13: warning: initialization of immutable value 'federalDecision' was never used; consider replacing with assignment to '_' or removing it
 464 |         // Given: AgenticSuggestionView in FedRAMP environment
 465 |         let federalContext = createFederalAcquisitionContext()
 466 |         let federalDecision = createFederalDecisionResponse(context: federalContext)
     |             `- warning: initialization of immutable value 'federalDecision' was never used; consider replacing with assignment to '_' or removing it
 467 |         guard let viewModel else {
 468 |             XCTFail("ViewModel should be initialized")

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:474:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 472 |         // viewModel.currentSuggestions = [federalDecision]
 473 | 
 474 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 475 | 
 476 |         // When: FedRAMP compliance is validated

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:520:54: error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
 518 |         }
 519 |         do {
 520 |             try await viewModel.loadSuggestions(for: maliciousContext)
     |                                                      `- error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
 521 |         } catch {
 522 |             // Expected to handle malicious input gracefully

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:537:13: warning: initialization of immutable value 'oversizedSuggestions' was never used; consider replacing with assignment to '_' or removing it
 535 |     func testAgenticSuggestionView_VulnerabilityTesting_HandlesBufferOverflows() throws {
 536 |         // Given: AgenticSuggestionView with large data sets
 537 |         let oversizedSuggestions = createOversizedSuggestionSet()
     |             `- warning: initialization of immutable value 'oversizedSuggestions' was never used; consider replacing with assignment to '_' or removing it
 538 | 
 539 |         // When: Large data is processed

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:546:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 544 |         // Mock setting current suggestions - actual implementation would use load method
 545 |         // viewModel.currentSuggestions = oversizedSuggestions
 546 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 547 | 
 548 |         // Then: Should handle large data without buffer overflows

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:561:35: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call
 559 | 
 560 |     private func createTestAcquisitionContext() -> AppCore.AcquisitionContext {
 561 |         AppCore.AcquisitionContext(
     |                                   `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call
 562 |             acquisitionId: UUID(),
 563 |             documentType: .requestForProposal,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:262:12: note: 'init(type:confidence:subContexts:metadata:)' declared here
260 |     }
261 | 
262 |     public init(type: ContextCategory, confidence: ContextConfidence, subContexts: [String], metadata: ContextMetadata) {
    |            `- note: 'init(type:confidence:subContexts:metadata:)' declared here
263 |         self.type = type
264 |         self.confidence = confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:561:35: error: missing arguments for parameters 'type', 'confidence', 'subContexts', 'metadata' in call
 559 | 
 560 |     private func createTestAcquisitionContext() -> AppCore.AcquisitionContext {
 561 |         AppCore.AcquisitionContext(
     |                                   `- error: missing arguments for parameters 'type', 'confidence', 'subContexts', 'metadata' in call
 562 |             acquisitionId: UUID(),
 563 |             documentType: .requestForProposal,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:262:12: note: 'init(type:confidence:subContexts:metadata:)' declared here
260 |     }
261 | 
262 |     public init(type: ContextCategory, confidence: ContextConfidence, subContexts: [String], metadata: ContextMetadata) {
    |            `- note: 'init(type:confidence:subContexts:metadata:)' declared here
263 |         self.type = type
264 |         self.confidence = confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:563:28: error: cannot infer contextual base in reference to member 'requestForProposal'
 561 |         AppCore.AcquisitionContext(
 562 |             acquisitionId: UUID(),
 563 |             documentType: .requestForProposal,
     |                            `- error: cannot infer contextual base in reference to member 'requestForProposal'
 564 |             acquisitionValue: 300_000.0,
 565 |             complexity: TestComplexityLevel(score: 3.2, factors: ["security", "classified", "federal"]),

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:600:17: error: value of type 'AcquisitionContext' has no member 'documentType'
 598 |         var context = createTestAcquisitionContext()
 599 |         // Inject potentially malicious content
 600 |         context.documentType = .other("; DROP TABLE acquisitions; --")
     |                 `- error: value of type 'AcquisitionContext' has no member 'documentType'
 601 |         return context
 602 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:600:33: error: cannot infer contextual base in reference to member 'other'
 598 |         var context = createTestAcquisitionContext()
 599 |         // Inject potentially malicious content
 600 |         context.documentType = .other("; DROP TABLE acquisitions; --")
     |                                 `- error: cannot infer contextual base in reference to member 'other'
 601 |         return context
 602 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:605:33: error: extra arguments at positions #3, #4, #5, #6 in call
 603 | 
 604 |     private func createTestDecisionResponse() -> AppCore.DecisionResponse {
 605 |         AppCore.DecisionResponse(
     |                                 `- error: extra arguments at positions #3, #4, #5, #6 in call
 606 |             selectedAction: WorkflowAction.placeholder,
 607 |             confidence: 0.82,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:129:12: note: 'init(selectedAction:confidence:timestamp:)' declared here
127 |     public let timestamp: Date
128 | 
129 |     public init(selectedAction: RLAction, confidence: Double, timestamp: Date = Date()) {
    |            `- note: 'init(selectedAction:confidence:timestamp:)' declared here
130 |         self.selectedAction = selectedAction
131 |         self.confidence = confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:606:44: error: cannot convert value of type 'WorkflowAction' to expected argument type 'RLAction'
 604 |     private func createTestDecisionResponse() -> AppCore.DecisionResponse {
 605 |         AppCore.DecisionResponse(
 606 |             selectedAction: WorkflowAction.placeholder,
     |                                            `- error: cannot convert value of type 'WorkflowAction' to expected argument type 'RLAction'
 607 |             confidence: 0.82,
 608 |             decisionMode: .assisted,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:608:28: error: cannot infer contextual base in reference to member 'assisted'
 606 |             selectedAction: WorkflowAction.placeholder,
 607 |             confidence: 0.82,
 608 |             decisionMode: .assisted,
     |                            `- error: cannot infer contextual base in reference to member 'assisted'
 609 |             reasoning: "Security-tested decision response with audit trail",
 610 |             alternativeActions: [],

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:622:22: error: value of type 'DecisionResponse' has no member 'context'
 620 |         decision.containsCUI = true
 621 |         if let context = context {
 622 |             decision.context = context
     |                      `- error: value of type 'DecisionResponse' has no member 'context'
 623 |         }
 624 |         return decision

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:643:18: error: value of type 'DecisionResponse' has no member 'context'
 641 |     private func createFederalDecisionResponse(context: AppCore.AcquisitionContext) -> AppCore.DecisionResponse {
 642 |         var decision = createTestDecisionResponse()
 643 |         decision.context = context
     |                  `- error: value of type 'DecisionResponse' has no member 'context'
 644 |         decision.isFederalDecision = true
 645 |         decision.fedRAMPValidated = true

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:666:31: error: extra argument 'securityControls' in call
 664 |             complianceScore: 0.94,
 665 |             riskFactors: ["cybersecurity", "data protection", "cui handling"],
 666 |             securityControls: ["AC-2", "AU-2", "IR-4", "SC-7"]
     |                               `- error: extra argument 'securityControls' in call
 667 |         )
 668 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:658:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 656 |         ComplianceContext(
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
     |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
 660 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:659:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
     |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 660 |             ],
 661 |             dfarsReferences: [

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:658:29: error: extra arguments at positions #2, #3 in call
 656 |         ComplianceContext(
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
     |                             `- error: extra arguments at positions #2, #3 in call
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
 660 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:658:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 656 |         ComplianceContext(
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
     |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
 660 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:659:29: error: extra arguments at positions #2, #3 in call
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
     |                             `- error: extra arguments at positions #2, #3 in call
 660 |             ],
 661 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:659:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
     |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 660 |             ],
 661 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:662:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
 660 |             ],
 661 |             dfarsReferences: [
 662 |                 DFARSReference(section: "252.204-7012", title: "Safeguarding Covered Defense Information", url: "https://acquisition.gov/dfars/252.204-7012"),
     |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
 663 |             ],
 664 |             complianceScore: 0.94,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:662:31: error: extra arguments at positions #2, #3 in call
 660 |             ],
 661 |             dfarsReferences: [
 662 |                 DFARSReference(section: "252.204-7012", title: "Safeguarding Covered Defense Information", url: "https://acquisition.gov/dfars/252.204-7012"),
     |                               `- error: extra arguments at positions #2, #3 in call
 663 |             ],
 664 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:662:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 660 |             ],
 661 |             dfarsReferences: [
 662 |                 DFARSReference(section: "252.204-7012", title: "Safeguarding Covered Defense Information", url: "https://acquisition.gov/dfars/252.204-7012"),
     |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 663 |             ],
 664 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:689:22: error: value of type 'DecisionResponse' has no member 'reasoning'
 687 |         Array(0 ..< 10000).map { _ in
 688 |             var decision = createTestDecisionResponse()
 689 |             decision.reasoning = String(repeating: "Large reasoning content ", count: 1000)
     |                      `- error: value of type 'DecisionResponse' has no member 'reasoning'
 690 |             return decision
 691 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:1024:22: error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1022 |             reasoning: "Security-tested AIKO decision response with audit trail",
1023 |             alternativeActions: [],
1024 |             context: testContext,
     |                      `- error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1025 |             timestamp: Date()
1026 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:1039:22: error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1037 |             reasoning: "Decision with regulatory compliance references",
1038 |             alternativeActions: [],
1039 |             context: testContext,
     |                      `- error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1040 |             timestamp: Date()
1041 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:41:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 39 |             return
 40 |         }
 41 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 42 |             suggestion: testSuggestion,
 43 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:57:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 55 |             return
 56 |         }
 57 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 58 |             suggestion: testSuggestion,
 59 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:73:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 71 |             return
 72 |         }
 73 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 74 |             suggestion: testSuggestion,
 75 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:91:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 89 |             return
 90 |         }
 91 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 92 |             suggestion: testSuggestion,
 93 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:110:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
108 |             return
109 |         }
110 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
111 |             suggestion: testSuggestion,
112 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:131:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
129 |             return
130 |         }
131 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
132 |             suggestion: testSuggestion,
133 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:147:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
145 |             return
146 |         }
147 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
148 |             suggestion: testSuggestion,
149 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:167:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
165 |             return
166 |         }
167 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
168 |             suggestion: testSuggestion,
169 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:188:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
186 |             return
187 |         }
188 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
189 |             suggestion: testSuggestion,
190 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:207:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
205 |             return
206 |         }
207 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
208 |             suggestion: testSuggestion,
209 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:226:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
224 |         }
225 |         let batchSuggestions = createBatchSuggestions()
226 |         let view = BatchSuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
227 |             suggestions: batchSuggestions,
228 |             onBatchFeedback: feedbackCallbacks.onBatchFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:248:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
246 |         }
247 |         let documentSuggestion = createDocumentGenerationSuggestion()
248 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
249 |             suggestion: documentSuggestion,
250 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:265:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
263 |         }
264 |         let complianceSuggestion = createComplianceSuggestion()
265 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
266 |             suggestion: complianceSuggestion,
267 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:283:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
281 |             return
282 |         }
283 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
284 |             suggestion: testSuggestion,
285 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:309:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
307 |             return
308 |         }
309 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
310 |             suggestion: testSuggestion,
311 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:325:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
323 |             return
324 |         }
325 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
326 |             suggestion: testSuggestion,
327 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:343:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
341 |             return
342 |         }
343 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
344 |             suggestion: testSuggestion,
345 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:366:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
364 |             return
365 |         }
366 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
367 |             suggestion: testSuggestion,
368 |             onFeedback: feedbackCallbacks.onFeedback,

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:383:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
381 |             return
382 |         }
383 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
384 |             suggestion: testSuggestion,
385 |             onFeedback: feedbackCallbacks.onFeedback,

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    :
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var testContext: AcquisitionContext?
 16 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:15:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:331:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
329 |     // MARK: - Helper Methods
330 | 
331 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
332 |         AcquisitionContext(
333 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:346:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
344 |     }
345 | 
346 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
347 |         DecisionResponse(
348 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:358:54: error: 'DecisionResponse' is ambiguous for type lookup in this context
356 |     }
357 | 
358 |     private func createHighConfidenceSuggestion() -> DecisionResponse {
    |                                                      `- error: 'DecisionResponse' is ambiguous for type lookup in this context
359 |         DecisionResponse(
360 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:370:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |     }
369 | 
370 |     private func createLowConfidenceSuggestion() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
371 |         DecisionResponse(
372 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:382:49: error: 'DecisionResponse' is ambiguous for type lookup in this context
380 |     }
381 | 
382 |     private func createLargeSuggestionSet() -> [DecisionResponse] {
    |                                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
383 |         Array(0 ..< 100).map { index in
384 |             DecisionResponse(

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:404:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
402 |     var feedbackCallCount = 0
403 | 
404 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
405 |         if shouldThrowError {
406 |             throw TestError.mockError

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:424:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
422 |     }
423 | 
424 |     func provideFeedback(for _: DecisionResponse, feedback _: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
425 |         feedbackCallCount += 1
426 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:400:9: error: stored property 'shouldThrowError' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
398 | 
399 | class MockAgenticOrchestrator: Sendable {
400 |     var shouldThrowError = false
    |         `- error: stored property 'shouldThrowError' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
401 |     var networkError = false
402 |     var feedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: error: invalid redeclaration of 'MockAgenticOrchestrator'
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- error: invalid redeclaration of 'MockAgenticOrchestrator'
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:433:6: error: invalid redeclaration of 'TestError'
431 | }
432 | 
433 | enum TestError: Error {
    |      `- error: invalid redeclaration of 'TestError'
434 |     case mockError
435 |     case networkError

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:144:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
142 |         }
143 |         let testSuggestion = createTestDecisionResponse()
144 |         viewModel.currentSuggestions = [testSuggestion]
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
145 | 
146 |         let feedback = AgenticUserFeedback(

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:190:37: error: value of type 'SuggestionViewModel' has no member '$currentSuggestions'
188 |         }
189 |         var observedChanges = 0
190 |         let observation = viewModel.$currentSuggestions.sink { _ in
    |                                     `- error: value of type 'SuggestionViewModel' has no member '$currentSuggestions'
191 |             observedChanges += 1
192 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:197:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
195 | 
196 |         // When: State changes
197 |         viewModel.currentSuggestions = [createTestDecisionResponse()]
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
198 | 
199 |         // Then: Should notify observers

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:236:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
234 |         let highConfidenceSuggestion = createHighConfidenceSuggestion()
235 |         let lowConfidenceSuggestion = createLowConfidenceSuggestion()
236 |         viewModel.currentSuggestions = [highConfidenceSuggestion, lowConfidenceSuggestion]
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
237 | 
238 |         // When: Confidence threshold is updated

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:431:35: error: 'DecisionResponse' is ambiguous for type lookup in this context
429 |     }
430 | 
431 |     func processRealTimeUpdate(_: DecisionResponse) async throws {
    |                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |         // RED PHASE: Not implemented
433 |         throw IntegrationTestError.serviceUnavailable

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:277:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
275 | 
276 |         // When: Large suggestion set is loaded
277 |         viewModel.currentSuggestions = largeSuggestionSet
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
278 | 
279 |         // Then: Should manage memory efficiently

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:406:29: error: type 'TestError' has no member 'mockError'
404 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
405 |         if shouldThrowError {
406 |             throw TestError.mockError
    |                             `- error: type 'TestError' has no member 'mockError'
407 |         }
408 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:428:29: error: type 'TestError' has no member 'mockError'
426 | 
427 |         if shouldThrowError {
428 |             throw TestError.mockError
    |                             `- error: type 'TestError' has no member 'mockError'
429 |         }
430 |     }
[5/32] Compiling AIKOTests SuggestionViewModelTests.swift
/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:61:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
  59 |         // viewModel.currentSuggestions = [cuiSuggestion]
  60 | 
  61 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
  62 | 
  63 |         // When: View renders CUI data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:71:13: warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
  69 |     func testSuggestionViewModel_DataAtRest_EncryptsProperlyAtRest() async throws {
  70 |         // Given: ViewModel with sensitive acquisition data
  71 |         let sensitiveContext = createClassifiedContext()
     |             `- warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
  72 | 
  73 |         // When: Data is stored

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:153:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 151 | 
 152 |         // When: Low privilege user attempts access
 153 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 154 | 
 155 |         // Then: Should enforce appropriate access restrictions

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:163:13: warning: variable 'authenticatedFeedback' was written to, but never read
 161 |         // Given: SuggestionFeedbackView requiring authenticated feedback
 162 |         let suggestion = createAIKOTestDecisionResponse()
 163 |         var authenticatedFeedback: AgenticUserFeedback?
     |             `- warning: variable 'authenticatedFeedback' was written to, but never read
 164 | 
 165 |         let view = SuggestionFeedbackView(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:165:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 163 |         var authenticatedFeedback: AgenticUserFeedback?
 164 | 
 165 |         let view = SuggestionFeedbackView(
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 166 |             suggestion: suggestion,
 167 |             onFeedback: { feedback in

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:173:13: warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 171 | 
 172 |         // When: Feedback is submitted
 173 |         let feedback = AgenticUserFeedback(
     |             `- warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 174 |             outcome: .success,
 175 |             satisfactionScore: 0.9,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:227:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 225 |         // Given: SuggestionFeedbackView with audit logging
 226 |         let suggestion = createAIKOTestDecisionResponse()
 227 |         let view = SuggestionFeedbackView(
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 228 |             suggestion: suggestion,
 229 |             onFeedback: { _ in }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:233:13: warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 231 | 
 232 |         // When: User provides feedback
 233 |         let feedback = AgenticUserFeedback(
     |             `- warning: initialization of immutable value 'feedback' was never used; consider replacing with assignment to '_' or removing it
 234 |             outcome: .success,
 235 |             satisfactionScore: 0.85,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:254:13: warning: variable 'sanitizedInput' was never used; consider replacing with '_' or removing it
 252 |         // Given: SuggestionFeedbackView with potentially malicious input
 253 |         let suggestion = createAIKOTestDecisionResponse()
 254 |         var sanitizedInput: String?
     |             `- warning: variable 'sanitizedInput' was never used; consider replacing with '_' or removing it
 255 | 
 256 |         let view = SuggestionFeedbackView(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:256:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 254 |         var sanitizedInput: String?
 255 | 
 256 |         let view = SuggestionFeedbackView(
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 257 |             suggestion: suggestion,
 258 |             onFeedback: { _ in }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:289:106: error: value of type 'DecisionResponse' has no member 'complianceContext'
 287 |             return
 288 |         }
 289 |         let allReferencesValid = mockSecurityManager.validateRegulatoryReferences(decisionWithReferences.complianceContext)
     |                                                                                                          `- error: value of type 'DecisionResponse' has no member 'complianceContext'
 290 | 
 291 |         // Then: Should validate authenticity of regulatory references

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:373:13: warning: initialization of immutable value 'sensitiveDecision' was never used; consider replacing with assignment to '_' or removing it
 371 |     func testAgenticSuggestionView_DataLossPrevention_PreventsCopyPaste() throws {
 372 |         // Given: AgenticSuggestionView with sensitive data
 373 |         let sensitiveDecision = createCUIDecisionResponse()
     |             `- warning: initialization of immutable value 'sensitiveDecision' was never used; consider replacing with assignment to '_' or removing it
 374 |         guard let viewModel else {
 375 |             XCTFail("ViewModel should be initialized")

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:380:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 378 |         // Mock setting current suggestions - actual implementation would use load method
 379 |         // viewModel.currentSuggestions = [sensitiveDecision]
 380 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 381 | 
 382 |         // When: User attempts to copy sensitive content

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:391:31: error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 389 |         let classifiedDecision = createClassifiedDecisionResponse()
 390 |         let view = AIReasoningView(
 391 |             decisionResponse: classifiedDecision,
     |                               `- error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 392 |             complianceContext: createClassifiedComplianceContext()
 393 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:404:13: warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
 402 |     func testSuggestionViewModel_Cryptography_UsesApprovedAlgorithms() async throws {
 403 |         // Given: ViewModel requiring cryptographic operations
 404 |         let sensitiveContext = createCUIMarkedContext()
     |             `- warning: initialization of immutable value 'sensitiveContext' was never used; consider replacing with assignment to '_' or removing it
 405 | 
 406 |         // When: Cryptographic operations are performed

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:440:25: error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 438 |         let suggestion = createTestDecisionResponse()
 439 |         let view = SuggestionFeedbackView(
 440 |             suggestion: suggestion,
     |                         `- error: cannot convert value of type 'AppCore.DecisionResponse' to expected argument type 'AIKO.DecisionResponse'
 441 |             onFeedback: { _ in }
 442 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:466:13: warning: initialization of immutable value 'federalDecision' was never used; consider replacing with assignment to '_' or removing it
 464 |         // Given: AgenticSuggestionView in FedRAMP environment
 465 |         let federalContext = createFederalAcquisitionContext()
 466 |         let federalDecision = createFederalDecisionResponse(context: federalContext)
     |             `- warning: initialization of immutable value 'federalDecision' was never used; consider replacing with assignment to '_' or removing it
 467 |         guard let viewModel else {
 468 |             XCTFail("ViewModel should be initialized")

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:474:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 472 |         // viewModel.currentSuggestions = [federalDecision]
 473 | 
 474 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 475 | 
 476 |         // When: FedRAMP compliance is validated

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:520:54: error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
 518 |         }
 519 |         do {
 520 |             try await viewModel.loadSuggestions(for: maliciousContext)
     |                                                      `- error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
 521 |         } catch {
 522 |             // Expected to handle malicious input gracefully

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:537:13: warning: initialization of immutable value 'oversizedSuggestions' was never used; consider replacing with assignment to '_' or removing it
 535 |     func testAgenticSuggestionView_VulnerabilityTesting_HandlesBufferOverflows() throws {
 536 |         // Given: AgenticSuggestionView with large data sets
 537 |         let oversizedSuggestions = createOversizedSuggestionSet()
     |             `- warning: initialization of immutable value 'oversizedSuggestions' was never used; consider replacing with assignment to '_' or removing it
 538 | 
 539 |         // When: Large data is processed

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:546:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 544 |         // Mock setting current suggestions - actual implementation would use load method
 545 |         // viewModel.currentSuggestions = oversizedSuggestions
 546 |         let view = AgenticSuggestionView(viewModel: viewModel)
     |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 547 | 
 548 |         // Then: Should handle large data without buffer overflows

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:561:35: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call
 559 | 
 560 |     private func createTestAcquisitionContext() -> AppCore.AcquisitionContext {
 561 |         AppCore.AcquisitionContext(
     |                                   `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call
 562 |             acquisitionId: UUID(),
 563 |             documentType: .requestForProposal,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:262:12: note: 'init(type:confidence:subContexts:metadata:)' declared here
260 |     }
261 | 
262 |     public init(type: ContextCategory, confidence: ContextConfidence, subContexts: [String], metadata: ContextMetadata) {
    |            `- note: 'init(type:confidence:subContexts:metadata:)' declared here
263 |         self.type = type
264 |         self.confidence = confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:561:35: error: missing arguments for parameters 'type', 'confidence', 'subContexts', 'metadata' in call
 559 | 
 560 |     private func createTestAcquisitionContext() -> AppCore.AcquisitionContext {
 561 |         AppCore.AcquisitionContext(
     |                                   `- error: missing arguments for parameters 'type', 'confidence', 'subContexts', 'metadata' in call
 562 |             acquisitionId: UUID(),
 563 |             documentType: .requestForProposal,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:262:12: note: 'init(type:confidence:subContexts:metadata:)' declared here
260 |     }
261 | 
262 |     public init(type: ContextCategory, confidence: ContextConfidence, subContexts: [String], metadata: ContextMetadata) {
    |            `- note: 'init(type:confidence:subContexts:metadata:)' declared here
263 |         self.type = type
264 |         self.confidence = confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:563:28: error: cannot infer contextual base in reference to member 'requestForProposal'
 561 |         AppCore.AcquisitionContext(
 562 |             acquisitionId: UUID(),
 563 |             documentType: .requestForProposal,
     |                            `- error: cannot infer contextual base in reference to member 'requestForProposal'
 564 |             acquisitionValue: 300_000.0,
 565 |             complexity: TestComplexityLevel(score: 3.2, factors: ["security", "classified", "federal"]),

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:600:17: error: value of type 'AcquisitionContext' has no member 'documentType'
 598 |         var context = createTestAcquisitionContext()
 599 |         // Inject potentially malicious content
 600 |         context.documentType = .other("; DROP TABLE acquisitions; --")
     |                 `- error: value of type 'AcquisitionContext' has no member 'documentType'
 601 |         return context
 602 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:600:33: error: cannot infer contextual base in reference to member 'other'
 598 |         var context = createTestAcquisitionContext()
 599 |         // Inject potentially malicious content
 600 |         context.documentType = .other("; DROP TABLE acquisitions; --")
     |                                 `- error: cannot infer contextual base in reference to member 'other'
 601 |         return context
 602 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:605:33: error: extra arguments at positions #3, #4, #5, #6 in call
 603 | 
 604 |     private func createTestDecisionResponse() -> AppCore.DecisionResponse {
 605 |         AppCore.DecisionResponse(
     |                                 `- error: extra arguments at positions #3, #4, #5, #6 in call
 606 |             selectedAction: WorkflowAction.placeholder,
 607 |             confidence: 0.82,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:129:12: note: 'init(selectedAction:confidence:timestamp:)' declared here
127 |     public let timestamp: Date
128 | 
129 |     public init(selectedAction: RLAction, confidence: Double, timestamp: Date = Date()) {
    |            `- note: 'init(selectedAction:confidence:timestamp:)' declared here
130 |         self.selectedAction = selectedAction
131 |         self.confidence = confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:606:44: error: cannot convert value of type 'WorkflowAction' to expected argument type 'RLAction'
 604 |     private func createTestDecisionResponse() -> AppCore.DecisionResponse {
 605 |         AppCore.DecisionResponse(
 606 |             selectedAction: WorkflowAction.placeholder,
     |                                            `- error: cannot convert value of type 'WorkflowAction' to expected argument type 'RLAction'
 607 |             confidence: 0.82,
 608 |             decisionMode: .assisted,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:608:28: error: cannot infer contextual base in reference to member 'assisted'
 606 |             selectedAction: WorkflowAction.placeholder,
 607 |             confidence: 0.82,
 608 |             decisionMode: .assisted,
     |                            `- error: cannot infer contextual base in reference to member 'assisted'
 609 |             reasoning: "Security-tested decision response with audit trail",
 610 |             alternativeActions: [],

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:622:22: error: value of type 'DecisionResponse' has no member 'context'
 620 |         decision.containsCUI = true
 621 |         if let context = context {
 622 |             decision.context = context
     |                      `- error: value of type 'DecisionResponse' has no member 'context'
 623 |         }
 624 |         return decision

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:643:18: error: value of type 'DecisionResponse' has no member 'context'
 641 |     private func createFederalDecisionResponse(context: AppCore.AcquisitionContext) -> AppCore.DecisionResponse {
 642 |         var decision = createTestDecisionResponse()
 643 |         decision.context = context
     |                  `- error: value of type 'DecisionResponse' has no member 'context'
 644 |         decision.isFederalDecision = true
 645 |         decision.fedRAMPValidated = true

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:666:31: error: extra argument 'securityControls' in call
 664 |             complianceScore: 0.94,
 665 |             riskFactors: ["cybersecurity", "data protection", "cui handling"],
 666 |             securityControls: ["AC-2", "AU-2", "IR-4", "SC-7"]
     |                               `- error: extra argument 'securityControls' in call
 667 |         )
 668 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:658:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 656 |         ComplianceContext(
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
     |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
 660 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:659:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
     |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
 660 |             ],
 661 |             dfarsReferences: [

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:658:29: error: extra arguments at positions #2, #3 in call
 656 |         ComplianceContext(
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
     |                             `- error: extra arguments at positions #2, #3 in call
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
 660 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:658:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 656 |         ComplianceContext(
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
     |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
 660 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:659:29: error: extra arguments at positions #2, #3 in call
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
     |                             `- error: extra arguments at positions #2, #3 in call
 660 |             ],
 661 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:659:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 657 |             farReferences: [
 658 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
 659 |                 FARReference(section: "52.204-2", title: "Security Requirements", url: "https://acquisition.gov/far/52.204-2"),
     |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 660 |             ],
 661 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:662:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
 660 |             ],
 661 |             dfarsReferences: [
 662 |                 DFARSReference(section: "252.204-7012", title: "Safeguarding Covered Defense Information", url: "https://acquisition.gov/dfars/252.204-7012"),
     |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
 663 |             ],
 664 |             complianceScore: 0.94,

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:662:31: error: extra arguments at positions #2, #3 in call
 660 |             ],
 661 |             dfarsReferences: [
 662 |                 DFARSReference(section: "252.204-7012", title: "Safeguarding Covered Defense Information", url: "https://acquisition.gov/dfars/252.204-7012"),
     |                               `- error: extra arguments at positions #2, #3 in call
 663 |             ],
 664 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:662:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 660 |             ],
 661 |             dfarsReferences: [
 662 |                 DFARSReference(section: "252.204-7012", title: "Safeguarding Covered Defense Information", url: "https://acquisition.gov/dfars/252.204-7012"),
     |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
 663 |             ],
 664 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:689:22: error: value of type 'DecisionResponse' has no member 'reasoning'
 687 |         Array(0 ..< 10000).map { _ in
 688 |             var decision = createTestDecisionResponse()
 689 |             decision.reasoning = String(repeating: "Large reasoning content ", count: 1000)
     |                      `- error: value of type 'DecisionResponse' has no member 'reasoning'
 690 |             return decision
 691 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:1024:22: error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1022 |             reasoning: "Security-tested AIKO decision response with audit trail",
1023 |             alternativeActions: [],
1024 |             context: testContext,
     |                      `- error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1025 |             timestamp: Date()
1026 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:1039:22: error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1037 |             reasoning: "Decision with regulatory compliance references",
1038 |             alternativeActions: [],
1039 |             context: testContext,
     |                      `- error: cannot convert value of type 'AppCore.AcquisitionContext' to expected argument type 'AIKO.AcquisitionContext'
1040 |             timestamp: Date()
1041 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:41:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 39 |             return
 40 |         }
 41 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 42 |             suggestion: testSuggestion,
 43 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:57:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 55 |             return
 56 |         }
 57 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 58 |             suggestion: testSuggestion,
 59 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:73:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 71 |             return
 72 |         }
 73 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 74 |             suggestion: testSuggestion,
 75 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:91:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 89 |             return
 90 |         }
 91 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 92 |             suggestion: testSuggestion,
 93 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:110:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
108 |             return
109 |         }
110 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
111 |             suggestion: testSuggestion,
112 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:131:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
129 |             return
130 |         }
131 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
132 |             suggestion: testSuggestion,
133 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:147:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
145 |             return
146 |         }
147 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
148 |             suggestion: testSuggestion,
149 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:167:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
165 |             return
166 |         }
167 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
168 |             suggestion: testSuggestion,
169 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:188:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
186 |             return
187 |         }
188 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
189 |             suggestion: testSuggestion,
190 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:207:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
205 |             return
206 |         }
207 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
208 |             suggestion: testSuggestion,
209 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:226:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
224 |         }
225 |         let batchSuggestions = createBatchSuggestions()
226 |         let view = BatchSuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
227 |             suggestions: batchSuggestions,
228 |             onBatchFeedback: feedbackCallbacks.onBatchFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:248:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
246 |         }
247 |         let documentSuggestion = createDocumentGenerationSuggestion()
248 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
249 |             suggestion: documentSuggestion,
250 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:265:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
263 |         }
264 |         let complianceSuggestion = createComplianceSuggestion()
265 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
266 |             suggestion: complianceSuggestion,
267 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:283:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
281 |             return
282 |         }
283 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
284 |             suggestion: testSuggestion,
285 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:309:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
307 |             return
308 |         }
309 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
310 |             suggestion: testSuggestion,
311 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:325:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
323 |             return
324 |         }
325 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
326 |             suggestion: testSuggestion,
327 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:343:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
341 |             return
342 |         }
343 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
344 |             suggestion: testSuggestion,
345 |             onFeedback: feedbackCallbacks.onFeedback

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:366:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
364 |             return
365 |         }
366 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
367 |             suggestion: testSuggestion,
368 |             onFeedback: feedbackCallbacks.onFeedback,

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionFeedbackViewTests.swift:383:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
381 |             return
382 |         }
383 |         let view = SuggestionFeedbackView(
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
384 |             suggestion: testSuggestion,
385 |             onFeedback: feedbackCallbacks.onFeedback,

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    :
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var testContext: AcquisitionContext?
 16 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:15:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:331:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
329 |     // MARK: - Helper Methods
330 | 
331 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
332 |         AcquisitionContext(
333 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:346:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
344 |     }
345 | 
346 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
347 |         DecisionResponse(
348 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:358:54: error: 'DecisionResponse' is ambiguous for type lookup in this context
356 |     }
357 | 
358 |     private func createHighConfidenceSuggestion() -> DecisionResponse {
    |                                                      `- error: 'DecisionResponse' is ambiguous for type lookup in this context
359 |         DecisionResponse(
360 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:370:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |     }
369 | 
370 |     private func createLowConfidenceSuggestion() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
371 |         DecisionResponse(
372 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:382:49: error: 'DecisionResponse' is ambiguous for type lookup in this context
380 |     }
381 | 
382 |     private func createLargeSuggestionSet() -> [DecisionResponse] {
    |                                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
383 |         Array(0 ..< 100).map { index in
384 |             DecisionResponse(

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:404:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
402 |     var feedbackCallCount = 0
403 | 
404 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
405 |         if shouldThrowError {
406 |             throw TestError.mockError

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:424:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
422 |     }
423 | 
424 |     func provideFeedback(for _: DecisionResponse, feedback _: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
425 |         feedbackCallCount += 1
426 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:400:9: error: stored property 'shouldThrowError' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
398 | 
399 | class MockAgenticOrchestrator: Sendable {
400 |     var shouldThrowError = false
    |         `- error: stored property 'shouldThrowError' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
401 |     var networkError = false
402 |     var feedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: error: invalid redeclaration of 'MockAgenticOrchestrator'
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- error: invalid redeclaration of 'MockAgenticOrchestrator'
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:433:6: error: invalid redeclaration of 'TestError'
431 | }
432 | 
433 | enum TestError: Error {
    |      `- error: invalid redeclaration of 'TestError'
434 |     case mockError
435 |     case networkError

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:144:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
142 |         }
143 |         let testSuggestion = createTestDecisionResponse()
144 |         viewModel.currentSuggestions = [testSuggestion]
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
145 | 
146 |         let feedback = AgenticUserFeedback(

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:190:37: error: value of type 'SuggestionViewModel' has no member '$currentSuggestions'
188 |         }
189 |         var observedChanges = 0
190 |         let observation = viewModel.$currentSuggestions.sink { _ in
    |                                     `- error: value of type 'SuggestionViewModel' has no member '$currentSuggestions'
191 |             observedChanges += 1
192 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:197:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
195 | 
196 |         // When: State changes
197 |         viewModel.currentSuggestions = [createTestDecisionResponse()]
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
198 | 
199 |         // Then: Should notify observers

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:236:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
234 |         let highConfidenceSuggestion = createHighConfidenceSuggestion()
235 |         let lowConfidenceSuggestion = createLowConfidenceSuggestion()
236 |         viewModel.currentSuggestions = [highConfidenceSuggestion, lowConfidenceSuggestion]
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
237 | 
238 |         // When: Confidence threshold is updated

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:431:35: error: 'DecisionResponse' is ambiguous for type lookup in this context
429 |     }
430 | 
431 |     func processRealTimeUpdate(_: DecisionResponse) async throws {
    |                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |         // RED PHASE: Not implemented
433 |         throw IntegrationTestError.serviceUnavailable

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:277:19: error: cannot assign to property: 'currentSuggestions' setter is inaccessible
275 | 
276 |         // When: Large suggestion set is loaded
277 |         viewModel.currentSuggestions = largeSuggestionSet
    |                   `- error: cannot assign to property: 'currentSuggestions' setter is inaccessible
278 | 
279 |         // Then: Should manage memory efficiently

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:406:29: error: type 'TestError' has no member 'mockError'
404 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
405 |         if shouldThrowError {
406 |             throw TestError.mockError
    |                             `- error: type 'TestError' has no member 'mockError'
407 |         }
408 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:428:29: error: type 'TestError' has no member 'mockError'
426 | 
427 |         if shouldThrowError {
428 |             throw TestError.mockError
    |                             `- error: type 'TestError' has no member 'mockError'
429 |         }
430 |     }
error: emit-module command failed with exit code 1 (use -v to see invocation)
[6/35] Emitting module AIKOTests
/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:833:58: error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
831 |     // MARK: - Test Helper Methods
832 | 
833 |     private func createTestAcquisition(title: String) -> AcquisitionAggregate {
    |                                                          `- error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
834 |         AcquisitionAggregate(
835 |             id: UUID(),

/Users/J/aiko/Sources/Domain/Models/AcquisitionAggregate.swift:6:20: note: found this candidate
  4 | 
  5 | /// Rich domain model for Acquisition aggregate root
  6 | public final class AcquisitionAggregate: AggregateRoot<Acquisition>, @unchecked Sendable {
    |                    `- note: found this candidate
  7 |     // MARK: - Properties
  8 | 

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:295:15: note: found this candidate
293 | 
294 | /// Acquisition aggregate for context classification
295 | public struct AcquisitionAggregate: Sendable {
    |               `- note: found this candidate
296 |     public let title: String?
297 |     public let description: String?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:845:79: error: 'AcquisitionContext' is ambiguous for type lookup in this context
843 |     }
844 | 
845 |     private func createTestAcquisitionContext(_ category: ContextCategory) -> AcquisitionContext {
    |                                                                               `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
846 |         let acquisitionType: AcquisitionType = switch category {
847 |         case .informationTechnology:

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:882:94: error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
880 |     }
881 | 
882 |     private func createHighConfidenceScenario() -> (formData: AppCore.FormData, acquisition: AcquisitionAggregate, userProfile: AppCore.UserProfile) {
    |                                                                                              `- error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
883 |         // Create test form fields using the correct AppCore FormField
884 |         let testField = AppCore.FormField(

/Users/J/aiko/Sources/Domain/Models/AcquisitionAggregate.swift:6:20: note: found this candidate
  4 | 
  5 | /// Rich domain model for Acquisition aggregate root
  6 | public final class AcquisitionAggregate: AggregateRoot<Acquisition>, @unchecked Sendable {
    |                    `- note: found this candidate
  7 |     // MARK: - Properties
  8 | 

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:295:15: note: found this candidate
293 | 
294 | /// Acquisition aggregate for context classification
295 | public struct AcquisitionAggregate: Sendable {
    |               `- note: found this candidate
296 |     public let title: String?
297 |     public let description: String?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:937:11: error: cannot find type 'AdaptiveFormEventType' in scope
935 | // MARK: - Test Extensions
936 | 
937 | extension AdaptiveFormEventType {
    |           `- error: cannot find type 'AdaptiveFormEventType' in scope
938 |     init?(rawValue: String) {
939 |         switch rawValue {

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:12:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
  10 |     // MARK: - Test Infrastructure
  11 | 
  12 |     var adaptiveService: AdaptiveFormPopulationService?
     |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
  13 |     var qLearningAgent: FormFieldQLearningAgent?
  14 |     var contextClassifier: AcquisitionContextClassifier?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:13:25: error: cannot find type 'FormFieldQLearningAgent' in scope
  11 | 
  12 |     var adaptiveService: AdaptiveFormPopulationService?
  13 |     var qLearningAgent: FormFieldQLearningAgent?
     |                         `- error: cannot find type 'FormFieldQLearningAgent' in scope
  14 |     var contextClassifier: AcquisitionContextClassifier?
  15 |     var mockCoreDataActor: MockCoreDataActor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:14:28: error: cannot find type 'AcquisitionContextClassifier' in scope
  12 |     var adaptiveService: AdaptiveFormPopulationService?
  13 |     var qLearningAgent: FormFieldQLearningAgent?
  14 |     var contextClassifier: AcquisitionContextClassifier?
     |                            `- error: cannot find type 'AcquisitionContextClassifier' in scope
  15 |     var mockCoreDataActor: MockCoreDataActor?
  16 |     var performanceMonitor: PerformanceMonitor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:16:29: error: 'PerformanceMonitor' is ambiguous for type lookup in this context
  14 |     var contextClassifier: AcquisitionContextClassifier?
  15 |     var mockCoreDataActor: MockCoreDataActor?
  16 |     var performanceMonitor: PerformanceMonitor?
     |                             `- error: 'PerformanceMonitor' is ambiguous for type lookup in this context
  17 |     var mlxBenchmarker: MLXPerformanceBenchmarker?
  18 | 
     :
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- note: found this candidate
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:470:7: note: found this candidate
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- note: found this candidate
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:94: error: cannot find type 'QLearningState' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                                                              `- error: cannot find type 'QLearningState' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:54: error: cannot find type 'FieldType' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                      `- error: cannot find type 'FieldType' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:74: error: cannot find type 'ContextCategory' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                                          `- error: cannot find type 'ContextCategory' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:765:50: error: cannot find type 'QLearningState' in scope
 763 |     }
 764 | 
 765 |     private func createRandomQLearningState() -> QLearningState {
     |                                                  `- error: cannot find type 'QLearningState' in scope
 766 |         QLearningState(
 767 |             fieldType: FieldType.allCases.randomElement() ?? .textField,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:778:51: error: cannot find type 'QLearningAction' in scope
 776 |     }
 777 | 
 778 |     private func createRandomQLearningAction() -> QLearningAction {
     |                                                   `- error: cannot find type 'QLearningAction' in scope
 779 |         let values = ["Test Value", "Sample Text", "Default Option", "Custom Entry"]
 780 |         return QLearningAction(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:786:51: error: cannot find type 'QLearningState' in scope
 784 |     }
 785 | 
 786 |     private func createComplexQLearningState() -> QLearningState {
     |                                                   `- error: cannot find type 'QLearningState' in scope
 787 |         QLearningState(
 788 |             fieldType: .dropdownField,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:929:64: error: cannot find type 'QLearningState' in scope
 927 |     }
 928 | 
 929 |     private func createUniqueQLearningState(iteration: Int) -> QLearningState {
     |                                                                `- error: cannot find type 'QLearningState' in scope
 930 |         QLearningState(
 931 |             fieldType: FieldType.allCases[iteration % FieldType.allCases.count],

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:975:16: error: cannot find type 'QLearningState' in scope
 973 | 
 974 | struct FieldSuggestionScenario {
 975 |     let state: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
 976 |     let expectedComplexity: ComplexityLevel
 977 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:986:16: error: cannot find type 'QLearningState' in scope
 984 | 
 985 | struct QNetworkUpdateScenario {
 986 |     let state: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
 987 |     let action: QLearningAction
 988 |     let reward: Double

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:987:17: error: cannot find type 'QLearningAction' in scope
 985 | struct QNetworkUpdateScenario {
 986 |     let state: QLearningState
 987 |     let action: QLearningAction
     |                 `- error: cannot find type 'QLearningAction' in scope
 988 |     let reward: Double
 989 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1019:16: error: cannot find type 'QLearningState' in scope
1017 | 
1018 | struct QuantizationTestCase {
1019 |     let input: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
1020 |     let expectedOutput: QLearningAction
1021 |     let tolerance: Double

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1020:25: error: cannot find type 'QLearningAction' in scope
1018 | struct QuantizationTestCase {
1019 |     let input: QLearningState
1020 |     let expectedOutput: QLearningAction
     |                         `- error: cannot find type 'QLearningAction' in scope
1021 |     let tolerance: Double
1022 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1024:8: error: invalid redeclaration of 'PerformanceMetrics'
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- error: invalid redeclaration of 'PerformanceMetrics'
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1032:13: error: invalid redeclaration of 'PerformanceMonitor'
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- error: invalid redeclaration of 'PerformanceMonitor'
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1071:36: error: cannot find type 'QLearningState' in scope
1069 |     }
1070 | 
1071 |     func benchmarkWithGPU(state _: QLearningState, iterations _: Int) async -> MLXBenchmarkResults {
     |                                    `- error: cannot find type 'QLearningState' in scope
1072 |         MLXBenchmarkResults(
1073 |             averageLatency: Double.random(in: 0.01 ... 0.03),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1078:36: error: cannot find type 'QLearningState' in scope
1076 |     }
1077 | 
1078 |     func benchmarkWithCPU(state _: QLearningState, iterations _: Int) async -> MLXBenchmarkResults {
     |                                    `- error: cannot find type 'QLearningState' in scope
1079 |         MLXBenchmarkResults(
1080 |             averageLatency: Double.random(in: 0.03 ... 0.08),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1294:44: error: cannot find type 'ThermalState' in scope
1292 |     }
1293 | 
1294 |     func getCurrentThermalState() async -> ThermalState {
     |                                            `- error: cannot find type 'ThermalState' in scope
1295 |         // Simulate thermal state
1296 |         let states: [ThermalState] = [.nominal, .fair, .serious]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1300:47: error: cannot find type 'ThermalState' in scope
1298 |     }
1299 | 
1300 |     func calculateThermalImpact(from initial: ThermalState, to final: ThermalState) -> Double {
     |                                               `- error: cannot find type 'ThermalState' in scope
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1300:71: error: cannot find type 'ThermalState' in scope
1298 |     }
1299 | 
1300 |     func calculateThermalImpact(from initial: ThermalState, to final: ThermalState) -> Double {
     |                                                                       `- error: cannot find type 'ThermalState' in scope
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1315:13: error: type 'PerformanceMockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
1313 | 
1314 | /// Mock orchestrator for testing
1315 | final class PerformanceMockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             |- error: type 'PerformanceMockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
     |             `- note: add stubs for conformance
1316 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1317 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1324:52: error: type 'UrgencyLevel' has no member 'urgent'
1322 | 
1323 | extension UrgencyLevel: CaseIterable {
1324 |     public static let allCases: [UrgencyLevel] = [.urgent, .moderate, .normal]
     |                                                    `- error: type 'UrgencyLevel' has no member 'urgent'
1325 | }
1326 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1324:61: error: type 'UrgencyLevel' has no member 'moderate'
1322 | 
1323 | extension UrgencyLevel: CaseIterable {
1324 |     public static let allCases: [UrgencyLevel] = [.urgent, .moderate, .normal]
     |                                                             `- error: type 'UrgencyLevel' has no member 'moderate'
1325 | }
1326 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1327:28: warning: conformance of 'ComplexityLevel' to protocol 'CaseIterable' was already stated in the type's module 'AIKO'
1325 | }
1326 | 
1327 | extension ComplexityLevel: CaseIterable {
     |                            `- warning: conformance of 'ComplexityLevel' to protocol 'CaseIterable' was already stated in the type's module 'AIKO'
1328 |     public static let allCases: [ComplexityLevel] = [.high, .medium, .low]
     |                       `- note: static property 'allCases' will not be used to satisfy the conformance to 'CaseIterable'
1329 | }
1330 | 

/Users/J/aiko/Sources/Models/DocumentChain.swift:149:13: note: 'ComplexityLevel' declares conformance to protocol 'CaseIterable' here
147 | 
148 | /// Complexity level of the acquisition
149 | public enum ComplexityLevel: String, Codable, CaseIterable, Sendable {
    |             `- note: 'ComplexityLevel' declares conformance to protocol 'CaseIterable' here
150 |     case low = "Low"
151 |     case medium = "Medium"

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:12:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
 10 |     // MARK: - Test Infrastructure
 11 | 
 12 |     var adaptiveService: AdaptiveFormPopulationService?
    |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
 13 |     var qLearningAgent: FormFieldQLearningAgent?
 14 |     var modificationTracker: FormModificationTracker?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:13:25: error: cannot find type 'FormFieldQLearningAgent' in scope
 11 | 
 12 |     var adaptiveService: AdaptiveFormPopulationService?
 13 |     var qLearningAgent: FormFieldQLearningAgent?
    |                         `- error: cannot find type 'FormFieldQLearningAgent' in scope
 14 |     var modificationTracker: FormModificationTracker?
 15 |     var mockCoreDataActor: MockCoreDataActor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:14:30: error: cannot find type 'FormModificationTracker' in scope
 12 |     var adaptiveService: AdaptiveFormPopulationService?
 13 |     var qLearningAgent: FormFieldQLearningAgent?
 14 |     var modificationTracker: FormModificationTracker?
    |                              `- error: cannot find type 'FormModificationTracker' in scope
 15 |     var mockCoreDataActor: MockCoreDataActor?
 16 |     var privacyValidator: PrivacyComplianceValidator?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:607:48: error: cannot find type 'ContextCategory' in scope
605 |     // MARK: - Test Helper Methods
606 | 
607 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
    |                                                `- error: cannot find type 'ContextCategory' in scope
608 |         AcquisitionContext(
609 |             category: category,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:94: error: cannot find type 'QLearningState' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                                                              `- error: cannot find type 'QLearningState' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:54: error: cannot find type 'FieldType' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                      `- error: cannot find type 'FieldType' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:74: error: cannot find type 'ContextCategory' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                                          `- error: cannot find type 'ContextCategory' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:658:82: error: cannot find type 'QLearningAction' in scope
656 |     }
657 | 
658 |     private func createTestQLearningAction(value: String, confidence: Double) -> QLearningAction {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
659 |         QLearningAction(suggestedValue: value, confidence: confidence)
660 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:662:60: error: cannot find type 'QLearningState' in scope
660 |     }
661 | 
662 |     private func createExtensiveLearningData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                            `- error: cannot find type 'QLearningState' in scope
663 |         (1 ... 100).map { i in
664 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:662:84: error: cannot find type 'QLearningAction' in scope
660 |     }
661 | 
662 |     private func createExtensiveLearningData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                    `- error: cannot find type 'QLearningAction' in scope
663 |         (1 ... 100).map { i in
664 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:675:59: error: cannot find type 'QLearningState' in scope
673 |     }
674 | 
675 |     private func createSensitivePatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                           `- error: cannot find type 'QLearningState' in scope
676 |         [
677 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:675:83: error: cannot find type 'QLearningAction' in scope
673 |     }
674 | 
675 |     private func createSensitivePatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                   `- error: cannot find type 'QLearningAction' in scope
676 |         [
677 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:690:55: error: cannot find type 'QLearningState' in scope
688 |     }
689 | 
690 |     private func createSimplePatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                       `- error: cannot find type 'QLearningState' in scope
691 |         (
692 |             state: createTestQLearningState(fieldType: .textField, context: .general),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:690:79: error: cannot find type 'QLearningAction' in scope
688 |     }
689 | 
690 |     private func createSimplePatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                                               `- error: cannot find type 'QLearningAction' in scope
691 |         (
692 |             state: createTestQLearningState(fieldType: .textField, context: .general),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:697:56: error: cannot find type 'QLearningState' in scope
695 |     }
696 | 
697 |     private func createComplexPatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                        `- error: cannot find type 'QLearningState' in scope
698 |         (
699 |             state: createTestQLearningState(fieldType: .dropdownField, context: .informationTechnology),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:697:80: error: cannot find type 'QLearningAction' in scope
695 |     }
696 | 
697 |     private func createComplexPatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                                                `- error: cannot find type 'QLearningAction' in scope
698 |         (
699 |             state: createTestQLearningState(fieldType: .dropdownField, context: .informationTechnology),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:704:59: error: cannot find type 'QLearningState' in scope
702 |     }
703 | 
704 |     private func createKnownTrainingDataSet() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                           `- error: cannot find type 'QLearningState' in scope
705 |         (1 ... 50).map { i in
706 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:704:83: error: cannot find type 'QLearningAction' in scope
702 |     }
703 | 
704 |     private func createKnownTrainingDataSet() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                   `- error: cannot find type 'QLearningAction' in scope
705 |         (1 ... 50).map { i in
706 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:717:57: error: cannot find type 'QLearningState' in scope
715 |     }
716 | 
717 |     private func createRegularPatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                         `- error: cannot find type 'QLearningState' in scope
718 |         [
719 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:717:81: error: cannot find type 'QLearningAction' in scope
715 |     }
716 | 
717 |     private func createRegularPatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                 `- error: cannot find type 'QLearningAction' in scope
718 |         [
719 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:60: error: cannot find type 'QLearningState' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                            `- error: cannot find type 'QLearningState' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:84: error: cannot find type 'QLearningAction' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                                                    `- error: cannot find type 'QLearningAction' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:131: error: cannot find type 'AdaptiveFormMetricsCollector' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                                                                                                   `- error: cannot find type 'AdaptiveFormMetricsCollector' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             |- error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
    |             `- note: add stubs for conformance
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: error: invalid redeclaration of 'MockAgenticOrchestrator'
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- error: invalid redeclaration of 'MockAgenticOrchestrator'
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:10:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
   8 |     // MARK: - Test Infrastructure
   9 | 
  10 |     var adaptiveService: AdaptiveFormPopulationService?
     |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
  11 |     var formIntelligenceAdapter: FormIntelligenceAdapter?
  12 |     var trustFramework: UserTrustFramework?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1158:51: error: cannot find type 'FormPopulationResult' in scope
1156 |     }
1157 | 
1158 |     private func simulateUserSatisfaction(result: FormPopulationResult) async -> Double {
     |                                                   `- error: cannot find type 'FormPopulationResult' in scope
1159 |         // Simulate user satisfaction based on result quality
1160 |         let baselineScore = 0.7

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1167:50: error: cannot find type 'FormPopulationResult' in scope
1165 |     }
1166 | 
1167 |     private func calculateFormAccuracy(result _: FormPopulationResult) async -> Double {
     |                                                  `- error: cannot find type 'FormPopulationResult' in scope
1168 |         // Simulate form accuracy calculation
1169 |         Double.random(in: 0.6 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1172:52: error: cannot find type 'FormPopulationResult' in scope
1170 |     }
1171 | 
1172 |     private func simulateUserModifications(result: FormPopulationResult) async -> Int {
     |                                                    `- error: cannot find type 'FormPopulationResult' in scope
1173 |         // Simulate number of user modifications based on confidence
1174 |         let modificationRate = 1.0 - result.overallConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1234:48: error: cannot find type 'ContextCategory' in scope
1232 |     }
1233 | 
1234 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
     |                                                `- error: cannot find type 'ContextCategory' in scope
1235 |         AcquisitionContext(
1236 |             category: category,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1430:147: error: cannot find type 'FormPopulationResult' in scope
1428 |     }
1429 | 
1430 |     func generateAdaptiveSuggestions(form: StandardizedTestForm, acquisition _: AcquisitionAggregate, userProfile _: UserProfile) async throws -> FormPopulationResult {
     |                                                                                                                                                   `- error: cannot find type 'FormPopulationResult' in scope
1431 |         // Generate adaptive suggestions in background
1432 |         FormPopulationResult(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1440:56: error: cannot find type 'FormPopulationResult' in scope
1438 |     }
1439 | 
1440 |     func compareWithUserChoices(adaptiveSuggestions _: FormPopulationResult, userChoices _: [String: String]) async -> ShadowModeResult {
     |                                                        `- error: cannot find type 'FormPopulationResult' in scope
1441 |         let accuracy = Double.random(in: 0.6 ... 0.9)
1442 |         let improvement = Double.random(in: 0.1 ... 0.3)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             |- error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
     |             `- note: add stubs for conformance
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: error: invalid redeclaration of 'MockAgenticOrchestrator'
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- error: invalid redeclaration of 'MockAgenticOrchestrator'
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1495:46: error: cannot find type 'FormPopulationResult' in scope
1493 | }
1494 | 
1495 | private func extractSuggestions(from result: FormPopulationResult) async -> [FormSuggestion] {
     |                                              `- error: cannot find type 'FormPopulationResult' in scope
1496 |     result.fields.compactMap { key, value in
1497 |         guard !value.isEmpty else { return nil }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1513:55: error: cannot find type 'FormPopulationResult' in scope
1511 | }
1512 | 
1513 | private func simulateUserFormCompletion(staticResult: FormPopulationResult) async -> [String: String] {
     |                                                       `- error: cannot find type 'FormPopulationResult' in scope
1514 |     // Simulate user completing form based on static suggestions
1515 |     var userChoices: [String: String] = [:]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1529:63: error: cannot find type 'FieldExplanation' in scope
1527 | }
1528 | 
1529 | private func simulateUserExplanationEvaluation(explanation _: FieldExplanation, userProfile _: UserProfile, expectedReasoning _: String) async -> Double {
     |                                                               `- error: cannot find type 'FieldExplanation' in scope
1530 |     // Simulate user rating explanation helpfulness
1531 |     Double.random(in: 0.6 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1534:57: error: cannot find type 'FieldExplanation' in scope
1532 | }
1533 | 
1534 | private func validateExplanationAccuracy(explanation _: FieldExplanation, actualReasoning _: String) async -> Double {
     |                                                         `- error: cannot find type 'FieldExplanation' in scope
1535 |     // Validate explanation matches actual system reasoning
1536 |     Double.random(in: 0.7 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:11:14: error: cannot find type 'FormFieldQLearningAgent' in scope
  9 |     // MARK: - Test Infrastructure
 10 | 
 11 |     var sut: FormFieldQLearningAgent?
    |              `- error: cannot find type 'FormFieldQLearningAgent' in scope
 12 |     var mockCoreDataActor: MockCoreDataActor?
 13 |     var testScheduler: TestScheduler?

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:421:10: error: cannot find type 'QLearningState' in scope
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
421 |     ) -> QLearningState {
    |          `- error: cannot find type 'QLearningState' in scope
422 |         QLearningState(
423 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:417:20: error: cannot find type 'FieldType' in scope
415 | 
416 |     private func createTestQLearningState(
417 |         fieldType: FieldType,
    |                    `- error: cannot find type 'FieldType' in scope
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:418:18: error: cannot find type 'ContextCategory' in scope
416 |     private func createTestQLearningState(
417 |         fieldType: FieldType,
418 |         context: ContextCategory,
    |                  `- error: cannot find type 'ContextCategory' in scope
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:419:22: error: cannot find type 'UserSegment' in scope
417 |         fieldType: FieldType,
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,
    |                      `- error: cannot find type 'UserSegment' in scope
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
421 |     ) -> QLearningState {

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:420:26: error: cannot find type 'TemporalContext' in scope
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                          `- error: cannot find type 'TemporalContext' in scope
421 |     ) -> QLearningState {
422 |         QLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:430:82: error: cannot find type 'QLearningAction' in scope
428 |     }
429 | 
430 |     private func createTestQLearningAction(value: String, confidence: Double) -> QLearningAction {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
431 |         QLearningAction(
432 |             suggestedValue: value,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:437:56: error: cannot find type 'QLearningState' in scope
435 |     }
436 | 
437 |     private func createITContextStates(count: Int) -> [QLearningState] {
    |                                                        `- error: cannot find type 'QLearningState' in scope
438 |         (1 ... count).map { i in
439 |             createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:452:57: error: cannot find type 'QLearningAction' in scope
450 |     }
451 | 
452 |     private func createITContextActions(count: Int) -> [QLearningAction] {
    |                                                         `- error: cannot find type 'QLearningAction' in scope
453 |         let itValues = ["Cloud Services", "Software License", "IT Support", "Network Equipment", "Cybersecurity"]
454 |         return (1 ... count).map { i in

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:462:66: error: cannot find type 'QLearningState' in scope
460 |     }
461 | 
462 |     private func createConstructionContextStates(count: Int) -> [QLearningState] {
    |                                                                  `- error: cannot find type 'QLearningState' in scope
463 |         (1 ... count).map { i in
464 |             createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:477:67: error: cannot find type 'QLearningAction' in scope
475 |     }
476 | 
477 |     private func createConstructionContextActions(count: Int) -> [QLearningAction] {
    |                                                                   `- error: cannot find type 'QLearningAction' in scope
478 |         let constructionValues = ["Performance Bond", "Prevailing Wage", "Safety Requirements", "Building Materials", "Contractor Services"]
479 |         return (1 ... count).map { i in

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:507:55: error: cannot find type 'QLearningState' in scope
505 |     }
506 | 
507 |     private func calculateContextPerformance(states: [QLearningState], actions: [QLearningAction]) async -> Double {
    |                                                       `- error: cannot find type 'QLearningState' in scope
508 |         var totalQValue: Double = 0
509 |         var count = 0

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:507:82: error: cannot find type 'QLearningAction' in scope
505 |     }
506 | 
507 |     private func calculateContextPerformance(states: [QLearningState], actions: [QLearningAction]) async -> Double {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
508 |         var totalQValue: Double = 0
509 |         var count = 0

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:526:32: error: cannot find type 'CoreDataActorProtocol' in scope
524 | 
525 | /// Mock Core Data actor for testing
526 | final class MockCoreDataActor: CoreDataActorProtocol {
    |                                `- error: cannot find type 'CoreDataActorProtocol' in scope
527 |     private var storage: [String: Any] = [:]
528 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:568:16: error: cannot find type 'QLearningState' in scope
566 | /// Q-Learning experience for replay buffer testing
567 | struct QLearningExperience {
568 |     let state: QLearningState
    |                `- error: cannot find type 'QLearningState' in scope
569 |     let action: QLearningAction
570 |     let reward: Double

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:569:17: error: cannot find type 'QLearningAction' in scope
567 | struct QLearningExperience {
568 |     let state: QLearningState
569 |     let action: QLearningAction
    |                 `- error: cannot find type 'QLearningAction' in scope
570 |     let reward: Double
571 |     let nextState: QLearningState

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:571:20: error: cannot find type 'QLearningState' in scope
569 |     let action: QLearningAction
570 |     let reward: Double
571 |     let nextState: QLearningState
    |                    `- error: cannot find type 'QLearningState' in scope
572 | }
573 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:576:11: error: cannot find type 'FieldType' in scope
574 | // MARK: - Extensions for Testing
575 | 
576 | extension FieldType: CaseIterable {
    |           `- error: cannot find type 'FieldType' in scope
577 |     public static let allCases: [FieldType] = [.textField, .dropdownField, .numberField, .dateField]
578 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:580:11: error: cannot find type 'ContextCategory' in scope
578 | }
579 | 
580 | extension ContextCategory: CaseIterable {
    |           `- error: cannot find type 'ContextCategory' in scope
581 |     public static let allCases: [ContextCategory] = [.informationTechnology, .construction, .professionalServices, .general]
582 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:584:11: error: cannot find type 'UserSegment' in scope
582 | }
583 | 
584 | extension UserSegment: CaseIterable {
    |           `- error: cannot find type 'UserSegment' in scope
585 |     public static let allCases: [UserSegment] = [.novice, .intermediate, .expert]
586 | }

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:12:31: error: 'DecisionResponse' is ambiguous for type lookup in this context
 10 |     // MARK: - Test Properties
 11 | 
 12 |     var testDecisionResponse: DecisionResponse?
    |                               `- error: 'DecisionResponse' is ambiguous for type lookup in this context
 13 |     var testComplianceContext: AIReasoningTestComplianceContext?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var testDecisionResponse: DecisionResponse?
 13 |     var testComplianceContext: AIReasoningTestComplianceContext?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 | 
 16 |     // MARK: - Setup & Teardown

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:330:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
328 |     // MARK: - Helper Methods
329 | 
330 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
331 |         DecisionResponse(
332 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:356:54: error: 'DecisionResponse' is ambiguous for type lookup in this context
354 |     }
355 | 
356 |     private func createDecisionResponseWithSHAP() -> DecisionResponse {
    |                                                      `- error: 'DecisionResponse' is ambiguous for type lookup in this context
357 |         var decision = createTestDecisionResponse()
358 |         decision.shapeExplanations = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:367:57: error: 'DecisionResponse' is ambiguous for type lookup in this context
365 |     }
366 | 
367 |     private func createDecisionResponseWithFactors() -> DecisionResponse {
    |                                                         `- error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |         var decision = createTestDecisionResponse()
369 |         decision.reasoningFactors = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:403:60: error: 'DecisionResponse' is ambiguous for type lookup in this context
401 |     }
402 | 
403 |     private func createDecisionResponseWithAuditTrail() -> DecisionResponse {
    |                                                            `- error: 'DecisionResponse' is ambiguous for type lookup in this context
404 |         var decision = createTestDecisionResponse()
405 |         decision.auditTrailId = "AUDIT-2025-001-\(UUID().uuidString.prefix(8))"

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:415:59: error: 'DecisionResponse' is ambiguous for type lookup in this context
413 |     }
414 | 
415 |     private func createDecisionResponseWithPrecedent() -> DecisionResponse {
    |                                                           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
416 |         var decision = createTestDecisionResponse()
417 |         decision.historicalPrecedents = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:434:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |     }
433 | 
434 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
435 |         var decision = createDecisionResponseWithSHAP()
436 |         decision = createDecisionResponseWithFactors()

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:452:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
450 |     }
451 | 
452 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
453 |         AcquisitionContext(
454 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:508:11: error: 'DecisionResponse' is ambiguous for type lookup in this context
506 | // MARK: - Extended DecisionResponse for Testing
507 | 
508 | extension DecisionResponse {
    |           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
509 |     var shapeExplanations: [String: String] {
510 |         get { [:] } // RED PHASE: Not implemented

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: AccessibilityTestMockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var testContext: AcquisitionContext?
 16 | 
    :
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:15:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: AccessibilityTestMockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:333:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
331 |     // MARK: - Helper Methods
332 | 
333 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
334 |         AcquisitionContext(
335 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:348:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
346 |     }
347 | 
348 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
349 |         DecisionResponse(
350 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:362:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
360 |     }
361 | 
362 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
363 |         DecisionResponse(
364 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:396:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
394 |     }
395 | 
396 |     private func createMultipleSuggestions() -> [DecisionResponse] {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
397 |         [
398 |             createAutonomousSuggestion(),

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:404:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
402 |     }
403 | 
404 |     private func createAutonomousSuggestion() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
405 |         DecisionResponse(
406 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:416:48: error: 'DecisionResponse' is ambiguous for type lookup in this context
414 |     }
415 | 
416 |     private func createAssistedSuggestion() -> DecisionResponse {
    |                                                `- error: 'DecisionResponse' is ambiguous for type lookup in this context
417 |         DecisionResponse(
418 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:430:48: error: 'DecisionResponse' is ambiguous for type lookup in this context
428 |     }
429 | 
430 |     private func createDeferredSuggestion() -> DecisionResponse {
    |                                                `- error: 'DecisionResponse' is ambiguous for type lookup in this context
431 |         DecisionResponse(
432 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:444:49: error: 'DecisionResponse' is ambiguous for type lookup in this context
442 |     }
443 | 
444 |     private func createUpdatedSuggestions() -> [DecisionResponse] {
    |                                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
445 |         createMultipleSuggestions().map { suggestion in
446 |             var updated = suggestion

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:482:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
480 | 
481 | class AccessibilityTestMockAgenticOrchestrator: Sendable {
482 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
483 |         DecisionResponse(
484 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:494:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
492 |     }
493 | 
494 |     func provideFeedback(for _: DecisionResponse, feedback _: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
495 |         // Mock implementation
496 |     }

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:481:7: error: non-final class 'AccessibilityTestMockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
479 | // MARK: - Mock Types for Accessibility Testing
480 | 
481 | class AccessibilityTestMockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'AccessibilityTestMockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
482 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
483 |         DecisionResponse(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:500:36: error: 'AcquisitionContext' is ambiguous for type lookup in this context
498 | 
499 | class MockComplianceGuardian: Sendable {
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
    |                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
501 |         ComplianceResult(
502 |             isCompliant: true,

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: error: invalid redeclaration of 'MockComplianceGuardian'
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- error: invalid redeclaration of 'MockComplianceGuardian'
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
    :
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
 16 |     var testContext: AcquisitionContext?
    :
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:16:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
 16 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 17 | 
 18 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:290:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
288 |     // MARK: - Helper Methods
289 | 
290 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
291 |         AcquisitionContext(
292 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:321:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
319 |     private var alternativeActions: [AlternativeAction] = []
320 | 
321 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
322 |         makeDecisionCallCount += 1
323 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:348:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
346 |     }
347 | 
348 |     func provideFeedback(for _: DecisionResponse, feedback: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
349 |         provideFeedbackCallCount += 1
350 |         lastFeedback = feedback

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:312:9: error: stored property 'makeDecisionCallCount' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
310 | 
311 | class MockAgenticOrchestrator: Sendable {
312 |     var makeDecisionCallCount = 0
    |         `- error: stored property 'makeDecisionCallCount' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
313 |     var provideFeedbackCallCount = 0
314 |     var lastFeedback: AgenticUserFeedback?

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: error: invalid redeclaration of 'MockAgenticOrchestrator'
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- error: invalid redeclaration of 'MockAgenticOrchestrator'
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:370:36: error: 'AcquisitionContext' is ambiguous for type lookup in this context
368 |     private var farReferences: [FARReference] = []
369 | 
370 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
    |                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
371 |         ComplianceResult(
372 |             isCompliant: true,

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:367:17: error: stored property 'shapExplanations' of 'Sendable'-conforming class 'MockComplianceGuardian' is mutable
365 | 
366 | class MockComplianceGuardian: Sendable {
367 |     private var shapExplanations: [String: String] = [:]
    |                 `- error: stored property 'shapExplanations' of 'Sendable'-conforming class 'MockComplianceGuardian' is mutable
368 |     private var farReferences: [FARReference] = []
369 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:388:7: error: non-final class 'MockLearningFeedbackLoop' cannot conform to 'Sendable'; use '@unchecked Sendable'
386 | }
387 | 
388 | class MockLearningFeedbackLoop: Sendable {
    |       `- error: non-final class 'MockLearningFeedbackLoop' cannot conform to 'Sendable'; use '@unchecked Sendable'
389 |     var eventRecorded = false
390 |     var lastEventType: LearningEventType?

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:389:9: error: stored property 'eventRecorded' of 'Sendable'-conforming class 'MockLearningFeedbackLoop' is mutable
387 | 
388 | class MockLearningFeedbackLoop: Sendable {
389 |     var eventRecorded = false
    |         `- error: stored property 'eventRecorded' of 'Sendable'-conforming class 'MockLearningFeedbackLoop' is mutable
390 |     var lastEventType: LearningEventType?
391 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:413:11: error: 'DecisionResponse' is ambiguous for type lookup in this context
411 | }
412 | 
413 | extension DecisionResponse {
    |           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
414 |     var complianceContext: ComplianceContext? {
415 |         get { nil } // RED PHASE: Not implemented

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:431:35: error: 'DecisionResponse' is ambiguous for type lookup in this context
429 |     }
430 | 
431 |     func processRealTimeUpdate(_: DecisionResponse) async throws {
    |                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |         // RED PHASE: Not implemented
433 |         throw IntegrationTestError.serviceUnavailable

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:386:7: error: non-final class 'AgenticSuggestionViewTestMockOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
384 | // MARK: - Mock Types
385 | 
386 | class AgenticSuggestionViewTestMockOrchestrator: AIKO.AgenticOrchestratorProtocol, Sendable {
    |       `- error: non-final class 'AgenticSuggestionViewTestMockOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
387 |     private let _suggestions: [AIKO.DecisionResponse] = []
388 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:407:7: error: non-final class 'AgenticSuggestionViewTestMockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
405 | }
406 | 
407 | class AgenticSuggestionViewTestMockComplianceGuardian: AIKO.ComplianceGuardianProtocol, Sendable {
    |       `- error: non-final class 'AgenticSuggestionViewTestMockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
408 |     func validateCompliance(for _: AIKO.AcquisitionContext) async throws -> ComplianceValidationResult {
409 |         // RED PHASE: Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var performanceMonitor: PerformanceMonitor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var performanceMonitor: PerformanceMonitor?
 16 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:15:29: error: 'PerformanceMonitor' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var performanceMonitor: PerformanceMonitor?
    |                             `- error: 'PerformanceMonitor' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown
    :
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- note: found this candidate
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1032:13: note: found this candidate
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- note: found this candidate
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:350:74: error: 'PerformanceMetrics' is ambiguous for type lookup in this context
348 |     }
349 | 
350 |     private func measureRenderingPerformance<T>(_ operation: () -> T) -> PerformanceMetrics {
    |                                                                          `- error: 'PerformanceMetrics' is ambiguous for type lookup in this context
351 |         var times: [TimeInterval] = []
352 | 
    :
493 | }
494 | 
495 | struct PerformanceMetrics {
    |        `- note: found this candidate
496 |     let average: TimeInterval
497 |     let p95: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1024:8: note: found this candidate
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- note: found this candidate
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:367:59: error: 'DecisionResponse' is ambiguous for type lookup in this context
365 |     }
366 | 
367 |     private func createLargeSuggestionSet(count: Int) -> [DecisionResponse] {
    |                                                           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |         Array(0 ..< count).map { index in
369 |             DecisionResponse(

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:386:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
384 |     }
385 | 
386 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
387 |         DecisionResponse(
388 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:436:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
434 |     }
435 | 
436 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
437 |         AcquisitionContext(
438 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:455:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
453 |     }
454 | 
455 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
456 |         DecisionResponse(
457 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:502:11: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
500 | // MARK: - Extended Mock for Performance Testing
501 | 
502 | extension MockAgenticOrchestrator {
    |           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
503 |     var simulateOfflineMode = false
504 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    :
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var testContext: AcquisitionContext?
 16 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:15:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:331:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
329 |     // MARK: - Helper Methods
330 | 
331 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
332 |         AcquisitionContext(
333 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:346:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
344 |     }
345 | 
346 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
347 |         DecisionResponse(
348 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:358:54: error: 'DecisionResponse' is ambiguous for type lookup in this context
356 |     }
357 | 
358 |     private func createHighConfidenceSuggestion() -> DecisionResponse {
    |                                                      `- error: 'DecisionResponse' is ambiguous for type lookup in this context
359 |         DecisionResponse(
360 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:370:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |     }
369 | 
370 |     private func createLowConfidenceSuggestion() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
371 |         DecisionResponse(
372 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:382:49: error: 'DecisionResponse' is ambiguous for type lookup in this context
380 |     }
381 | 
382 |     private func createLargeSuggestionSet() -> [DecisionResponse] {
    |                                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
383 |         Array(0 ..< 100).map { index in
384 |             DecisionResponse(

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:404:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
402 |     var feedbackCallCount = 0
403 | 
404 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
405 |         if shouldThrowError {
406 |             throw TestError.mockError

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:424:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
422 |     }
423 | 
424 |     func provideFeedback(for _: DecisionResponse, feedback _: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
425 |         feedbackCallCount += 1
426 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:400:9: error: stored property 'shouldThrowError' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
398 | 
399 | class MockAgenticOrchestrator: Sendable {
400 |     var shouldThrowError = false
    |         `- error: stored property 'shouldThrowError' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
401 |     var networkError = false
402 |     var feedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:433:6: error: invalid redeclaration of 'TestError'
431 | }
432 | 
433 | enum TestError: Error {
    |      `- error: invalid redeclaration of 'TestError'
434 |     case mockError
435 |     case networkError
[7/35] Compiling AIKOTests AgenticSuggestionViewTests.swift
/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:386:7: error: non-final class 'AgenticSuggestionViewTestMockOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
384 | // MARK: - Mock Types
385 | 
386 | class AgenticSuggestionViewTestMockOrchestrator: AIKO.AgenticOrchestratorProtocol, Sendable {
    |       `- error: non-final class 'AgenticSuggestionViewTestMockOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
387 |     private let _suggestions: [AIKO.DecisionResponse] = []
388 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:407:7: error: non-final class 'AgenticSuggestionViewTestMockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
405 | }
406 | 
407 | class AgenticSuggestionViewTestMockComplianceGuardian: AIKO.ComplianceGuardianProtocol, Sendable {
    |       `- error: non-final class 'AgenticSuggestionViewTestMockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
408 |     func validateCompliance(for _: AIKO.AcquisitionContext) async throws -> ComplianceValidationResult {
409 |         // RED PHASE: Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:55:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 53 |             return
 54 |         }
 55 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 56 | 
 57 |         // When: View is rendered

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:73:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 71 | 
 72 |         // When: View renders with suggestions
 73 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 74 | 
 75 |         // Then: Should display all suggestions with proper confidence indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:91:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 89 | 
 90 |         // When: View displays high confidence suggestion
 91 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 92 | 
 93 |         // Then: Should display autonomous mode indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:109:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
107 | 
108 |         // When: View displays medium confidence suggestion
109 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
110 | 
111 |         // Then: Should display assisted mode indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:127:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
125 | 
126 |         // When: View displays low confidence suggestion
127 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
128 | 
129 |         // Then: Should display deferred mode indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:142:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
140 |             return
141 |         }
142 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
143 |         let initialSuggestions = createMockDecisionResponses()
144 |         // Mock setting current suggestions - actual implementation would use load method

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:143:13: warning: initialization of immutable value 'initialSuggestions' was never used; consider replacing with assignment to '_' or removing it
141 |         }
142 |         let view = AgenticSuggestionView(viewModel: viewModel)
143 |         let initialSuggestions = createMockDecisionResponses()
    |             `- warning: initialization of immutable value 'initialSuggestions' was never used; consider replacing with assignment to '_' or removing it
144 |         // Mock setting current suggestions - actual implementation would use load method
145 |         // viewModel.currentSuggestions = initialSuggestions

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:168:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
166 | 
167 |         // When: View renders batch suggestions
168 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
169 | 
170 |         // Then: Should display all suggestions with proper grouping

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:186:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
184 | 
185 |         // When: View renders error state
186 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
187 | 
188 |         // Then: Should display graceful error message

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:199:19: error: cannot assign to property: 'isProcessing' setter is inaccessible
197 |             return
198 |         }
199 |         viewModel.isProcessing = true
    |                   `- error: cannot assign to property: 'isProcessing' setter is inaccessible
200 | 
201 |         // When: View renders loading state

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:217:13: warning: initialization of immutable value 'suggestions' was never used; consider replacing with assignment to '_' or removing it
215 |             return
216 |         }
217 |         let suggestions = createMockDecisionResponses()
    |             `- warning: initialization of immutable value 'suggestions' was never used; consider replacing with assignment to '_' or removing it
218 |         // Mock setting current suggestions - actual implementation would use load method
219 |         // viewModel.currentSuggestions = suggestions

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:220:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
218 |         // Mock setting current suggestions - actual implementation would use load method
219 |         // viewModel.currentSuggestions = suggestions
220 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
221 | 
222 |         // When: VoiceOver accesses the view

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:233:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
231 |             return
232 |         }
233 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
234 | 
235 |         // When: Keyboard navigation is used

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:248:13: warning: initialization of immutable value 'largeSuggestionSet' was never used; consider replacing with assignment to '_' or removing it
246 |             return
247 |         }
248 |         let largeSuggestionSet = createLargeSuggestionSet()
    |             `- warning: initialization of immutable value 'largeSuggestionSet' was never used; consider replacing with assignment to '_' or removing it
249 |         // Mock setting current suggestions - actual implementation would use load method
250 |         // viewModel.currentSuggestions = largeSuggestionSet

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:254:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
252 |         // When: View renders with performance measurement
253 |         let startTime = Date()
254 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
255 |         let renderTime = Date().timeIntervalSince(startTime)
256 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:25:21: error: type 'ConfidenceTrend' has no member 'increasing'
 23 |             factorCount: 15,
 24 |             reasoning: "High confidence based on extensive analysis",
 25 |             trend: .increasing
    |                     `- error: type 'ConfidenceTrend' has no member 'increasing'
 26 |         )
 27 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:39:21: error: type 'ConfidenceTrend' has no member 'decreasing'
 37 |             factorCount: 6,
 38 |             reasoning: "Low confidence, requires user input",
 39 |             trend: .decreasing
    |                     `- error: type 'ConfidenceTrend' has no member 'decreasing'
 40 |         )
 41 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:54:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
 52 |     func testConfidenceIndicator_HighConfidence_ShowsGreenColorScheme() throws {
 53 |         // Given: High confidence visualization (≥80%)
 54 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 55 | 
 56 |         // When: Indicator renders high confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:57:55: error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 55 | 
 56 |         // When: Indicator renders high confidence
 57 |         let colorScheme = highConfidenceVisualization.colorScheme
    |                                                       `- error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 58 | 
 59 |         // Then: Should use green color scheme

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:60:38: error: type 'Equatable' has no member 'highConfidence'
 58 | 
 59 |         // Then: Should use green color scheme
 60 |         XCTAssertEqual(colorScheme, .highConfidence, "High confidence should use green color scheme")
    |                                      `- error: type 'Equatable' has no member 'highConfidence'
 61 |         XCTFail("RED PHASE: High confidence color scheme not implemented")
 62 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:66:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
 64 |     func testConfidenceIndicator_MediumConfidence_ShowsOrangeColorScheme() throws {
 65 |         // Given: Medium confidence visualization (60-79%)
 66 |         let indicator = ConfidenceIndicator(visualization: mediumConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 67 | 
 68 |         // When: Indicator renders medium confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:69:57: error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 67 | 
 68 |         // When: Indicator renders medium confidence
 69 |         let colorScheme = mediumConfidenceVisualization.colorScheme
    |                                                         `- error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 70 | 
 71 |         // Then: Should use orange color scheme

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:72:38: error: type 'Equatable' has no member 'mediumConfidence'
 70 | 
 71 |         // Then: Should use orange color scheme
 72 |         XCTAssertEqual(colorScheme, .mediumConfidence, "Medium confidence should use orange color scheme")
    |                                      `- error: type 'Equatable' has no member 'mediumConfidence'
 73 |         XCTFail("RED PHASE: Medium confidence color scheme not implemented")
 74 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:78:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
 76 |     func testConfidenceIndicator_LowConfidence_ShowsRedColorScheme() throws {
 77 |         // Given: Low confidence visualization (<60%)
 78 |         let indicator = ConfidenceIndicator(visualization: lowConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 79 | 
 80 |         // When: Indicator renders low confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:81:54: error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 79 | 
 80 |         // When: Indicator renders low confidence
 81 |         let colorScheme = lowConfidenceVisualization.colorScheme
    |                                                      `- error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 82 | 
 83 |         // Then: Should use red color scheme

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:84:38: error: type 'Equatable' has no member 'lowConfidence'
 82 | 
 83 |         // Then: Should use red color scheme
 84 |         XCTAssertEqual(colorScheme, .lowConfidence, "Low confidence should use red color scheme")
    |                                      `- error: type 'Equatable' has no member 'lowConfidence'
 85 |         XCTFail("RED PHASE: Low confidence color scheme not implemented")
 86 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:101:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
 99 | 
100 |         // When: Progress bar displays confidence
101 |         let indicator = ConfidenceIndicator(visualization: visualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
102 | 
103 |         // Then: Should show 84.7% (single decimal precision)

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:104:13: warning: initialization of immutable value 'expectedPercentage' was never used; consider replacing with assignment to '_' or removing it
102 | 
103 |         // Then: Should show 84.7% (single decimal precision)
104 |         let expectedPercentage = "84.7%"
    |             `- warning: initialization of immutable value 'expectedPercentage' was never used; consider replacing with assignment to '_' or removing it
105 |         XCTFail("RED PHASE: Progress bar percentage display not implemented")
106 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:110:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
108 |     func testConfidenceIndicator_ProgressBar_AnimatesCorrectly() throws {
109 |         // Given: Confidence indicator with animation enabled
110 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
111 | 
112 |         // When: Animation is triggered

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:121:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
119 |     func testConfidenceIndicator_FactorCount_DisplaysCorrectText() throws {
120 |         // Given: Visualization with 15 factors
121 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
122 | 
123 |         // When: Factor count is displayed

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:126:24: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to refer to member 'factorCount' of wrapped base type 'ConfidenceVisualization'
124 |         // Then: Should show "Based on 15 factors"
125 |         let expectedFactorText = "Based on 15 factors"
126 |         XCTAssertEqual(highConfidenceVisualization.factorCount, 15)
    |                        |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to refer to member 'factorCount' of wrapped base type 'ConfidenceVisualization'
    |                        |- note: chain the optional using '?' to access member 'factorCount' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
127 |         XCTFail("RED PHASE: Factor count display not implemented")
128 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:140:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
138 | 
139 |         // When: Single factor is displayed
140 |         let indicator = ConfidenceIndicator(visualization: singleFactorVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
141 | 
142 |         // Then: Should show "Based on 1 factor" (singular)

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:143:13: warning: initialization of immutable value 'expectedText' was never used; consider replacing with assignment to '_' or removing it
141 | 
142 |         // Then: Should show "Based on 1 factor" (singular)
143 |         let expectedText = "Based on 1 factor"
    |             `- warning: initialization of immutable value 'expectedText' was never used; consider replacing with assignment to '_' or removing it
144 |         XCTFail("RED PHASE: Singular factor count display not implemented")
145 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:164:21: error: type 'ConfidenceTrend' has no member 'increasing'
162 |             factorCount: 18,
163 |             reasoning: "Updated confidence",
164 |             trend: .increasing
    |                     `- error: type 'ConfidenceTrend' has no member 'increasing'
165 |         )
166 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:173:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
171 |     func testConfidenceIndicator_ConfidenceUpdate_MaintainsAccessibility() throws {
172 |         // Given: Confidence indicator with accessibility labels
173 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
174 | 
175 |         // When: Confidence updates

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:188:21: error: type 'ConfidenceTrend' has no member 'increasing'
186 |             factorCount: 14,
187 |             reasoning: "Confidence increasing",
188 |             trend: .increasing
    |                     `- error: type 'ConfidenceTrend' has no member 'increasing'
189 |         )
190 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:195:56: error: type 'Equatable' has no member 'increasing'
193 | 
194 |         // Then: Should show upward trend arrow
195 |         XCTAssertEqual(increasingVisualization.trend, .increasing)
    |                                                        `- error: type 'Equatable' has no member 'increasing'
196 |         XCTFail("RED PHASE: Increasing trend indicator not implemented")
197 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:205:21: error: type 'ConfidenceTrend' has no member 'decreasing'
203 |             factorCount: 8,
204 |             reasoning: "Confidence decreasing",
205 |             trend: .decreasing
    |                     `- error: type 'ConfidenceTrend' has no member 'decreasing'
206 |         )
207 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:212:56: error: type 'Equatable' has no member 'decreasing'
210 | 
211 |         // Then: Should show downward trend arrow
212 |         XCTAssertEqual(decreasingVisualization.trend, .decreasing)
    |                                                        `- error: type 'Equatable' has no member 'decreasing'
213 |         XCTFail("RED PHASE: Decreasing trend indicator not implemented")
214 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:220:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
218 |     func testConfidenceIndicator_VoiceOverSupport_ProvidesDetailedDescription() throws {
219 |         // Given: Confidence indicator with high confidence
220 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
221 | 
222 |         // When: VoiceOver accesses the indicator

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:230:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
228 |     func testConfidenceIndicator_ColorBlindSupport_UsesIconsAndPatterns() throws {
229 |         // Given: Confidence indicator for color-blind users
230 |         let indicator = ConfidenceIndicator(visualization: mediumConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
231 | 
232 |         // When: Color-blind mode is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:241:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
239 |     func testConfidenceIndicator_RapidUpdates_MaintainsPerformance() throws {
240 |         // Given: Confidence indicator with rapid updates
241 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
242 | 
243 |         // When: Multiple rapid confidence updates occur

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:269:20: error: 'nil' is not compatible with expected argument type 'ConfidenceTrend'
267 |             factorCount: 0,
268 |             reasoning: "No confidence available",
269 |             trend: nil
    |                    `- error: 'nil' is not compatible with expected argument type 'ConfidenceTrend'
270 |         )
271 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:290:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
288 | 
289 |         // When: Perfect confidence is displayed
290 |         let indicator = ConfidenceIndicator(visualization: perfectConfidenceVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
291 | 
292 |         // Then: Should display 100% correctly

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:307:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
305 | 
306 |         // When: Invalid confidence is processed
307 |         let indicator = ConfidenceIndicator(visualization: invalidConfidenceVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
308 | 
309 |         // Then: Should clamp to valid range (0.0-1.0)

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var performanceMonitor: PerformanceMonitor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var performanceMonitor: PerformanceMonitor?
 16 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:15:29: error: 'PerformanceMonitor' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var performanceMonitor: PerformanceMonitor?
    |                             `- error: 'PerformanceMonitor' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown
    :
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- note: found this candidate
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1032:13: note: found this candidate
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- note: found this candidate
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:350:74: error: 'PerformanceMetrics' is ambiguous for type lookup in this context
348 |     }
349 | 
350 |     private func measureRenderingPerformance<T>(_ operation: () -> T) -> PerformanceMetrics {
    |                                                                          `- error: 'PerformanceMetrics' is ambiguous for type lookup in this context
351 |         var times: [TimeInterval] = []
352 | 
    :
493 | }
494 | 
495 | struct PerformanceMetrics {
    |        `- note: found this candidate
496 |     let average: TimeInterval
497 |     let p95: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1024:8: note: found this candidate
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- note: found this candidate
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:367:59: error: 'DecisionResponse' is ambiguous for type lookup in this context
365 |     }
366 | 
367 |     private func createLargeSuggestionSet(count: Int) -> [DecisionResponse] {
    |                                                           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |         Array(0 ..< count).map { index in
369 |             DecisionResponse(

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:386:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
384 |     }
385 | 
386 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
387 |         DecisionResponse(
388 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:436:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
434 |     }
435 | 
436 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
437 |         AcquisitionContext(
438 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:455:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
453 |     }
454 | 
455 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
456 |         DecisionResponse(
457 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:470:7: error: invalid redeclaration of 'PerformanceMonitor'
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- error: invalid redeclaration of 'PerformanceMonitor'
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:495:8: error: invalid redeclaration of 'PerformanceMetrics'
493 | }
494 | 
495 | struct PerformanceMetrics {
    |        `- error: invalid redeclaration of 'PerformanceMetrics'
496 |     let average: TimeInterval
497 |     let p95: TimeInterval

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:502:11: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
500 | // MARK: - Extended Mock for Performance Testing
501 | 
502 | extension MockAgenticOrchestrator {
    |           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
503 |     var simulateOfflineMode = false
504 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:49:57: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
 47 |         // When: Measuring rendering performance
 48 |         let renderingTime = measureRenderingPerformance {
 49 |             let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                         |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 50 |             return view
 51 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:155:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
153 |         // When: Processing suggestions with CPU monitoring
154 |         let testContext = createTestAcquisitionContext()
155 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
156 | 
157 |         let cpuAfter = performanceMonitor.currentCPUUsage()

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:200:23: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
198 |         // When: Measuring feedback submission time
199 |         let submissionTime = await measureAsyncTime {
200 |             try await viewModel.submitFeedback(feedback, for: suggestion)
    |                       |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
    |                       |- note: chain the optional using '?' to access member 'submitFeedback' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
201 |         }
202 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:214:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
212 |         // When: Operating in offline mode
213 |         let offlineTime = await measureAsyncTime {
214 |             try? await viewModel.loadSuggestions(for: createTestAcquisitionContext())
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
215 |         }
216 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:262:13: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
260 |         let suggestions = createLargeSuggestionSet(count: 500)
261 |         let processingTime = measureTime {
262 |             viewModel.currentSuggestions = suggestions
    |             |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |             |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
263 |         }
264 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:266:25: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
264 | 
265 |         // Then: Should degrade gracefully under memory pressure
266 |         XCTAssertNotNil(viewModel.currentSuggestions, "Should maintain functionality under memory pressure")
    |                         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                         `- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
267 |         XCTFail("RED PHASE: Memory pressure handling not implemented")
268 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:282:17: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
280 | 
281 |             let renderingTime = measureTime {
282 |                 viewModel.currentSuggestions = suggestions
    |                 |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                 |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
283 |                 let view = AgenticSuggestionView(viewModel: viewModel)
284 |                 return view

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:319:28: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
317 |             for operation in 0 ..< operationsPerHour {
318 |                 let context = createTestAcquisitionContext()
319 |                 try? await viewModel.loadSuggestions(for: context)
    |                            |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                            |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
320 | 
321 |                 // Simulate time passage (compressed)

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:346:9: warning: result of 'try?' is unused
344 |     private func measureAsyncTime<T>(_ operation: () async throws -> T) async -> TimeInterval {
345 |         let startTime = Date()
346 |         try? await operation()
    |         `- warning: result of 'try?' is unused
347 |         return Date().timeIntervalSince(startTime)
348 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:346:20: error: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'
342 |     }
343 | 
344 |     private func measureAsyncTime<T>(_ operation: () async throws -> T) async -> TimeInterval {
    |                                   `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol
345 |         let startTime = Date()
346 |         try? await operation()
    |                    `- error: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'
347 |         return Date().timeIntervalSince(startTime)
348 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:412:17: error: cannot convert value of type 'FARReference' to closure result type 'AgenticFARReference'
410 |         ComplianceContext(
411 |             farReferences: Array(0 ..< 10).map { index in
412 |                 FARReference(
    |                 `- error: cannot convert value of type 'FARReference' to closure result type 'AgenticFARReference'
413 |                     section: "52.212-\(index + 1)",
414 |                     title: "Complex Regulation \(index + 1)",

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:412:29: error: extra arguments at positions #2, #3 in call
410 |         ComplianceContext(
411 |             farReferences: Array(0 ..< 10).map { index in
412 |                 FARReference(
    |                             `- error: extra arguments at positions #2, #3 in call
413 |                     section: "52.212-\(index + 1)",
414 |                     title: "Complex Regulation \(index + 1)",

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:412:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
410 |         ComplianceContext(
411 |             farReferences: Array(0 ..< 10).map { index in
412 |                 FARReference(
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
413 |                     section: "52.212-\(index + 1)",
414 |                     title: "Complex Regulation \(index + 1)",

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:419:17: error: cannot convert value of type 'DFARSReference' to closure result type 'AgenticDFARSReference'
417 |             },
418 |             dfarsReferences: Array(0 ..< 5).map { index in
419 |                 DFARSReference(
    |                 `- error: cannot convert value of type 'DFARSReference' to closure result type 'AgenticDFARSReference'
420 |                     section: "252.212-700\(index + 1)",
421 |                     title: "DFARS Requirement \(index + 1)",

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:419:31: error: extra arguments at positions #2, #3 in call
417 |             },
418 |             dfarsReferences: Array(0 ..< 5).map { index in
419 |                 DFARSReference(
    |                               `- error: extra arguments at positions #2, #3 in call
420 |                     section: "252.212-700\(index + 1)",
421 |                     title: "DFARS Requirement \(index + 1)",

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:419:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
417 |             },
418 |             dfarsReferences: Array(0 ..< 5).map { index in
419 |                 DFARSReference(
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
420 |                     section: "252.212-700\(index + 1)",
421 |                     title: "DFARS Requirement \(index + 1)",

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:505:76: error: 'DecisionResponse' is ambiguous for type lookup in this context
503 |     var simulateOfflineMode = false
504 | 
505 |     override func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                            `- error: 'DecisionResponse' is ambiguous for type lookup in this context
506 |         if simulateOfflineMode {
507 |             // Simulate offline processing delay

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double
[8/35] Compiling AIKOTests ConfidenceIndicatorTests.swift
/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:386:7: error: non-final class 'AgenticSuggestionViewTestMockOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
384 | // MARK: - Mock Types
385 | 
386 | class AgenticSuggestionViewTestMockOrchestrator: AIKO.AgenticOrchestratorProtocol, Sendable {
    |       `- error: non-final class 'AgenticSuggestionViewTestMockOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
387 |     private let _suggestions: [AIKO.DecisionResponse] = []
388 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:407:7: error: non-final class 'AgenticSuggestionViewTestMockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
405 | }
406 | 
407 | class AgenticSuggestionViewTestMockComplianceGuardian: AIKO.ComplianceGuardianProtocol, Sendable {
    |       `- error: non-final class 'AgenticSuggestionViewTestMockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
408 |     func validateCompliance(for _: AIKO.AcquisitionContext) async throws -> ComplianceValidationResult {
409 |         // RED PHASE: Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:55:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 53 |             return
 54 |         }
 55 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 56 | 
 57 |         // When: View is rendered

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:73:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 71 | 
 72 |         // When: View renders with suggestions
 73 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 74 | 
 75 |         // Then: Should display all suggestions with proper confidence indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:91:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 89 | 
 90 |         // When: View displays high confidence suggestion
 91 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 92 | 
 93 |         // Then: Should display autonomous mode indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:109:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
107 | 
108 |         // When: View displays medium confidence suggestion
109 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
110 | 
111 |         // Then: Should display assisted mode indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:127:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
125 | 
126 |         // When: View displays low confidence suggestion
127 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
128 | 
129 |         // Then: Should display deferred mode indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:142:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
140 |             return
141 |         }
142 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
143 |         let initialSuggestions = createMockDecisionResponses()
144 |         // Mock setting current suggestions - actual implementation would use load method

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:143:13: warning: initialization of immutable value 'initialSuggestions' was never used; consider replacing with assignment to '_' or removing it
141 |         }
142 |         let view = AgenticSuggestionView(viewModel: viewModel)
143 |         let initialSuggestions = createMockDecisionResponses()
    |             `- warning: initialization of immutable value 'initialSuggestions' was never used; consider replacing with assignment to '_' or removing it
144 |         // Mock setting current suggestions - actual implementation would use load method
145 |         // viewModel.currentSuggestions = initialSuggestions

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:168:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
166 | 
167 |         // When: View renders batch suggestions
168 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
169 | 
170 |         // Then: Should display all suggestions with proper grouping

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:186:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
184 | 
185 |         // When: View renders error state
186 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
187 | 
188 |         // Then: Should display graceful error message

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:199:19: error: cannot assign to property: 'isProcessing' setter is inaccessible
197 |             return
198 |         }
199 |         viewModel.isProcessing = true
    |                   `- error: cannot assign to property: 'isProcessing' setter is inaccessible
200 | 
201 |         // When: View renders loading state

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:217:13: warning: initialization of immutable value 'suggestions' was never used; consider replacing with assignment to '_' or removing it
215 |             return
216 |         }
217 |         let suggestions = createMockDecisionResponses()
    |             `- warning: initialization of immutable value 'suggestions' was never used; consider replacing with assignment to '_' or removing it
218 |         // Mock setting current suggestions - actual implementation would use load method
219 |         // viewModel.currentSuggestions = suggestions

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:220:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
218 |         // Mock setting current suggestions - actual implementation would use load method
219 |         // viewModel.currentSuggestions = suggestions
220 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
221 | 
222 |         // When: VoiceOver accesses the view

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:233:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
231 |             return
232 |         }
233 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
234 | 
235 |         // When: Keyboard navigation is used

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:248:13: warning: initialization of immutable value 'largeSuggestionSet' was never used; consider replacing with assignment to '_' or removing it
246 |             return
247 |         }
248 |         let largeSuggestionSet = createLargeSuggestionSet()
    |             `- warning: initialization of immutable value 'largeSuggestionSet' was never used; consider replacing with assignment to '_' or removing it
249 |         // Mock setting current suggestions - actual implementation would use load method
250 |         // viewModel.currentSuggestions = largeSuggestionSet

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:254:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
252 |         // When: View renders with performance measurement
253 |         let startTime = Date()
254 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
255 |         let renderTime = Date().timeIntervalSince(startTime)
256 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:25:21: error: type 'ConfidenceTrend' has no member 'increasing'
 23 |             factorCount: 15,
 24 |             reasoning: "High confidence based on extensive analysis",
 25 |             trend: .increasing
    |                     `- error: type 'ConfidenceTrend' has no member 'increasing'
 26 |         )
 27 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:39:21: error: type 'ConfidenceTrend' has no member 'decreasing'
 37 |             factorCount: 6,
 38 |             reasoning: "Low confidence, requires user input",
 39 |             trend: .decreasing
    |                     `- error: type 'ConfidenceTrend' has no member 'decreasing'
 40 |         )
 41 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:54:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
 52 |     func testConfidenceIndicator_HighConfidence_ShowsGreenColorScheme() throws {
 53 |         // Given: High confidence visualization (≥80%)
 54 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 55 | 
 56 |         // When: Indicator renders high confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:57:55: error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 55 | 
 56 |         // When: Indicator renders high confidence
 57 |         let colorScheme = highConfidenceVisualization.colorScheme
    |                                                       `- error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 58 | 
 59 |         // Then: Should use green color scheme

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:60:38: error: type 'Equatable' has no member 'highConfidence'
 58 | 
 59 |         // Then: Should use green color scheme
 60 |         XCTAssertEqual(colorScheme, .highConfidence, "High confidence should use green color scheme")
    |                                      `- error: type 'Equatable' has no member 'highConfidence'
 61 |         XCTFail("RED PHASE: High confidence color scheme not implemented")
 62 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:66:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
 64 |     func testConfidenceIndicator_MediumConfidence_ShowsOrangeColorScheme() throws {
 65 |         // Given: Medium confidence visualization (60-79%)
 66 |         let indicator = ConfidenceIndicator(visualization: mediumConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 67 | 
 68 |         // When: Indicator renders medium confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:69:57: error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 67 | 
 68 |         // When: Indicator renders medium confidence
 69 |         let colorScheme = mediumConfidenceVisualization.colorScheme
    |                                                         `- error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 70 | 
 71 |         // Then: Should use orange color scheme

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:72:38: error: type 'Equatable' has no member 'mediumConfidence'
 70 | 
 71 |         // Then: Should use orange color scheme
 72 |         XCTAssertEqual(colorScheme, .mediumConfidence, "Medium confidence should use orange color scheme")
    |                                      `- error: type 'Equatable' has no member 'mediumConfidence'
 73 |         XCTFail("RED PHASE: Medium confidence color scheme not implemented")
 74 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:78:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
 76 |     func testConfidenceIndicator_LowConfidence_ShowsRedColorScheme() throws {
 77 |         // Given: Low confidence visualization (<60%)
 78 |         let indicator = ConfidenceIndicator(visualization: lowConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 79 | 
 80 |         // When: Indicator renders low confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:81:54: error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 79 | 
 80 |         // When: Indicator renders low confidence
 81 |         let colorScheme = lowConfidenceVisualization.colorScheme
    |                                                      `- error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 82 | 
 83 |         // Then: Should use red color scheme

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:84:38: error: type 'Equatable' has no member 'lowConfidence'
 82 | 
 83 |         // Then: Should use red color scheme
 84 |         XCTAssertEqual(colorScheme, .lowConfidence, "Low confidence should use red color scheme")
    |                                      `- error: type 'Equatable' has no member 'lowConfidence'
 85 |         XCTFail("RED PHASE: Low confidence color scheme not implemented")
 86 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:101:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
 99 | 
100 |         // When: Progress bar displays confidence
101 |         let indicator = ConfidenceIndicator(visualization: visualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
102 | 
103 |         // Then: Should show 84.7% (single decimal precision)

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:104:13: warning: initialization of immutable value 'expectedPercentage' was never used; consider replacing with assignment to '_' or removing it
102 | 
103 |         // Then: Should show 84.7% (single decimal precision)
104 |         let expectedPercentage = "84.7%"
    |             `- warning: initialization of immutable value 'expectedPercentage' was never used; consider replacing with assignment to '_' or removing it
105 |         XCTFail("RED PHASE: Progress bar percentage display not implemented")
106 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:110:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
108 |     func testConfidenceIndicator_ProgressBar_AnimatesCorrectly() throws {
109 |         // Given: Confidence indicator with animation enabled
110 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
111 | 
112 |         // When: Animation is triggered

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:121:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
119 |     func testConfidenceIndicator_FactorCount_DisplaysCorrectText() throws {
120 |         // Given: Visualization with 15 factors
121 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
122 | 
123 |         // When: Factor count is displayed

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:126:24: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to refer to member 'factorCount' of wrapped base type 'ConfidenceVisualization'
124 |         // Then: Should show "Based on 15 factors"
125 |         let expectedFactorText = "Based on 15 factors"
126 |         XCTAssertEqual(highConfidenceVisualization.factorCount, 15)
    |                        |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to refer to member 'factorCount' of wrapped base type 'ConfidenceVisualization'
    |                        |- note: chain the optional using '?' to access member 'factorCount' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
127 |         XCTFail("RED PHASE: Factor count display not implemented")
128 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:140:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
138 | 
139 |         // When: Single factor is displayed
140 |         let indicator = ConfidenceIndicator(visualization: singleFactorVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
141 | 
142 |         // Then: Should show "Based on 1 factor" (singular)

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:143:13: warning: initialization of immutable value 'expectedText' was never used; consider replacing with assignment to '_' or removing it
141 | 
142 |         // Then: Should show "Based on 1 factor" (singular)
143 |         let expectedText = "Based on 1 factor"
    |             `- warning: initialization of immutable value 'expectedText' was never used; consider replacing with assignment to '_' or removing it
144 |         XCTFail("RED PHASE: Singular factor count display not implemented")
145 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:164:21: error: type 'ConfidenceTrend' has no member 'increasing'
162 |             factorCount: 18,
163 |             reasoning: "Updated confidence",
164 |             trend: .increasing
    |                     `- error: type 'ConfidenceTrend' has no member 'increasing'
165 |         )
166 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:173:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
171 |     func testConfidenceIndicator_ConfidenceUpdate_MaintainsAccessibility() throws {
172 |         // Given: Confidence indicator with accessibility labels
173 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
174 | 
175 |         // When: Confidence updates

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:188:21: error: type 'ConfidenceTrend' has no member 'increasing'
186 |             factorCount: 14,
187 |             reasoning: "Confidence increasing",
188 |             trend: .increasing
    |                     `- error: type 'ConfidenceTrend' has no member 'increasing'
189 |         )
190 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:195:56: error: type 'Equatable' has no member 'increasing'
193 | 
194 |         // Then: Should show upward trend arrow
195 |         XCTAssertEqual(increasingVisualization.trend, .increasing)
    |                                                        `- error: type 'Equatable' has no member 'increasing'
196 |         XCTFail("RED PHASE: Increasing trend indicator not implemented")
197 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:205:21: error: type 'ConfidenceTrend' has no member 'decreasing'
203 |             factorCount: 8,
204 |             reasoning: "Confidence decreasing",
205 |             trend: .decreasing
    |                     `- error: type 'ConfidenceTrend' has no member 'decreasing'
206 |         )
207 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:212:56: error: type 'Equatable' has no member 'decreasing'
210 | 
211 |         // Then: Should show downward trend arrow
212 |         XCTAssertEqual(decreasingVisualization.trend, .decreasing)
    |                                                        `- error: type 'Equatable' has no member 'decreasing'
213 |         XCTFail("RED PHASE: Decreasing trend indicator not implemented")
214 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:220:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
218 |     func testConfidenceIndicator_VoiceOverSupport_ProvidesDetailedDescription() throws {
219 |         // Given: Confidence indicator with high confidence
220 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
221 | 
222 |         // When: VoiceOver accesses the indicator

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:230:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
228 |     func testConfidenceIndicator_ColorBlindSupport_UsesIconsAndPatterns() throws {
229 |         // Given: Confidence indicator for color-blind users
230 |         let indicator = ConfidenceIndicator(visualization: mediumConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
231 | 
232 |         // When: Color-blind mode is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:241:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
239 |     func testConfidenceIndicator_RapidUpdates_MaintainsPerformance() throws {
240 |         // Given: Confidence indicator with rapid updates
241 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
242 | 
243 |         // When: Multiple rapid confidence updates occur

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:269:20: error: 'nil' is not compatible with expected argument type 'ConfidenceTrend'
267 |             factorCount: 0,
268 |             reasoning: "No confidence available",
269 |             trend: nil
    |                    `- error: 'nil' is not compatible with expected argument type 'ConfidenceTrend'
270 |         )
271 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:290:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
288 | 
289 |         // When: Perfect confidence is displayed
290 |         let indicator = ConfidenceIndicator(visualization: perfectConfidenceVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
291 | 
292 |         // Then: Should display 100% correctly

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:307:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
305 | 
306 |         // When: Invalid confidence is processed
307 |         let indicator = ConfidenceIndicator(visualization: invalidConfidenceVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
308 | 
309 |         // Then: Should clamp to valid range (0.0-1.0)

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var performanceMonitor: PerformanceMonitor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var performanceMonitor: PerformanceMonitor?
 16 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:15:29: error: 'PerformanceMonitor' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var performanceMonitor: PerformanceMonitor?
    |                             `- error: 'PerformanceMonitor' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown
    :
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- note: found this candidate
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1032:13: note: found this candidate
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- note: found this candidate
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:350:74: error: 'PerformanceMetrics' is ambiguous for type lookup in this context
348 |     }
349 | 
350 |     private func measureRenderingPerformance<T>(_ operation: () -> T) -> PerformanceMetrics {
    |                                                                          `- error: 'PerformanceMetrics' is ambiguous for type lookup in this context
351 |         var times: [TimeInterval] = []
352 | 
    :
493 | }
494 | 
495 | struct PerformanceMetrics {
    |        `- note: found this candidate
496 |     let average: TimeInterval
497 |     let p95: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1024:8: note: found this candidate
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- note: found this candidate
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:367:59: error: 'DecisionResponse' is ambiguous for type lookup in this context
365 |     }
366 | 
367 |     private func createLargeSuggestionSet(count: Int) -> [DecisionResponse] {
    |                                                           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |         Array(0 ..< count).map { index in
369 |             DecisionResponse(

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:386:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
384 |     }
385 | 
386 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
387 |         DecisionResponse(
388 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:436:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
434 |     }
435 | 
436 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
437 |         AcquisitionContext(
438 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:455:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
453 |     }
454 | 
455 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
456 |         DecisionResponse(
457 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:470:7: error: invalid redeclaration of 'PerformanceMonitor'
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- error: invalid redeclaration of 'PerformanceMonitor'
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:495:8: error: invalid redeclaration of 'PerformanceMetrics'
493 | }
494 | 
495 | struct PerformanceMetrics {
    |        `- error: invalid redeclaration of 'PerformanceMetrics'
496 |     let average: TimeInterval
497 |     let p95: TimeInterval

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:502:11: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
500 | // MARK: - Extended Mock for Performance Testing
501 | 
502 | extension MockAgenticOrchestrator {
    |           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
503 |     var simulateOfflineMode = false
504 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:49:57: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
 47 |         // When: Measuring rendering performance
 48 |         let renderingTime = measureRenderingPerformance {
 49 |             let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                         |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 50 |             return view
 51 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:155:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
153 |         // When: Processing suggestions with CPU monitoring
154 |         let testContext = createTestAcquisitionContext()
155 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
156 | 
157 |         let cpuAfter = performanceMonitor.currentCPUUsage()

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:200:23: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
198 |         // When: Measuring feedback submission time
199 |         let submissionTime = await measureAsyncTime {
200 |             try await viewModel.submitFeedback(feedback, for: suggestion)
    |                       |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
    |                       |- note: chain the optional using '?' to access member 'submitFeedback' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
201 |         }
202 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:214:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
212 |         // When: Operating in offline mode
213 |         let offlineTime = await measureAsyncTime {
214 |             try? await viewModel.loadSuggestions(for: createTestAcquisitionContext())
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
215 |         }
216 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:262:13: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
260 |         let suggestions = createLargeSuggestionSet(count: 500)
261 |         let processingTime = measureTime {
262 |             viewModel.currentSuggestions = suggestions
    |             |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |             |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
263 |         }
264 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:266:25: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
264 | 
265 |         // Then: Should degrade gracefully under memory pressure
266 |         XCTAssertNotNil(viewModel.currentSuggestions, "Should maintain functionality under memory pressure")
    |                         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                         `- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
267 |         XCTFail("RED PHASE: Memory pressure handling not implemented")
268 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:282:17: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
280 | 
281 |             let renderingTime = measureTime {
282 |                 viewModel.currentSuggestions = suggestions
    |                 |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                 |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
283 |                 let view = AgenticSuggestionView(viewModel: viewModel)
284 |                 return view

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:319:28: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
317 |             for operation in 0 ..< operationsPerHour {
318 |                 let context = createTestAcquisitionContext()
319 |                 try? await viewModel.loadSuggestions(for: context)
    |                            |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                            |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
320 | 
321 |                 // Simulate time passage (compressed)

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:346:9: warning: result of 'try?' is unused
344 |     private func measureAsyncTime<T>(_ operation: () async throws -> T) async -> TimeInterval {
345 |         let startTime = Date()
346 |         try? await operation()
    |         `- warning: result of 'try?' is unused
347 |         return Date().timeIntervalSince(startTime)
348 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:346:20: error: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'
342 |     }
343 | 
344 |     private func measureAsyncTime<T>(_ operation: () async throws -> T) async -> TimeInterval {
    |                                   `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol
345 |         let startTime = Date()
346 |         try? await operation()
    |                    `- error: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'
347 |         return Date().timeIntervalSince(startTime)
348 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:412:17: error: cannot convert value of type 'FARReference' to closure result type 'AgenticFARReference'
410 |         ComplianceContext(
411 |             farReferences: Array(0 ..< 10).map { index in
412 |                 FARReference(
    |                 `- error: cannot convert value of type 'FARReference' to closure result type 'AgenticFARReference'
413 |                     section: "52.212-\(index + 1)",
414 |                     title: "Complex Regulation \(index + 1)",

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:412:29: error: extra arguments at positions #2, #3 in call
410 |         ComplianceContext(
411 |             farReferences: Array(0 ..< 10).map { index in
412 |                 FARReference(
    |                             `- error: extra arguments at positions #2, #3 in call
413 |                     section: "52.212-\(index + 1)",
414 |                     title: "Complex Regulation \(index + 1)",

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:412:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
410 |         ComplianceContext(
411 |             farReferences: Array(0 ..< 10).map { index in
412 |                 FARReference(
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
413 |                     section: "52.212-\(index + 1)",
414 |                     title: "Complex Regulation \(index + 1)",

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:419:17: error: cannot convert value of type 'DFARSReference' to closure result type 'AgenticDFARSReference'
417 |             },
418 |             dfarsReferences: Array(0 ..< 5).map { index in
419 |                 DFARSReference(
    |                 `- error: cannot convert value of type 'DFARSReference' to closure result type 'AgenticDFARSReference'
420 |                     section: "252.212-700\(index + 1)",
421 |                     title: "DFARS Requirement \(index + 1)",

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:419:31: error: extra arguments at positions #2, #3 in call
417 |             },
418 |             dfarsReferences: Array(0 ..< 5).map { index in
419 |                 DFARSReference(
    |                               `- error: extra arguments at positions #2, #3 in call
420 |                     section: "252.212-700\(index + 1)",
421 |                     title: "DFARS Requirement \(index + 1)",

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:419:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
417 |             },
418 |             dfarsReferences: Array(0 ..< 5).map { index in
419 |                 DFARSReference(
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
420 |                     section: "252.212-700\(index + 1)",
421 |                     title: "DFARS Requirement \(index + 1)",

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:505:76: error: 'DecisionResponse' is ambiguous for type lookup in this context
503 |     var simulateOfflineMode = false
504 | 
505 |     override func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                            `- error: 'DecisionResponse' is ambiguous for type lookup in this context
506 |         if simulateOfflineMode {
507 |             // Simulate offline processing delay

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double
[9/35] Compiling AIKOTests PerformanceTests.swift
/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:386:7: error: non-final class 'AgenticSuggestionViewTestMockOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
384 | // MARK: - Mock Types
385 | 
386 | class AgenticSuggestionViewTestMockOrchestrator: AIKO.AgenticOrchestratorProtocol, Sendable {
    |       `- error: non-final class 'AgenticSuggestionViewTestMockOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
387 |     private let _suggestions: [AIKO.DecisionResponse] = []
388 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:407:7: error: non-final class 'AgenticSuggestionViewTestMockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
405 | }
406 | 
407 | class AgenticSuggestionViewTestMockComplianceGuardian: AIKO.ComplianceGuardianProtocol, Sendable {
    |       `- error: non-final class 'AgenticSuggestionViewTestMockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
408 |     func validateCompliance(for _: AIKO.AcquisitionContext) async throws -> ComplianceValidationResult {
409 |         // RED PHASE: Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:55:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 53 |             return
 54 |         }
 55 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 56 | 
 57 |         // When: View is rendered

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:73:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 71 | 
 72 |         // When: View renders with suggestions
 73 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 74 | 
 75 |         // Then: Should display all suggestions with proper confidence indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:91:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 89 | 
 90 |         // When: View displays high confidence suggestion
 91 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
 92 | 
 93 |         // Then: Should display autonomous mode indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:109:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
107 | 
108 |         // When: View displays medium confidence suggestion
109 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
110 | 
111 |         // Then: Should display assisted mode indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:127:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
125 | 
126 |         // When: View displays low confidence suggestion
127 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
128 | 
129 |         // Then: Should display deferred mode indicators

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:142:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
140 |             return
141 |         }
142 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
143 |         let initialSuggestions = createMockDecisionResponses()
144 |         // Mock setting current suggestions - actual implementation would use load method

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:143:13: warning: initialization of immutable value 'initialSuggestions' was never used; consider replacing with assignment to '_' or removing it
141 |         }
142 |         let view = AgenticSuggestionView(viewModel: viewModel)
143 |         let initialSuggestions = createMockDecisionResponses()
    |             `- warning: initialization of immutable value 'initialSuggestions' was never used; consider replacing with assignment to '_' or removing it
144 |         // Mock setting current suggestions - actual implementation would use load method
145 |         // viewModel.currentSuggestions = initialSuggestions

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:168:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
166 | 
167 |         // When: View renders batch suggestions
168 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
169 | 
170 |         // Then: Should display all suggestions with proper grouping

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:186:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
184 | 
185 |         // When: View renders error state
186 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
187 | 
188 |         // Then: Should display graceful error message

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:199:19: error: cannot assign to property: 'isProcessing' setter is inaccessible
197 |             return
198 |         }
199 |         viewModel.isProcessing = true
    |                   `- error: cannot assign to property: 'isProcessing' setter is inaccessible
200 | 
201 |         // When: View renders loading state

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:217:13: warning: initialization of immutable value 'suggestions' was never used; consider replacing with assignment to '_' or removing it
215 |             return
216 |         }
217 |         let suggestions = createMockDecisionResponses()
    |             `- warning: initialization of immutable value 'suggestions' was never used; consider replacing with assignment to '_' or removing it
218 |         // Mock setting current suggestions - actual implementation would use load method
219 |         // viewModel.currentSuggestions = suggestions

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:220:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
218 |         // Mock setting current suggestions - actual implementation would use load method
219 |         // viewModel.currentSuggestions = suggestions
220 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
221 | 
222 |         // When: VoiceOver accesses the view

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:233:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
231 |             return
232 |         }
233 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
234 | 
235 |         // When: Keyboard navigation is used

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:248:13: warning: initialization of immutable value 'largeSuggestionSet' was never used; consider replacing with assignment to '_' or removing it
246 |             return
247 |         }
248 |         let largeSuggestionSet = createLargeSuggestionSet()
    |             `- warning: initialization of immutable value 'largeSuggestionSet' was never used; consider replacing with assignment to '_' or removing it
249 |         // Mock setting current suggestions - actual implementation would use load method
250 |         // viewModel.currentSuggestions = largeSuggestionSet

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticSuggestionViewTests.swift:254:13: warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
252 |         // When: View renders with performance measurement
253 |         let startTime = Date()
254 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |             `- warning: initialization of immutable value 'view' was never used; consider replacing with assignment to '_' or removing it
255 |         let renderTime = Date().timeIntervalSince(startTime)
256 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:25:21: error: type 'ConfidenceTrend' has no member 'increasing'
 23 |             factorCount: 15,
 24 |             reasoning: "High confidence based on extensive analysis",
 25 |             trend: .increasing
    |                     `- error: type 'ConfidenceTrend' has no member 'increasing'
 26 |         )
 27 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:39:21: error: type 'ConfidenceTrend' has no member 'decreasing'
 37 |             factorCount: 6,
 38 |             reasoning: "Low confidence, requires user input",
 39 |             trend: .decreasing
    |                     `- error: type 'ConfidenceTrend' has no member 'decreasing'
 40 |         )
 41 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:54:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
 52 |     func testConfidenceIndicator_HighConfidence_ShowsGreenColorScheme() throws {
 53 |         // Given: High confidence visualization (≥80%)
 54 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 55 | 
 56 |         // When: Indicator renders high confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:57:55: error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 55 | 
 56 |         // When: Indicator renders high confidence
 57 |         let colorScheme = highConfidenceVisualization.colorScheme
    |                                                       `- error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 58 | 
 59 |         // Then: Should use green color scheme

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:60:38: error: type 'Equatable' has no member 'highConfidence'
 58 | 
 59 |         // Then: Should use green color scheme
 60 |         XCTAssertEqual(colorScheme, .highConfidence, "High confidence should use green color scheme")
    |                                      `- error: type 'Equatable' has no member 'highConfidence'
 61 |         XCTFail("RED PHASE: High confidence color scheme not implemented")
 62 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:66:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
 64 |     func testConfidenceIndicator_MediumConfidence_ShowsOrangeColorScheme() throws {
 65 |         // Given: Medium confidence visualization (60-79%)
 66 |         let indicator = ConfidenceIndicator(visualization: mediumConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 67 | 
 68 |         // When: Indicator renders medium confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:69:57: error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 67 | 
 68 |         // When: Indicator renders medium confidence
 69 |         let colorScheme = mediumConfidenceVisualization.colorScheme
    |                                                         `- error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 70 | 
 71 |         // Then: Should use orange color scheme

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:72:38: error: type 'Equatable' has no member 'mediumConfidence'
 70 | 
 71 |         // Then: Should use orange color scheme
 72 |         XCTAssertEqual(colorScheme, .mediumConfidence, "Medium confidence should use orange color scheme")
    |                                      `- error: type 'Equatable' has no member 'mediumConfidence'
 73 |         XCTFail("RED PHASE: Medium confidence color scheme not implemented")
 74 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:78:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
 76 |     func testConfidenceIndicator_LowConfidence_ShowsRedColorScheme() throws {
 77 |         // Given: Low confidence visualization (<60%)
 78 |         let indicator = ConfidenceIndicator(visualization: lowConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 79 | 
 80 |         // When: Indicator renders low confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:81:54: error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 79 | 
 80 |         // When: Indicator renders low confidence
 81 |         let colorScheme = lowConfidenceVisualization.colorScheme
    |                                                      `- error: referencing instance method 'colorScheme' on 'Optional' requires that 'ConfidenceVisualization' conform to 'View'
 82 | 
 83 |         // Then: Should use red color scheme

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'ConfidenceVisualization?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:84:38: error: type 'Equatable' has no member 'lowConfidence'
 82 | 
 83 |         // Then: Should use red color scheme
 84 |         XCTAssertEqual(colorScheme, .lowConfidence, "Low confidence should use red color scheme")
    |                                      `- error: type 'Equatable' has no member 'lowConfidence'
 85 |         XCTFail("RED PHASE: Low confidence color scheme not implemented")
 86 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:101:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
 99 | 
100 |         // When: Progress bar displays confidence
101 |         let indicator = ConfidenceIndicator(visualization: visualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
102 | 
103 |         // Then: Should show 84.7% (single decimal precision)

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:104:13: warning: initialization of immutable value 'expectedPercentage' was never used; consider replacing with assignment to '_' or removing it
102 | 
103 |         // Then: Should show 84.7% (single decimal precision)
104 |         let expectedPercentage = "84.7%"
    |             `- warning: initialization of immutable value 'expectedPercentage' was never used; consider replacing with assignment to '_' or removing it
105 |         XCTFail("RED PHASE: Progress bar percentage display not implemented")
106 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:110:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
108 |     func testConfidenceIndicator_ProgressBar_AnimatesCorrectly() throws {
109 |         // Given: Confidence indicator with animation enabled
110 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
111 | 
112 |         // When: Animation is triggered

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:121:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
119 |     func testConfidenceIndicator_FactorCount_DisplaysCorrectText() throws {
120 |         // Given: Visualization with 15 factors
121 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
122 | 
123 |         // When: Factor count is displayed

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:126:24: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to refer to member 'factorCount' of wrapped base type 'ConfidenceVisualization'
124 |         // Then: Should show "Based on 15 factors"
125 |         let expectedFactorText = "Based on 15 factors"
126 |         XCTAssertEqual(highConfidenceVisualization.factorCount, 15)
    |                        |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to refer to member 'factorCount' of wrapped base type 'ConfidenceVisualization'
    |                        |- note: chain the optional using '?' to access member 'factorCount' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
127 |         XCTFail("RED PHASE: Factor count display not implemented")
128 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:140:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
138 | 
139 |         // When: Single factor is displayed
140 |         let indicator = ConfidenceIndicator(visualization: singleFactorVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
141 | 
142 |         // Then: Should show "Based on 1 factor" (singular)

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:143:13: warning: initialization of immutable value 'expectedText' was never used; consider replacing with assignment to '_' or removing it
141 | 
142 |         // Then: Should show "Based on 1 factor" (singular)
143 |         let expectedText = "Based on 1 factor"
    |             `- warning: initialization of immutable value 'expectedText' was never used; consider replacing with assignment to '_' or removing it
144 |         XCTFail("RED PHASE: Singular factor count display not implemented")
145 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:164:21: error: type 'ConfidenceTrend' has no member 'increasing'
162 |             factorCount: 18,
163 |             reasoning: "Updated confidence",
164 |             trend: .increasing
    |                     `- error: type 'ConfidenceTrend' has no member 'increasing'
165 |         )
166 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:173:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
171 |     func testConfidenceIndicator_ConfidenceUpdate_MaintainsAccessibility() throws {
172 |         // Given: Confidence indicator with accessibility labels
173 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
174 | 
175 |         // When: Confidence updates

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:188:21: error: type 'ConfidenceTrend' has no member 'increasing'
186 |             factorCount: 14,
187 |             reasoning: "Confidence increasing",
188 |             trend: .increasing
    |                     `- error: type 'ConfidenceTrend' has no member 'increasing'
189 |         )
190 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:195:56: error: type 'Equatable' has no member 'increasing'
193 | 
194 |         // Then: Should show upward trend arrow
195 |         XCTAssertEqual(increasingVisualization.trend, .increasing)
    |                                                        `- error: type 'Equatable' has no member 'increasing'
196 |         XCTFail("RED PHASE: Increasing trend indicator not implemented")
197 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:205:21: error: type 'ConfidenceTrend' has no member 'decreasing'
203 |             factorCount: 8,
204 |             reasoning: "Confidence decreasing",
205 |             trend: .decreasing
    |                     `- error: type 'ConfidenceTrend' has no member 'decreasing'
206 |         )
207 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:212:56: error: type 'Equatable' has no member 'decreasing'
210 | 
211 |         // Then: Should show downward trend arrow
212 |         XCTAssertEqual(decreasingVisualization.trend, .decreasing)
    |                                                        `- error: type 'Equatable' has no member 'decreasing'
213 |         XCTFail("RED PHASE: Decreasing trend indicator not implemented")
214 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:220:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
218 |     func testConfidenceIndicator_VoiceOverSupport_ProvidesDetailedDescription() throws {
219 |         // Given: Confidence indicator with high confidence
220 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
221 | 
222 |         // When: VoiceOver accesses the indicator

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:230:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
228 |     func testConfidenceIndicator_ColorBlindSupport_UsesIconsAndPatterns() throws {
229 |         // Given: Confidence indicator for color-blind users
230 |         let indicator = ConfidenceIndicator(visualization: mediumConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
231 | 
232 |         // When: Color-blind mode is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:241:60: error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
239 |     func testConfidenceIndicator_RapidUpdates_MaintainsPerformance() throws {
240 |         // Given: Confidence indicator with rapid updates
241 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |                                                            |- error: value of optional type 'ConfidenceVisualization?' must be unwrapped to a value of type 'ConfidenceVisualization'
    |                                                            |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
242 | 
243 |         // When: Multiple rapid confidence updates occur

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:269:20: error: 'nil' is not compatible with expected argument type 'ConfidenceTrend'
267 |             factorCount: 0,
268 |             reasoning: "No confidence available",
269 |             trend: nil
    |                    `- error: 'nil' is not compatible with expected argument type 'ConfidenceTrend'
270 |         )
271 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:290:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
288 | 
289 |         // When: Perfect confidence is displayed
290 |         let indicator = ConfidenceIndicator(visualization: perfectConfidenceVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
291 | 
292 |         // Then: Should display 100% correctly

/Users/J/aiko/Tests/AgenticSuggestionUI/ConfidenceIndicatorTests.swift:307:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
305 | 
306 |         // When: Invalid confidence is processed
307 |         let indicator = ConfidenceIndicator(visualization: invalidConfidenceVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
308 | 
309 |         // Then: Should clamp to valid range (0.0-1.0)

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var performanceMonitor: PerformanceMonitor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var performanceMonitor: PerformanceMonitor?
 16 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:15:29: error: 'PerformanceMonitor' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var performanceMonitor: PerformanceMonitor?
    |                             `- error: 'PerformanceMonitor' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown
    :
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- note: found this candidate
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1032:13: note: found this candidate
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- note: found this candidate
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:350:74: error: 'PerformanceMetrics' is ambiguous for type lookup in this context
348 |     }
349 | 
350 |     private func measureRenderingPerformance<T>(_ operation: () -> T) -> PerformanceMetrics {
    |                                                                          `- error: 'PerformanceMetrics' is ambiguous for type lookup in this context
351 |         var times: [TimeInterval] = []
352 | 
    :
493 | }
494 | 
495 | struct PerformanceMetrics {
    |        `- note: found this candidate
496 |     let average: TimeInterval
497 |     let p95: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1024:8: note: found this candidate
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- note: found this candidate
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:367:59: error: 'DecisionResponse' is ambiguous for type lookup in this context
365 |     }
366 | 
367 |     private func createLargeSuggestionSet(count: Int) -> [DecisionResponse] {
    |                                                           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |         Array(0 ..< count).map { index in
369 |             DecisionResponse(

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:386:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
384 |     }
385 | 
386 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
387 |         DecisionResponse(
388 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:436:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
434 |     }
435 | 
436 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
437 |         AcquisitionContext(
438 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:455:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
453 |     }
454 | 
455 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
456 |         DecisionResponse(
457 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:470:7: error: invalid redeclaration of 'PerformanceMonitor'
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- error: invalid redeclaration of 'PerformanceMonitor'
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:495:8: error: invalid redeclaration of 'PerformanceMetrics'
493 | }
494 | 
495 | struct PerformanceMetrics {
    |        `- error: invalid redeclaration of 'PerformanceMetrics'
496 |     let average: TimeInterval
497 |     let p95: TimeInterval

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:502:11: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
500 | // MARK: - Extended Mock for Performance Testing
501 | 
502 | extension MockAgenticOrchestrator {
    |           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
503 |     var simulateOfflineMode = false
504 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:49:57: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
 47 |         // When: Measuring rendering performance
 48 |         let renderingTime = measureRenderingPerformance {
 49 |             let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                         |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 50 |             return view
 51 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:155:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
153 |         // When: Processing suggestions with CPU monitoring
154 |         let testContext = createTestAcquisitionContext()
155 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
156 | 
157 |         let cpuAfter = performanceMonitor.currentCPUUsage()

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:200:23: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
198 |         // When: Measuring feedback submission time
199 |         let submissionTime = await measureAsyncTime {
200 |             try await viewModel.submitFeedback(feedback, for: suggestion)
    |                       |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
    |                       |- note: chain the optional using '?' to access member 'submitFeedback' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
201 |         }
202 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:214:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
212 |         // When: Operating in offline mode
213 |         let offlineTime = await measureAsyncTime {
214 |             try? await viewModel.loadSuggestions(for: createTestAcquisitionContext())
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
215 |         }
216 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:262:13: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
260 |         let suggestions = createLargeSuggestionSet(count: 500)
261 |         let processingTime = measureTime {
262 |             viewModel.currentSuggestions = suggestions
    |             |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |             |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
263 |         }
264 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:266:25: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
264 | 
265 |         // Then: Should degrade gracefully under memory pressure
266 |         XCTAssertNotNil(viewModel.currentSuggestions, "Should maintain functionality under memory pressure")
    |                         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                         `- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
267 |         XCTFail("RED PHASE: Memory pressure handling not implemented")
268 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:282:17: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
280 | 
281 |             let renderingTime = measureTime {
282 |                 viewModel.currentSuggestions = suggestions
    |                 |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                 |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
283 |                 let view = AgenticSuggestionView(viewModel: viewModel)
284 |                 return view

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:319:28: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
317 |             for operation in 0 ..< operationsPerHour {
318 |                 let context = createTestAcquisitionContext()
319 |                 try? await viewModel.loadSuggestions(for: context)
    |                            |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                            |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
320 | 
321 |                 // Simulate time passage (compressed)

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:346:9: warning: result of 'try?' is unused
344 |     private func measureAsyncTime<T>(_ operation: () async throws -> T) async -> TimeInterval {
345 |         let startTime = Date()
346 |         try? await operation()
    |         `- warning: result of 'try?' is unused
347 |         return Date().timeIntervalSince(startTime)
348 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:346:20: error: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'
342 |     }
343 | 
344 |     private func measureAsyncTime<T>(_ operation: () async throws -> T) async -> TimeInterval {
    |                                   `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol
345 |         let startTime = Date()
346 |         try? await operation()
    |                    `- error: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'
347 |         return Date().timeIntervalSince(startTime)
348 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:412:17: error: cannot convert value of type 'FARReference' to closure result type 'AgenticFARReference'
410 |         ComplianceContext(
411 |             farReferences: Array(0 ..< 10).map { index in
412 |                 FARReference(
    |                 `- error: cannot convert value of type 'FARReference' to closure result type 'AgenticFARReference'
413 |                     section: "52.212-\(index + 1)",
414 |                     title: "Complex Regulation \(index + 1)",

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:412:29: error: extra arguments at positions #2, #3 in call
410 |         ComplianceContext(
411 |             farReferences: Array(0 ..< 10).map { index in
412 |                 FARReference(
    |                             `- error: extra arguments at positions #2, #3 in call
413 |                     section: "52.212-\(index + 1)",
414 |                     title: "Complex Regulation \(index + 1)",

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:412:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
410 |         ComplianceContext(
411 |             farReferences: Array(0 ..< 10).map { index in
412 |                 FARReference(
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
413 |                     section: "52.212-\(index + 1)",
414 |                     title: "Complex Regulation \(index + 1)",

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:419:17: error: cannot convert value of type 'DFARSReference' to closure result type 'AgenticDFARSReference'
417 |             },
418 |             dfarsReferences: Array(0 ..< 5).map { index in
419 |                 DFARSReference(
    |                 `- error: cannot convert value of type 'DFARSReference' to closure result type 'AgenticDFARSReference'
420 |                     section: "252.212-700\(index + 1)",
421 |                     title: "DFARS Requirement \(index + 1)",

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:419:31: error: extra arguments at positions #2, #3 in call
417 |             },
418 |             dfarsReferences: Array(0 ..< 5).map { index in
419 |                 DFARSReference(
    |                               `- error: extra arguments at positions #2, #3 in call
420 |                     section: "252.212-700\(index + 1)",
421 |                     title: "DFARS Requirement \(index + 1)",

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:419:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
417 |             },
418 |             dfarsReferences: Array(0 ..< 5).map { index in
419 |                 DFARSReference(
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
420 |                     section: "252.212-700\(index + 1)",
421 |                     title: "DFARS Requirement \(index + 1)",

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:505:76: error: 'DecisionResponse' is ambiguous for type lookup in this context
503 |     var simulateOfflineMode = false
504 | 
505 |     override func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                            `- error: 'DecisionResponse' is ambiguous for type lookup in this context
506 |         if simulateOfflineMode {
507 |             // Simulate offline processing delay

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double
[10/35] Compiling AIKOTests MultifactorConfidenceScoringTests.swift
/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:37:9: warning: no 'async' operations occur within 'await' expression
 35 | 
 36 |     func testPredictWorkflowTransitions_ReturnsRankedPredictions() async throws {
 37 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
 38 |         defer { Task { @MainActor in await self.teardownTest() } }
 39 | 

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:38:38: warning: no 'async' operations occur within 'await' expression
 36 |     func testPredictWorkflowTransitions_ReturnsRankedPredictions() async throws {
 37 |         await setupTest()
 38 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
 39 | 
 40 |         // GIVEN: Sufficient workflow patterns in learning engine

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:63:9: warning: no 'async' operations occur within 'await' expression
 61 | 
 62 |     func testPrivacyConfigurationRespected() async throws {
 63 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
 64 |         defer { Task { @MainActor in await self.teardownTest() } }
 65 | 

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:64:38: warning: no 'async' operations occur within 'await' expression
 62 |     func testPrivacyConfigurationRespected() async throws {
 63 |         await setupTest()
 64 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
 65 | 
 66 |         // GIVEN: Privacy settings disable predictions

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:95:9: warning: no 'async' operations occur within 'await' expression
 93 | 
 94 |     func testPredictionConfidenceThreshold() async throws {
 95 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
 96 |         defer { Task { @MainActor in await self.teardownTest() } }
 97 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:96:38: warning: no 'async' operations occur within 'await' expression
 94 |     func testPredictionConfidenceThreshold() async throws {
 95 |         await setupTest()
 96 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
 97 |         
 98 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:126:9: warning: no 'async' operations occur within 'await' expression
124 | 
125 |     func testWorkflowPatternFiltering() async throws {
126 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
127 |         defer { Task { @MainActor in await self.teardownTest() } }
128 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:127:38: warning: no 'async' operations occur within 'await' expression
125 |     func testWorkflowPatternFiltering() async throws {
126 |         await setupTest()
127 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
128 |         
129 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:154:9: warning: no 'async' operations occur within 'await' expression
152 | 
153 |     func testFeatureFlagIntegration() async throws {
154 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
155 |         defer { Task { @MainActor in await self.teardownTest() } }
156 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:155:38: warning: no 'async' operations occur within 'await' expression
153 |     func testFeatureFlagIntegration() async throws {
154 |         await setupTest()
155 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
156 |         
157 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:186:9: warning: no 'async' operations occur within 'await' expression
184 | 
185 |     func testPatternWeightingAccuracy() async throws {
186 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
187 |         defer { Task { @MainActor in await self.teardownTest() } }
188 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:187:38: warning: no 'async' operations occur within 'await' expression
185 |     func testPatternWeightingAccuracy() async throws {
186 |         await setupTest()
187 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
188 |         
189 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:214:9: warning: no 'async' operations occur within 'await' expression
212 | 
213 |     func testWorkflowContextMatching() async throws {
214 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
215 |         defer { Task { @MainActor in await self.teardownTest() } }
216 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:215:38: warning: no 'async' operations occur within 'await' expression
213 |     func testWorkflowContextMatching() async throws {
214 |         await setupTest()
215 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
216 |         
217 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:244:9: warning: no 'async' operations occur within 'await' expression
242 | 
243 |     func testProcessPredictionFeedback_UpdatesAccuracy() async throws {
244 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
245 |         defer { Task { @MainActor in await self.teardownTest() } }
246 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:245:38: warning: no 'async' operations occur within 'await' expression
243 |     func testProcessPredictionFeedback_UpdatesAccuracy() async throws {
244 |         await setupTest()
245 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
246 |         
247 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:272:9: warning: no 'async' operations occur within 'await' expression
270 | 
271 |     func testMetricsTracking() async throws {
272 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
273 |         defer { Task { @MainActor in await self.teardownTest() } }
274 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:273:38: warning: no 'async' operations occur within 'await' expression
271 |     func testMetricsTracking() async throws {
272 |         await setupTest()
273 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
274 |         
275 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:299:9: warning: no 'async' operations occur within 'await' expression
297 | 
298 |     func testTransitionProbabilityUpdates() async throws {
299 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
300 |         defer { Task { @MainActor in await self.teardownTest() } }
301 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:300:38: warning: no 'async' operations occur within 'await' expression
298 |     func testTransitionProbabilityUpdates() async throws {
299 |         await setupTest()
300 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
301 |         
302 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/WorkflowStateMachineTests.swift:199:9: error: cannot assign to value: 'sut' is a 'let' constant
197 | 
198 |         // Simulate app restart
199 |         sut = WorkflowStateMachine()
    |         `- error: cannot assign to value: 'sut' is a 'let' constant
200 |         guard let sut else {
201 |             XCTFail("WorkflowStateMachine should be initialized after restart")

/Users/J/aiko/Tests/WorkflowPrediction/WorkflowStateMachineTests.swift:200:15: error: initializer for conditional binding must have Optional type, not 'WorkflowStateMachine'
198 |         // Simulate app restart
199 |         sut = WorkflowStateMachine()
200 |         guard let sut else {
    |               `- error: initializer for conditional binding must have Optional type, not 'WorkflowStateMachine'
201 |             XCTFail("WorkflowStateMachine should be initialized after restart")
202 |             return
[11/35] Compiling AIKOTests UserPatternLearningEngineTests.swift
/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:37:9: warning: no 'async' operations occur within 'await' expression
 35 | 
 36 |     func testPredictWorkflowTransitions_ReturnsRankedPredictions() async throws {
 37 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
 38 |         defer { Task { @MainActor in await self.teardownTest() } }
 39 | 

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:38:38: warning: no 'async' operations occur within 'await' expression
 36 |     func testPredictWorkflowTransitions_ReturnsRankedPredictions() async throws {
 37 |         await setupTest()
 38 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
 39 | 
 40 |         // GIVEN: Sufficient workflow patterns in learning engine

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:63:9: warning: no 'async' operations occur within 'await' expression
 61 | 
 62 |     func testPrivacyConfigurationRespected() async throws {
 63 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
 64 |         defer { Task { @MainActor in await self.teardownTest() } }
 65 | 

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:64:38: warning: no 'async' operations occur within 'await' expression
 62 |     func testPrivacyConfigurationRespected() async throws {
 63 |         await setupTest()
 64 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
 65 | 
 66 |         // GIVEN: Privacy settings disable predictions

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:95:9: warning: no 'async' operations occur within 'await' expression
 93 | 
 94 |     func testPredictionConfidenceThreshold() async throws {
 95 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
 96 |         defer { Task { @MainActor in await self.teardownTest() } }
 97 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:96:38: warning: no 'async' operations occur within 'await' expression
 94 |     func testPredictionConfidenceThreshold() async throws {
 95 |         await setupTest()
 96 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
 97 |         
 98 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:126:9: warning: no 'async' operations occur within 'await' expression
124 | 
125 |     func testWorkflowPatternFiltering() async throws {
126 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
127 |         defer { Task { @MainActor in await self.teardownTest() } }
128 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:127:38: warning: no 'async' operations occur within 'await' expression
125 |     func testWorkflowPatternFiltering() async throws {
126 |         await setupTest()
127 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
128 |         
129 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:154:9: warning: no 'async' operations occur within 'await' expression
152 | 
153 |     func testFeatureFlagIntegration() async throws {
154 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
155 |         defer { Task { @MainActor in await self.teardownTest() } }
156 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:155:38: warning: no 'async' operations occur within 'await' expression
153 |     func testFeatureFlagIntegration() async throws {
154 |         await setupTest()
155 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
156 |         
157 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:186:9: warning: no 'async' operations occur within 'await' expression
184 | 
185 |     func testPatternWeightingAccuracy() async throws {
186 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
187 |         defer { Task { @MainActor in await self.teardownTest() } }
188 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:187:38: warning: no 'async' operations occur within 'await' expression
185 |     func testPatternWeightingAccuracy() async throws {
186 |         await setupTest()
187 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
188 |         
189 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:214:9: warning: no 'async' operations occur within 'await' expression
212 | 
213 |     func testWorkflowContextMatching() async throws {
214 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
215 |         defer { Task { @MainActor in await self.teardownTest() } }
216 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:215:38: warning: no 'async' operations occur within 'await' expression
213 |     func testWorkflowContextMatching() async throws {
214 |         await setupTest()
215 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
216 |         
217 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:244:9: warning: no 'async' operations occur within 'await' expression
242 | 
243 |     func testProcessPredictionFeedback_UpdatesAccuracy() async throws {
244 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
245 |         defer { Task { @MainActor in await self.teardownTest() } }
246 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:245:38: warning: no 'async' operations occur within 'await' expression
243 |     func testProcessPredictionFeedback_UpdatesAccuracy() async throws {
244 |         await setupTest()
245 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
246 |         
247 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:272:9: warning: no 'async' operations occur within 'await' expression
270 | 
271 |     func testMetricsTracking() async throws {
272 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
273 |         defer { Task { @MainActor in await self.teardownTest() } }
274 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:273:38: warning: no 'async' operations occur within 'await' expression
271 |     func testMetricsTracking() async throws {
272 |         await setupTest()
273 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
274 |         
275 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:299:9: warning: no 'async' operations occur within 'await' expression
297 | 
298 |     func testTransitionProbabilityUpdates() async throws {
299 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
300 |         defer { Task { @MainActor in await self.teardownTest() } }
301 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:300:38: warning: no 'async' operations occur within 'await' expression
298 |     func testTransitionProbabilityUpdates() async throws {
299 |         await setupTest()
300 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
301 |         
302 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/WorkflowStateMachineTests.swift:199:9: error: cannot assign to value: 'sut' is a 'let' constant
197 | 
198 |         // Simulate app restart
199 |         sut = WorkflowStateMachine()
    |         `- error: cannot assign to value: 'sut' is a 'let' constant
200 |         guard let sut else {
201 |             XCTFail("WorkflowStateMachine should be initialized after restart")

/Users/J/aiko/Tests/WorkflowPrediction/WorkflowStateMachineTests.swift:200:15: error: initializer for conditional binding must have Optional type, not 'WorkflowStateMachine'
198 |         // Simulate app restart
199 |         sut = WorkflowStateMachine()
200 |         guard let sut else {
    |               `- error: initializer for conditional binding must have Optional type, not 'WorkflowStateMachine'
201 |             XCTFail("WorkflowStateMachine should be initialized after restart")
202 |             return
[12/35] Compiling AIKOTests WorkflowStateMachineTests.swift
/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:37:9: warning: no 'async' operations occur within 'await' expression
 35 | 
 36 |     func testPredictWorkflowTransitions_ReturnsRankedPredictions() async throws {
 37 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
 38 |         defer { Task { @MainActor in await self.teardownTest() } }
 39 | 

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:38:38: warning: no 'async' operations occur within 'await' expression
 36 |     func testPredictWorkflowTransitions_ReturnsRankedPredictions() async throws {
 37 |         await setupTest()
 38 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
 39 | 
 40 |         // GIVEN: Sufficient workflow patterns in learning engine

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:63:9: warning: no 'async' operations occur within 'await' expression
 61 | 
 62 |     func testPrivacyConfigurationRespected() async throws {
 63 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
 64 |         defer { Task { @MainActor in await self.teardownTest() } }
 65 | 

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:64:38: warning: no 'async' operations occur within 'await' expression
 62 |     func testPrivacyConfigurationRespected() async throws {
 63 |         await setupTest()
 64 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
 65 | 
 66 |         // GIVEN: Privacy settings disable predictions

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:95:9: warning: no 'async' operations occur within 'await' expression
 93 | 
 94 |     func testPredictionConfidenceThreshold() async throws {
 95 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
 96 |         defer { Task { @MainActor in await self.teardownTest() } }
 97 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:96:38: warning: no 'async' operations occur within 'await' expression
 94 |     func testPredictionConfidenceThreshold() async throws {
 95 |         await setupTest()
 96 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
 97 |         
 98 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:126:9: warning: no 'async' operations occur within 'await' expression
124 | 
125 |     func testWorkflowPatternFiltering() async throws {
126 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
127 |         defer { Task { @MainActor in await self.teardownTest() } }
128 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:127:38: warning: no 'async' operations occur within 'await' expression
125 |     func testWorkflowPatternFiltering() async throws {
126 |         await setupTest()
127 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
128 |         
129 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:154:9: warning: no 'async' operations occur within 'await' expression
152 | 
153 |     func testFeatureFlagIntegration() async throws {
154 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
155 |         defer { Task { @MainActor in await self.teardownTest() } }
156 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:155:38: warning: no 'async' operations occur within 'await' expression
153 |     func testFeatureFlagIntegration() async throws {
154 |         await setupTest()
155 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
156 |         
157 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:186:9: warning: no 'async' operations occur within 'await' expression
184 | 
185 |     func testPatternWeightingAccuracy() async throws {
186 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
187 |         defer { Task { @MainActor in await self.teardownTest() } }
188 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:187:38: warning: no 'async' operations occur within 'await' expression
185 |     func testPatternWeightingAccuracy() async throws {
186 |         await setupTest()
187 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
188 |         
189 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:214:9: warning: no 'async' operations occur within 'await' expression
212 | 
213 |     func testWorkflowContextMatching() async throws {
214 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
215 |         defer { Task { @MainActor in await self.teardownTest() } }
216 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:215:38: warning: no 'async' operations occur within 'await' expression
213 |     func testWorkflowContextMatching() async throws {
214 |         await setupTest()
215 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
216 |         
217 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:244:9: warning: no 'async' operations occur within 'await' expression
242 | 
243 |     func testProcessPredictionFeedback_UpdatesAccuracy() async throws {
244 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
245 |         defer { Task { @MainActor in await self.teardownTest() } }
246 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:245:38: warning: no 'async' operations occur within 'await' expression
243 |     func testProcessPredictionFeedback_UpdatesAccuracy() async throws {
244 |         await setupTest()
245 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
246 |         
247 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:272:9: warning: no 'async' operations occur within 'await' expression
270 | 
271 |     func testMetricsTracking() async throws {
272 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
273 |         defer { Task { @MainActor in await self.teardownTest() } }
274 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:273:38: warning: no 'async' operations occur within 'await' expression
271 |     func testMetricsTracking() async throws {
272 |         await setupTest()
273 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
274 |         
275 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:299:9: warning: no 'async' operations occur within 'await' expression
297 | 
298 |     func testTransitionProbabilityUpdates() async throws {
299 |         await setupTest()
    |         `- warning: no 'async' operations occur within 'await' expression
300 |         defer { Task { @MainActor in await self.teardownTest() } }
301 |         

/Users/J/aiko/Tests/WorkflowPrediction/UserPatternLearningEngineTests.swift:300:38: warning: no 'async' operations occur within 'await' expression
298 |     func testTransitionProbabilityUpdates() async throws {
299 |         await setupTest()
300 |         defer { Task { @MainActor in await self.teardownTest() } }
    |                                      `- warning: no 'async' operations occur within 'await' expression
301 |         
302 |         guard let sut else {

/Users/J/aiko/Tests/WorkflowPrediction/WorkflowStateMachineTests.swift:199:9: error: cannot assign to value: 'sut' is a 'let' constant
197 | 
198 |         // Simulate app restart
199 |         sut = WorkflowStateMachine()
    |         `- error: cannot assign to value: 'sut' is a 'let' constant
200 |         guard let sut else {
201 |             XCTFail("WorkflowStateMachine should be initialized after restart")

/Users/J/aiko/Tests/WorkflowPrediction/WorkflowStateMachineTests.swift:200:15: error: initializer for conditional binding must have Optional type, not 'WorkflowStateMachine'
198 |         // Simulate app restart
199 |         sut = WorkflowStateMachine()
200 |         guard let sut else {
    |               `- error: initializer for conditional binding must have Optional type, not 'WorkflowStateMachine'
201 |             XCTFail("WorkflowStateMachine should be initialized after restart")
202 |             return
[13/35] Compiling AIKOTests SAMGovLookupViewModelTests.swift
/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:69:35: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'checkCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
 67 | 
 68 |         // Step 1: Verify permission is requested before camera access
 69 |         let hasPermission = await viewModel.checkCameraPermissions()
    |                                   |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'checkCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
    |                                   |- note: chain the optional using '?' to access member 'checkCameraPermissions' only for non-'nil' base values
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 70 | 
 71 |         if !hasPermission {

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:73:33: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'requestCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
 71 |         if !hasPermission {
 72 |             // Step 2: Request permission explicitly
 73 |             let granted = await viewModel.requestCameraPermissions()
    |                                 |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'requestCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
    |                                 |- note: chain the optional using '?' to access member 'requestCameraPermissions' only for non-'nil' base values
    |                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 74 | 
 75 |             // Step 3: Verify no camera access without permission

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:77:23: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
 75 |             // Step 3: Verify no camera access without permission
 76 |             if !granted {
 77 |                 await viewModel.startScanning()
    |                       |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |                       |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 78 |                 XCTAssertNotNil(viewModel.error)
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:78:33: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
 76 |             if !granted {
 77 |                 await viewModel.startScanning()
 78 |                 XCTAssertNotNil(viewModel.error)
    |                                 |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
    |                                 |- note: chain the optional using '?' to access member 'error' only for non-'nil' base values
    |                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)
 80 |             }

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:79:31: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
 77 |                 await viewModel.startScanning()
 78 |                 XCTAssertNotNil(viewModel.error)
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)
    |                               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
    |                               |- note: chain the optional using '?' to access member 'error' only for non-'nil' base values
    |                               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 80 |             }
 81 |         }

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:79:47: warning: cast from 'DocumentScannerError?' to unrelated type 'CameraPermissionError' always fails
 77 |                 await viewModel.startScanning()
 78 |                 XCTAssertNotNil(viewModel.error)
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)
    |                                               `- warning: cast from 'DocumentScannerError?' to unrelated type 'CameraPermissionError' always fails
 80 |             }
 81 |         }

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:93:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
 91 | 
 92 |         // Step 1: Scan document
 93 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 94 |         let mockImageData = createMockImageData()
 95 |         let mockPage = AppCore.ScannedPage(

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:99:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
 97 |             pageNumber: 1
 98 |         )
 99 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
100 | 
101 |         // Step 2: Verify image data is encrypted in memory (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:124:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
122 |             pageNumber: 1
123 |         )
124 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
125 |         await viewModel.saveDocument()
126 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:125:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
123 |         )
124 |         viewModel.addPage(mockPage)
125 |         await viewModel.saveDocument()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'saveDocument' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
126 | 
127 |         // Step 2: Verify data storage compliance (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:140:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
138 | 
139 |         // Step 1: Start scan with sensitive data
140 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
141 |         let sensitiveImageData = createMockImageData()
142 |         let sensitiveePage = AppCore.ScannedPage(

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:146:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
144 |             pageNumber: 1
145 |         )
146 |         viewModel.addPage(sensitiveePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
147 | 
148 |         // Step 2: Simulate app going to background (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:179:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
177 |             pageNumber: 1
178 |         )
179 |         viewModel.addPage(sensitivePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
180 | 
181 |         // Step 2: Save document with encryption (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:209:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
207 |             pageNumber: 1
208 |         )
209 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
210 | 
211 |         // await viewModel.uploadToCloud(configuration: cloudConfig)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:260:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
258 |             pageNumber: 1
259 |         )
260 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
261 |         // await viewModel.saveDocument(retentionPolicy: retentionPolicy)
262 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:280:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
278 | 
279 |         // Step 2: Attempt to start scan without authentication
280 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
281 | 
282 |         // Step 3: Verify biometric prompt appears (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:300:9: error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateAuthFailure' of wrapped base type 'MockSecurityBiometricService'
298 | 
299 |         // Step 2: Simulate authentication failure
300 |         mockBiometricService.simulateAuthFailure()
    |         |- error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateAuthFailure' of wrapped base type 'MockSecurityBiometricService'
    |         |- note: chain the optional using '?' to access member 'simulateAuthFailure' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
301 | 
302 |         await viewModel.startScanning()

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:302:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
300 |         mockBiometricService.simulateAuthFailure()
301 | 
302 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
303 | 
304 |         // Step 3: Verify access is blocked (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:316:9: error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateSuccessfulAuth' of wrapped base type 'MockSecurityBiometricService'
314 | 
315 |         // Step 1: Authenticate successfully
316 |         mockBiometricService.simulateSuccessfulAuth()
    |         |- error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateSuccessfulAuth' of wrapped base type 'MockSecurityBiometricService'
    |         |- note: chain the optional using '?' to access member 'simulateSuccessfulAuth' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
317 |         await viewModel.startScanning()
318 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:317:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
315 |         // Step 1: Authenticate successfully
316 |         mockBiometricService.simulateSuccessfulAuth()
317 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
318 | 
319 |         // Step 2: Simulate session timeout (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:323:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
321 | 
322 |         // Step 3: Attempt another scan
323 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
324 | 
325 |         // Step 4: Verify re-authentication is required

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:342:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
340 |             pageNumber: 1
341 |         )
342 |         viewModel.addPage(originalPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
343 |         await viewModel.saveDocument()
344 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:343:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
341 |         )
342 |         viewModel.addPage(originalPage)
343 |         await viewModel.saveDocument()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'saveDocument' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
344 | 
345 |         // Step 2: Generate integrity hash (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:365:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
363 |             pageNumber: 1
364 |         )
365 |         viewModel.addPage(securePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
366 |         // await viewModel.saveDocumentWithTamperDetection()
367 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:393:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
391 |             pageNumber: 1
392 |         )
393 |         viewModel.addPage(sensitivePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
394 | 
395 |         // Step 2: Process OCR with encryption (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:407:13: warning: initialization of immutable value 'apiConfig' was never used; consider replacing with assignment to '_' or removing it
405 | 
406 |         // Step 1: Configure API with certificate pinning
407 |         let apiConfig = APIConfiguration(
    |             `- warning: initialization of immutable value 'apiConfig' was never used; consider replacing with assignment to '_' or removing it
408 |             enableCertificatePinning: true,
409 |             allowedCertificates: ["api.aiko.com.cert"]

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:440:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
438 |             pageNumber: 1
439 |         )
440 |         viewModel.addPage(sensitivePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
441 | 
442 |         // Step 2: Auto-detect and redact sensitive data (not implemented)
[14/35] Compiling AIKOTests Security_DocumentScannerTests.swift
/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:69:35: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'checkCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
 67 | 
 68 |         // Step 1: Verify permission is requested before camera access
 69 |         let hasPermission = await viewModel.checkCameraPermissions()
    |                                   |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'checkCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
    |                                   |- note: chain the optional using '?' to access member 'checkCameraPermissions' only for non-'nil' base values
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 70 | 
 71 |         if !hasPermission {

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:73:33: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'requestCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
 71 |         if !hasPermission {
 72 |             // Step 2: Request permission explicitly
 73 |             let granted = await viewModel.requestCameraPermissions()
    |                                 |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'requestCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
    |                                 |- note: chain the optional using '?' to access member 'requestCameraPermissions' only for non-'nil' base values
    |                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 74 | 
 75 |             // Step 3: Verify no camera access without permission

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:77:23: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
 75 |             // Step 3: Verify no camera access without permission
 76 |             if !granted {
 77 |                 await viewModel.startScanning()
    |                       |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |                       |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 78 |                 XCTAssertNotNil(viewModel.error)
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:78:33: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
 76 |             if !granted {
 77 |                 await viewModel.startScanning()
 78 |                 XCTAssertNotNil(viewModel.error)
    |                                 |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
    |                                 |- note: chain the optional using '?' to access member 'error' only for non-'nil' base values
    |                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)
 80 |             }

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:79:31: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
 77 |                 await viewModel.startScanning()
 78 |                 XCTAssertNotNil(viewModel.error)
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)
    |                               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
    |                               |- note: chain the optional using '?' to access member 'error' only for non-'nil' base values
    |                               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 80 |             }
 81 |         }

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:79:47: warning: cast from 'DocumentScannerError?' to unrelated type 'CameraPermissionError' always fails
 77 |                 await viewModel.startScanning()
 78 |                 XCTAssertNotNil(viewModel.error)
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)
    |                                               `- warning: cast from 'DocumentScannerError?' to unrelated type 'CameraPermissionError' always fails
 80 |             }
 81 |         }

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:93:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
 91 | 
 92 |         // Step 1: Scan document
 93 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 94 |         let mockImageData = createMockImageData()
 95 |         let mockPage = AppCore.ScannedPage(

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:99:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
 97 |             pageNumber: 1
 98 |         )
 99 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
100 | 
101 |         // Step 2: Verify image data is encrypted in memory (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:124:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
122 |             pageNumber: 1
123 |         )
124 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
125 |         await viewModel.saveDocument()
126 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:125:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
123 |         )
124 |         viewModel.addPage(mockPage)
125 |         await viewModel.saveDocument()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'saveDocument' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
126 | 
127 |         // Step 2: Verify data storage compliance (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:140:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
138 | 
139 |         // Step 1: Start scan with sensitive data
140 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
141 |         let sensitiveImageData = createMockImageData()
142 |         let sensitiveePage = AppCore.ScannedPage(

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:146:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
144 |             pageNumber: 1
145 |         )
146 |         viewModel.addPage(sensitiveePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
147 | 
148 |         // Step 2: Simulate app going to background (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:179:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
177 |             pageNumber: 1
178 |         )
179 |         viewModel.addPage(sensitivePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
180 | 
181 |         // Step 2: Save document with encryption (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:209:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
207 |             pageNumber: 1
208 |         )
209 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
210 | 
211 |         // await viewModel.uploadToCloud(configuration: cloudConfig)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:260:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
258 |             pageNumber: 1
259 |         )
260 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
261 |         // await viewModel.saveDocument(retentionPolicy: retentionPolicy)
262 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:280:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
278 | 
279 |         // Step 2: Attempt to start scan without authentication
280 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
281 | 
282 |         // Step 3: Verify biometric prompt appears (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:300:9: error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateAuthFailure' of wrapped base type 'MockSecurityBiometricService'
298 | 
299 |         // Step 2: Simulate authentication failure
300 |         mockBiometricService.simulateAuthFailure()
    |         |- error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateAuthFailure' of wrapped base type 'MockSecurityBiometricService'
    |         |- note: chain the optional using '?' to access member 'simulateAuthFailure' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
301 | 
302 |         await viewModel.startScanning()

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:302:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
300 |         mockBiometricService.simulateAuthFailure()
301 | 
302 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
303 | 
304 |         // Step 3: Verify access is blocked (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:316:9: error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateSuccessfulAuth' of wrapped base type 'MockSecurityBiometricService'
314 | 
315 |         // Step 1: Authenticate successfully
316 |         mockBiometricService.simulateSuccessfulAuth()
    |         |- error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateSuccessfulAuth' of wrapped base type 'MockSecurityBiometricService'
    |         |- note: chain the optional using '?' to access member 'simulateSuccessfulAuth' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
317 |         await viewModel.startScanning()
318 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:317:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
315 |         // Step 1: Authenticate successfully
316 |         mockBiometricService.simulateSuccessfulAuth()
317 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
318 | 
319 |         // Step 2: Simulate session timeout (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:323:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
321 | 
322 |         // Step 3: Attempt another scan
323 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
324 | 
325 |         // Step 4: Verify re-authentication is required

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:342:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
340 |             pageNumber: 1
341 |         )
342 |         viewModel.addPage(originalPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
343 |         await viewModel.saveDocument()
344 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:343:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
341 |         )
342 |         viewModel.addPage(originalPage)
343 |         await viewModel.saveDocument()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'saveDocument' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
344 | 
345 |         // Step 2: Generate integrity hash (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:365:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
363 |             pageNumber: 1
364 |         )
365 |         viewModel.addPage(securePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
366 |         // await viewModel.saveDocumentWithTamperDetection()
367 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:393:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
391 |             pageNumber: 1
392 |         )
393 |         viewModel.addPage(sensitivePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
394 | 
395 |         // Step 2: Process OCR with encryption (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:407:13: warning: initialization of immutable value 'apiConfig' was never used; consider replacing with assignment to '_' or removing it
405 | 
406 |         // Step 1: Configure API with certificate pinning
407 |         let apiConfig = APIConfiguration(
    |             `- warning: initialization of immutable value 'apiConfig' was never used; consider replacing with assignment to '_' or removing it
408 |             enableCertificatePinning: true,
409 |             allowedCertificates: ["api.aiko.com.cert"]

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:440:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
438 |             pageNumber: 1
439 |         )
440 |         viewModel.addPage(sensitivePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
441 | 
442 |         // Step 2: Auto-detect and redact sensitive data (not implemented)
[15/35] Compiling AIKOTests ViewInspectorPlaceholders.swift
/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:69:35: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'checkCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
 67 | 
 68 |         // Step 1: Verify permission is requested before camera access
 69 |         let hasPermission = await viewModel.checkCameraPermissions()
    |                                   |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'checkCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
    |                                   |- note: chain the optional using '?' to access member 'checkCameraPermissions' only for non-'nil' base values
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 70 | 
 71 |         if !hasPermission {

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:73:33: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'requestCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
 71 |         if !hasPermission {
 72 |             // Step 2: Request permission explicitly
 73 |             let granted = await viewModel.requestCameraPermissions()
    |                                 |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'requestCameraPermissions' of wrapped base type 'DocumentScannerViewModel'
    |                                 |- note: chain the optional using '?' to access member 'requestCameraPermissions' only for non-'nil' base values
    |                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 74 | 
 75 |             // Step 3: Verify no camera access without permission

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:77:23: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
 75 |             // Step 3: Verify no camera access without permission
 76 |             if !granted {
 77 |                 await viewModel.startScanning()
    |                       |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |                       |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 78 |                 XCTAssertNotNil(viewModel.error)
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:78:33: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
 76 |             if !granted {
 77 |                 await viewModel.startScanning()
 78 |                 XCTAssertNotNil(viewModel.error)
    |                                 |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
    |                                 |- note: chain the optional using '?' to access member 'error' only for non-'nil' base values
    |                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)
 80 |             }

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:79:31: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
 77 |                 await viewModel.startScanning()
 78 |                 XCTAssertNotNil(viewModel.error)
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)
    |                               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'error' of wrapped base type 'DocumentScannerViewModel'
    |                               |- note: chain the optional using '?' to access member 'error' only for non-'nil' base values
    |                               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 80 |             }
 81 |         }

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:79:47: warning: cast from 'DocumentScannerError?' to unrelated type 'CameraPermissionError' always fails
 77 |                 await viewModel.startScanning()
 78 |                 XCTAssertNotNil(viewModel.error)
 79 |                 XCTAssertTrue(viewModel.error is CameraPermissionError)
    |                                               `- warning: cast from 'DocumentScannerError?' to unrelated type 'CameraPermissionError' always fails
 80 |             }
 81 |         }

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:93:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
 91 | 
 92 |         // Step 1: Scan document
 93 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 94 |         let mockImageData = createMockImageData()
 95 |         let mockPage = AppCore.ScannedPage(

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:99:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
 97 |             pageNumber: 1
 98 |         )
 99 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
100 | 
101 |         // Step 2: Verify image data is encrypted in memory (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:124:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
122 |             pageNumber: 1
123 |         )
124 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
125 |         await viewModel.saveDocument()
126 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:125:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
123 |         )
124 |         viewModel.addPage(mockPage)
125 |         await viewModel.saveDocument()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'saveDocument' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
126 | 
127 |         // Step 2: Verify data storage compliance (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:140:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
138 | 
139 |         // Step 1: Start scan with sensitive data
140 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
141 |         let sensitiveImageData = createMockImageData()
142 |         let sensitiveePage = AppCore.ScannedPage(

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:146:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
144 |             pageNumber: 1
145 |         )
146 |         viewModel.addPage(sensitiveePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
147 | 
148 |         // Step 2: Simulate app going to background (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:179:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
177 |             pageNumber: 1
178 |         )
179 |         viewModel.addPage(sensitivePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
180 | 
181 |         // Step 2: Save document with encryption (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:209:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
207 |             pageNumber: 1
208 |         )
209 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
210 | 
211 |         // await viewModel.uploadToCloud(configuration: cloudConfig)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:260:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
258 |             pageNumber: 1
259 |         )
260 |         viewModel.addPage(mockPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
261 |         // await viewModel.saveDocument(retentionPolicy: retentionPolicy)
262 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:280:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
278 | 
279 |         // Step 2: Attempt to start scan without authentication
280 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
281 | 
282 |         // Step 3: Verify biometric prompt appears (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:300:9: error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateAuthFailure' of wrapped base type 'MockSecurityBiometricService'
298 | 
299 |         // Step 2: Simulate authentication failure
300 |         mockBiometricService.simulateAuthFailure()
    |         |- error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateAuthFailure' of wrapped base type 'MockSecurityBiometricService'
    |         |- note: chain the optional using '?' to access member 'simulateAuthFailure' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
301 | 
302 |         await viewModel.startScanning()

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:302:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
300 |         mockBiometricService.simulateAuthFailure()
301 | 
302 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
303 | 
304 |         // Step 3: Verify access is blocked (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:316:9: error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateSuccessfulAuth' of wrapped base type 'MockSecurityBiometricService'
314 | 
315 |         // Step 1: Authenticate successfully
316 |         mockBiometricService.simulateSuccessfulAuth()
    |         |- error: value of optional type 'MockSecurityBiometricService?' must be unwrapped to refer to member 'simulateSuccessfulAuth' of wrapped base type 'MockSecurityBiometricService'
    |         |- note: chain the optional using '?' to access member 'simulateSuccessfulAuth' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
317 |         await viewModel.startScanning()
318 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:317:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
315 |         // Step 1: Authenticate successfully
316 |         mockBiometricService.simulateSuccessfulAuth()
317 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
318 | 
319 |         // Step 2: Simulate session timeout (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:323:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
321 | 
322 |         // Step 3: Attempt another scan
323 |         await viewModel.startScanning()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'startScanning' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'startScanning' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
324 | 
325 |         // Step 4: Verify re-authentication is required

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:342:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
340 |             pageNumber: 1
341 |         )
342 |         viewModel.addPage(originalPage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
343 |         await viewModel.saveDocument()
344 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:343:15: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
341 |         )
342 |         viewModel.addPage(originalPage)
343 |         await viewModel.saveDocument()
    |               |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'saveDocument' of wrapped base type 'DocumentScannerViewModel'
    |               |- note: chain the optional using '?' to access member 'saveDocument' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
344 | 
345 |         // Step 2: Generate integrity hash (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:365:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
363 |             pageNumber: 1
364 |         )
365 |         viewModel.addPage(securePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
366 |         // await viewModel.saveDocumentWithTamperDetection()
367 | 

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:393:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
391 |             pageNumber: 1
392 |         )
393 |         viewModel.addPage(sensitivePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
394 | 
395 |         // Step 2: Process OCR with encryption (not implemented)

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:407:13: warning: initialization of immutable value 'apiConfig' was never used; consider replacing with assignment to '_' or removing it
405 | 
406 |         // Step 1: Configure API with certificate pinning
407 |         let apiConfig = APIConfiguration(
    |             `- warning: initialization of immutable value 'apiConfig' was never used; consider replacing with assignment to '_' or removing it
408 |             enableCertificatePinning: true,
409 |             allowedCertificates: ["api.aiko.com.cert"]

/Users/J/aiko/Tests/Security/Security_DocumentScannerTests.swift:440:9: error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
438 |             pageNumber: 1
439 |         )
440 |         viewModel.addPage(sensitivePage)
    |         |- error: value of optional type 'DocumentScannerViewModel?' must be unwrapped to refer to member 'addPage' of wrapped base type 'DocumentScannerViewModel'
    |         |- note: chain the optional using '?' to access member 'addPage' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
441 | 
442 |         // Step 2: Auto-detect and redact sensitive data (not implemented)
[16/35] Compiling AIKOTests BasicFunctionalityTest.swift
/Users/J/aiko/Tests/ComplianceGuardianTests.swift:44:27: error: argument type 'MockLearningFeedbackLoop' does not conform to expected type 'LearningFeedbackLoop'
 42 |             complianceClassifier: mockComplianceClassifier,
 43 |             explanationEngine: mockSHAPExplainer,
 44 |             feedbackLoop: mockLearningFeedbackLoop,
    |                           `- error: argument type 'MockLearningFeedbackLoop' does not conform to expected type 'LearningFeedbackLoop'
 45 |             policyEngine: mockCompliancePolicyEngine
 46 |         )

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:285:57: warning: result of call to 'createDocument' is unused
283 | 
284 |         // WHEN: Document is created/modified
285 |         try await ComplianceDocumentChainManager.shared.createDocument(document)
    |                                                         `- warning: result of call to 'createDocument' is unused
286 | 
287 |         // THEN: Compliance analysis is triggered automatically

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:282:13: warning: variable 'complianceResult' was never mutated; consider changing to 'let' constant
280 |         }
281 | 
282 |         var complianceResult: GuardianComplianceResult?
    |             `- warning: variable 'complianceResult' was never mutated; consider changing to 'let' constant
283 | 
284 |         // WHEN: Document is created/modified

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:303:28: warning: result of call to 'analyzeDocument' is unused
301 | 
302 |         let document = try await ComplianceDocumentChainManager.shared.createDocument(generateTestDocument())
303 |         try await guardian.analyzeDocument(document)
    |                            `- warning: result of call to 'analyzeDocument' is unused
304 | 
305 |         // WHEN: Making incremental changes

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:312:57: warning: result of call to 'updateDocument' is unused
310 | 
311 |         let modifiedDocument = document.withModification(at: .paragraph(5))
312 |         try await ComplianceDocumentChainManager.shared.updateDocument(modifiedDocument)
    |                                                         `- warning: result of call to 'updateDocument' is unused
313 | 
314 |         // THEN: Only changed sections are re-analyzed

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:358:57: warning: conditional downcast from 'String?' to 'String' does nothing
356 |         let learningEvent = try await LearningLoop.shared.getLastEvent()
357 |         XCTAssertEqual(learningEvent.type, .complianceWarningDismissed)
358 |         XCTAssertEqual(learningEvent.metadata["reason"] as? String, "falsePositive")
    |                                                         `- warning: conditional downcast from 'String?' to 'String' does nothing
359 | 
360 |         // Verify RL reward calculation

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:533:31: warning: result of call to 'analyzeDocument' is unused
531 | 
532 |             // Process documents concurrently
533 |             try await monitor.analyzeDocument(generateLargeTestDocument())
    |                               `- warning: result of call to 'analyzeDocument' is unused
534 |         }
535 | 
[17/35] Compiling AIKOTests ComplianceGuardianTests.swift
/Users/J/aiko/Tests/ComplianceGuardianTests.swift:44:27: error: argument type 'MockLearningFeedbackLoop' does not conform to expected type 'LearningFeedbackLoop'
 42 |             complianceClassifier: mockComplianceClassifier,
 43 |             explanationEngine: mockSHAPExplainer,
 44 |             feedbackLoop: mockLearningFeedbackLoop,
    |                           `- error: argument type 'MockLearningFeedbackLoop' does not conform to expected type 'LearningFeedbackLoop'
 45 |             policyEngine: mockCompliancePolicyEngine
 46 |         )

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:285:57: warning: result of call to 'createDocument' is unused
283 | 
284 |         // WHEN: Document is created/modified
285 |         try await ComplianceDocumentChainManager.shared.createDocument(document)
    |                                                         `- warning: result of call to 'createDocument' is unused
286 | 
287 |         // THEN: Compliance analysis is triggered automatically

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:282:13: warning: variable 'complianceResult' was never mutated; consider changing to 'let' constant
280 |         }
281 | 
282 |         var complianceResult: GuardianComplianceResult?
    |             `- warning: variable 'complianceResult' was never mutated; consider changing to 'let' constant
283 | 
284 |         // WHEN: Document is created/modified

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:303:28: warning: result of call to 'analyzeDocument' is unused
301 | 
302 |         let document = try await ComplianceDocumentChainManager.shared.createDocument(generateTestDocument())
303 |         try await guardian.analyzeDocument(document)
    |                            `- warning: result of call to 'analyzeDocument' is unused
304 | 
305 |         // WHEN: Making incremental changes

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:312:57: warning: result of call to 'updateDocument' is unused
310 | 
311 |         let modifiedDocument = document.withModification(at: .paragraph(5))
312 |         try await ComplianceDocumentChainManager.shared.updateDocument(modifiedDocument)
    |                                                         `- warning: result of call to 'updateDocument' is unused
313 | 
314 |         // THEN: Only changed sections are re-analyzed

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:358:57: warning: conditional downcast from 'String?' to 'String' does nothing
356 |         let learningEvent = try await LearningLoop.shared.getLastEvent()
357 |         XCTAssertEqual(learningEvent.type, .complianceWarningDismissed)
358 |         XCTAssertEqual(learningEvent.metadata["reason"] as? String, "falsePositive")
    |                                                         `- warning: conditional downcast from 'String?' to 'String' does nothing
359 | 
360 |         // Verify RL reward calculation

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:533:31: warning: result of call to 'analyzeDocument' is unused
531 | 
532 |             // Process documents concurrently
533 |             try await monitor.analyzeDocument(generateLargeTestDocument())
    |                               `- warning: result of call to 'analyzeDocument' is unused
534 |         }
535 | 
[18/35] Compiling AIKOTests DocumentExecutionViewModelTests.swift
/Users/J/aiko/Tests/ComplianceGuardianTests.swift:44:27: error: argument type 'MockLearningFeedbackLoop' does not conform to expected type 'LearningFeedbackLoop'
 42 |             complianceClassifier: mockComplianceClassifier,
 43 |             explanationEngine: mockSHAPExplainer,
 44 |             feedbackLoop: mockLearningFeedbackLoop,
    |                           `- error: argument type 'MockLearningFeedbackLoop' does not conform to expected type 'LearningFeedbackLoop'
 45 |             policyEngine: mockCompliancePolicyEngine
 46 |         )

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:285:57: warning: result of call to 'createDocument' is unused
283 | 
284 |         // WHEN: Document is created/modified
285 |         try await ComplianceDocumentChainManager.shared.createDocument(document)
    |                                                         `- warning: result of call to 'createDocument' is unused
286 | 
287 |         // THEN: Compliance analysis is triggered automatically

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:282:13: warning: variable 'complianceResult' was never mutated; consider changing to 'let' constant
280 |         }
281 | 
282 |         var complianceResult: GuardianComplianceResult?
    |             `- warning: variable 'complianceResult' was never mutated; consider changing to 'let' constant
283 | 
284 |         // WHEN: Document is created/modified

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:303:28: warning: result of call to 'analyzeDocument' is unused
301 | 
302 |         let document = try await ComplianceDocumentChainManager.shared.createDocument(generateTestDocument())
303 |         try await guardian.analyzeDocument(document)
    |                            `- warning: result of call to 'analyzeDocument' is unused
304 | 
305 |         // WHEN: Making incremental changes

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:312:57: warning: result of call to 'updateDocument' is unused
310 | 
311 |         let modifiedDocument = document.withModification(at: .paragraph(5))
312 |         try await ComplianceDocumentChainManager.shared.updateDocument(modifiedDocument)
    |                                                         `- warning: result of call to 'updateDocument' is unused
313 | 
314 |         // THEN: Only changed sections are re-analyzed

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:358:57: warning: conditional downcast from 'String?' to 'String' does nothing
356 |         let learningEvent = try await LearningLoop.shared.getLastEvent()
357 |         XCTAssertEqual(learningEvent.type, .complianceWarningDismissed)
358 |         XCTAssertEqual(learningEvent.metadata["reason"] as? String, "falsePositive")
    |                                                         `- warning: conditional downcast from 'String?' to 'String' does nothing
359 | 
360 |         // Verify RL reward calculation

/Users/J/aiko/Tests/ComplianceGuardianTests.swift:533:31: warning: result of call to 'analyzeDocument' is unused
531 | 
532 |             // Process documents concurrently
533 |             try await monitor.analyzeDocument(generateLargeTestDocument())
    |                               `- warning: result of call to 'analyzeDocument' is unused
534 |         }
535 | 
[19/35] Compiling AIKOTests AcquisitionsListViewModelTests.swift
/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:39:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 37 |         // When: Classify each acquisition
 38 |         for acquisition in itAcquisitions {
 39 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 40 | 
 41 |             if context.category == .informationTechnology, context.confidence >= 0.8 {

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:41:37: error: cannot infer contextual base in reference to member 'informationTechnology'
 39 |             let context = try await sut.classifyAcquisition(acquisition)
 40 | 
 41 |             if context.category == .informationTechnology, context.confidence >= 0.8 {
    |                                     `- error: cannot infer contextual base in reference to member 'informationTechnology'
 42 |                 correctClassifications += 1
 43 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:67:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 65 |         // When: Classify each acquisition
 66 |         for acquisition in constructionAcquisitions {
 67 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 68 | 
 69 |             if context.category == .construction, context.confidence >= 0.8 {

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:69:37: error: cannot infer contextual base in reference to member 'construction'
 67 |             let context = try await sut.classifyAcquisition(acquisition)
 68 | 
 69 |             if context.category == .construction, context.confidence >= 0.8 {
    |                                     `- error: cannot infer contextual base in reference to member 'construction'
 70 |                 correctClassifications += 1
 71 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:95:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 93 |         // When: Classify each acquisition
 94 |         for acquisition in servicesAcquisitions {
 95 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 96 | 
 97 |             if context.category == .professionalServices, context.confidence >= 0.6 {

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:97:37: error: cannot infer contextual base in reference to member 'professionalServices'
 95 |             let context = try await sut.classifyAcquisition(acquisition)
 96 | 
 97 |             if context.category == .professionalServices, context.confidence >= 0.6 {
    |                                     `- error: cannot infer contextual base in reference to member 'professionalServices'
 98 |                 correctClassifications += 1
 99 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:116:52: error: extra arguments at positions #1, #4, #5, #6, #7 in call
114 |         }
115 |         // Given: High-confidence IT acquisition
116 |         let highConfidenceIT = AcquisitionAggregate(
    |                                                    `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
117 |             id: UUID(),
118 |             title: "Software Development Services for Cloud-based Cybersecurity Platform",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:117:23: error: missing argument for parameter 'description' in call
115 |         // Given: High-confidence IT acquisition
116 |         let highConfidenceIT = AcquisitionAggregate(
117 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
118 |             title: "Software Development Services for Cloud-based Cybersecurity Platform",
119 |             requirements: "We need comprehensive software development services for a cloud-based cybersecurity platform including database design, network security implementation, and IT infrastructure management.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:119:27: error: cannot convert value of type 'String' to expected argument type '[String]'
117 |             id: UUID(),
118 |             title: "Software Development Services for Cloud-based Cybersecurity Platform",
119 |             requirements: "We need comprehensive software development services for a cloud-based cybersecurity platform including database design, network security implementation, and IT infrastructure management.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
120 |             projectDescription: "This project involves building a complete IT solution with advanced cybersecurity features, cloud computing infrastructure, and comprehensive software licensing.",
121 |             estimatedValue: 500_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:127:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
125 | 
126 |         // When: Classify acquisition
127 |         let context = try await sut.classifyAcquisition(highConfidenceIT)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
128 | 
129 |         // Then: Should have high confidence for clear IT context

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:130:43: error: type 'Equatable' has no member 'informationTechnology'
128 | 
129 |         // Then: Should have high confidence for clear IT context
130 |         XCTAssertEqual(context.category, .informationTechnology,
    |                                           `- error: type 'Equatable' has no member 'informationTechnology'
131 |                        "Should classify as IT with high keyword density")
132 |         XCTAssertGreaterThan(context.confidence, 0.8,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:143:52: error: extra arguments at positions #1, #4, #5, #6, #7 in call
141 |         }
142 |         // Given: Mixed IT/Construction acquisition
143 |         let mixedAcquisition = AcquisitionAggregate(
    |                                                    `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
144 |             id: UUID(),
145 |             title: "Smart Building IT Infrastructure and Construction Management",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:144:23: error: missing argument for parameter 'description' in call
142 |         // Given: Mixed IT/Construction acquisition
143 |         let mixedAcquisition = AcquisitionAggregate(
144 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
145 |             title: "Smart Building IT Infrastructure and Construction Management",
146 |             requirements: "Need both software systems for building management and construction services for facility renovation.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:146:27: error: cannot convert value of type 'String' to expected argument type '[String]'
144 |             id: UUID(),
145 |             title: "Smart Building IT Infrastructure and Construction Management",
146 |             requirements: "Need both software systems for building management and construction services for facility renovation.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
147 |             projectDescription: "Project includes both IT components (network hardware, software development) and construction elements (building renovation, architectural services).",
148 |             estimatedValue: 750_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:154:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
152 | 
153 |         // When: Classify mixed acquisition
154 |         let context = try await sut.classifyAcquisition(mixedAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
155 | 
156 |         // Then: Confidence should be lower for mixed contexts

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:161:25: error: reference to member 'informationTechnology' cannot be resolved without a contextual type
159 | 
160 |         // Should still make a primary categorization
161 |         XCTAssertTrue([.informationTechnology, .construction].contains(context.category),
    |                         `- error: reference to member 'informationTechnology' cannot be resolved without a contextual type
162 |                       "Should categorize to strongest matching context")
163 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:161:49: error: reference to member 'construction' cannot be resolved without a contextual type
159 | 
160 |         // Should still make a primary categorization
161 |         XCTAssertTrue([.informationTechnology, .construction].contains(context.category),
    |                                                 `- error: reference to member 'construction' cannot be resolved without a contextual type
162 |                       "Should categorize to strongest matching context")
163 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:161:72: error: missing argument label 'where:' in call
159 | 
160 |         // Should still make a primary categorization
161 |         XCTAssertTrue([.informationTechnology, .construction].contains(context.category),
    |                                                                        `- error: missing argument label 'where:' in call
162 |                       "Should categorize to strongest matching context")
163 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:174:54: error: extra arguments at positions #1, #4, #5, #6, #7 in call
172 |         }
173 |         // Given: High-value, urgent, specialized acquisition
174 |         let complexAcquisition = AcquisitionAggregate(
    |                                                      `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
175 |             id: UUID(),
176 |             title: "Critical Cybersecurity Infrastructure Upgrade",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:175:23: error: missing argument for parameter 'description' in call
173 |         // Given: High-value, urgent, specialized acquisition
174 |         let complexAcquisition = AcquisitionAggregate(
175 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
176 |             title: "Critical Cybersecurity Infrastructure Upgrade",
177 |             requirements: "Urgent need for specialized cybersecurity expertise and security clearance required. High-value project with strict compliance requirements.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:177:27: error: cannot convert value of type 'String' to expected argument type '[String]'
175 |             id: UUID(),
176 |             title: "Critical Cybersecurity Infrastructure Upgrade",
177 |             requirements: "Urgent need for specialized cybersecurity expertise and security clearance required. High-value project with strict compliance requirements.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
178 |             projectDescription: "Mission-critical cybersecurity upgrade requiring top-secret clearance and specialized skills in advanced persistent threat detection.",
179 |             estimatedValue: 2_000_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:185:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
183 | 
184 |         // When: Extract features
185 |         let context = try await sut.classifyAcquisition(complexAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
186 | 
187 |         // Then: Features should be correctly extracted

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:190:42: error: type 'Equatable' has no member 'urgent'
188 |         XCTAssertEqual(context.acquisitionValue, 2_000_000,
189 |                        "Should extract correct acquisition value")
190 |         XCTAssertEqual(context.urgency, .urgent,
    |                                          `- error: type 'Equatable' has no member 'urgent'
191 |                        "Should detect urgent deadline (14 days)")
192 |         XCTAssertEqual(context.complexity, .high,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:192:45: error: type 'Equatable' has no member 'high'
190 |         XCTAssertEqual(context.urgency, .urgent,
191 |                        "Should detect urgent deadline (14 days)")
192 |         XCTAssertEqual(context.complexity, .high,
    |                                             `- error: type 'Equatable' has no member 'high'
193 |                        "Should detect high complexity based on value and requirements")
194 |         XCTAssertTrue(context.features.requiresSpecializedSkills,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:212:43: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
210 |         )
211 | 
212 |         let urgentContext = try await sut.classifyAcquisition(urgentAcquisition)
    |                                           `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
213 |         XCTAssertEqual(urgentContext.urgency, .urgent, "Should detect urgent deadline")
214 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:213:48: error: type 'Equatable' has no member 'urgent'
211 | 
212 |         let urgentContext = try await sut.classifyAcquisition(urgentAcquisition)
213 |         XCTAssertEqual(urgentContext.urgency, .urgent, "Should detect urgent deadline")
    |                                                `- error: type 'Equatable' has no member 'urgent'
214 | 
215 |         // Test moderate deadline (7-30 days)

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:221:45: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
219 |         )
220 | 
221 |         let moderateContext = try await sut.classifyAcquisition(moderateAcquisition)
    |                                             `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
222 |         XCTAssertEqual(moderateContext.urgency, .moderate, "Should detect moderate deadline")
223 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:222:50: error: type 'Equatable' has no member 'moderate'
220 | 
221 |         let moderateContext = try await sut.classifyAcquisition(moderateAcquisition)
222 |         XCTAssertEqual(moderateContext.urgency, .moderate, "Should detect moderate deadline")
    |                                                  `- error: type 'Equatable' has no member 'moderate'
223 | 
224 |         // Test normal deadline (> 30 days)

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:230:43: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
228 |         )
229 | 
230 |         let normalContext = try await sut.classifyAcquisition(normalAcquisition)
    |                                           `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
231 |         XCTAssertEqual(normalContext.urgency, .normal, "Should detect normal deadline")
232 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:231:48: error: type 'Equatable' has no member 'normal'
229 | 
230 |         let normalContext = try await sut.classifyAcquisition(normalAcquisition)
231 |         XCTAssertEqual(normalContext.urgency, .normal, "Should detect normal deadline")
    |                                                `- error: type 'Equatable' has no member 'normal'
232 |     }
233 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:241:61: error: extra arguments at positions #1, #4, #5, #6, #7 in call
239 |         }
240 |         // Test high complexity (high value + detailed requirements + tight timeline)
241 |         let highComplexityAcquisition = AcquisitionAggregate(
    |                                                             `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
242 |             id: UUID(),
243 |             title: "Enterprise-wide IT Transformation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:242:23: error: missing argument for parameter 'description' in call
240 |         // Test high complexity (high value + detailed requirements + tight timeline)
241 |         let highComplexityAcquisition = AcquisitionAggregate(
242 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
243 |             title: "Enterprise-wide IT Transformation",
244 |             requirements: String(repeating: "Detailed requirements for complex system architecture, integration patterns, security frameworks, compliance protocols, and performance optimization across multiple domains. ", count: 10), // >1000 chars

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:244:27: error: cannot convert value of type 'String' to expected argument type '[String]'
242 |             id: UUID(),
243 |             title: "Enterprise-wide IT Transformation",
244 |             requirements: String(repeating: "Detailed requirements for complex system architecture, integration patterns, security frameworks, compliance protocols, and performance optimization across multiple domains. ", count: 10), // >1000 chars
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
245 |             projectDescription: "Comprehensive enterprise transformation",
246 |             estimatedValue: 5_000_000, // High value

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:251:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
249 |         )
250 | 
251 |         let highContext = try await sut.classifyAcquisition(highComplexityAcquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
252 |         XCTAssertEqual(highContext.complexity, .high, "Should detect high complexity")
253 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:252:49: error: type 'Equatable' has no member 'high'
250 | 
251 |         let highContext = try await sut.classifyAcquisition(highComplexityAcquisition)
252 |         XCTAssertEqual(highContext.complexity, .high, "Should detect high complexity")
    |                                                 `- error: type 'Equatable' has no member 'high'
253 | 
254 |         // Test low complexity (low value + simple requirements)

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:255:60: error: extra arguments at positions #1, #4, #5, #6, #7 in call
253 | 
254 |         // Test low complexity (low value + simple requirements)
255 |         let lowComplexityAcquisition = AcquisitionAggregate(
    |                                                            `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
256 |             id: UUID(),
257 |             title: "Simple IT Support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:256:23: error: missing argument for parameter 'description' in call
254 |         // Test low complexity (low value + simple requirements)
255 |         let lowComplexityAcquisition = AcquisitionAggregate(
256 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
257 |             title: "Simple IT Support",
258 |             requirements: "Basic IT support needed", // <100 chars

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:258:27: error: cannot convert value of type 'String' to expected argument type '[String]'
256 |             id: UUID(),
257 |             title: "Simple IT Support",
258 |             requirements: "Basic IT support needed", // <100 chars
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
259 |             projectDescription: "Simple support request",
260 |             estimatedValue: 5000, // Low value

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:265:40: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
263 |         )
264 | 
265 |         let lowContext = try await sut.classifyAcquisition(lowComplexityAcquisition)
    |                                        `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
266 |         XCTAssertEqual(lowContext.complexity, .low, "Should detect low complexity")
267 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:266:48: error: type 'Equatable' has no member 'low'
264 | 
265 |         let lowContext = try await sut.classifyAcquisition(lowComplexityAcquisition)
266 |         XCTAssertEqual(lowContext.complexity, .low, "Should detect low complexity")
    |                                                `- error: type 'Equatable' has no member 'low'
267 |     }
268 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:279:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
277 | 
278 |         // When: Classify acquisition
279 |         let context = try await sut.classifyAcquisition(acquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
280 | 
281 |         // Then: Should include temporal context

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:304:54: error: extra arguments at positions #1, #4, #5, #6, #7 in call
302 |         }
303 |         // Given: Acquisition with minimal content
304 |         let minimalAcquisition = AcquisitionAggregate(
    |                                                      `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
305 |             id: UUID(),
306 |             title: "",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:305:23: error: missing argument for parameter 'description' in call
303 |         // Given: Acquisition with minimal content
304 |         let minimalAcquisition = AcquisitionAggregate(
305 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
306 |             title: "",
307 |             requirements: nil,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:308:33: error: 'nil' requires a contextual type
306 |             title: "",
307 |             requirements: nil,
308 |             projectDescription: nil,
    |                                 `- error: 'nil' requires a contextual type
309 |             estimatedValue: nil,
310 |             deadline: nil,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:309:29: error: 'nil' requires a contextual type
307 |             requirements: nil,
308 |             projectDescription: nil,
309 |             estimatedValue: nil,
    |                             `- error: 'nil' requires a contextual type
310 |             deadline: nil,
311 |             isRecurring: nil

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:310:23: error: 'nil' requires a contextual type
308 |             projectDescription: nil,
309 |             estimatedValue: nil,
310 |             deadline: nil,
    |                       `- error: 'nil' requires a contextual type
311 |             isRecurring: nil
312 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:311:26: error: 'nil' requires a contextual type
309 |             estimatedValue: nil,
310 |             deadline: nil,
311 |             isRecurring: nil
    |                          `- error: 'nil' requires a contextual type
312 |         )
313 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:315:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
313 | 
314 |         // When: Classify minimal acquisition
315 |         let context = try await sut.classifyAcquisition(minimalAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
316 | 
317 |         // Then: Should fallback to general category with neutral confidence

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:318:43: error: type 'Equatable' has no member 'general'
316 | 
317 |         // Then: Should fallback to general category with neutral confidence
318 |         XCTAssertEqual(context.category, .general,
    |                                           `- error: type 'Equatable' has no member 'general'
319 |                        "Should fallback to general category for minimal content")
320 |         XCTAssertEqual(context.confidence, 0.5, accuracy: 0.1,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:333:51: error: extra arguments at positions #1, #4, #5, #6, #7 in call
331 |         let longContent = String(repeating: "software development cloud computing network security cybersecurity database management IT infrastructure digital transformation ", count: 100) // ~10,000 characters
332 | 
333 |         let longAcquisition = AcquisitionAggregate(
    |                                                   `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
334 |             id: UUID(),
335 |             title: "Enterprise IT Transformation Project",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:334:23: error: missing argument for parameter 'description' in call
332 | 
333 |         let longAcquisition = AcquisitionAggregate(
334 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
335 |             title: "Enterprise IT Transformation Project",
336 |             requirements: longContent,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:336:27: error: cannot convert value of type 'String' to expected argument type '[String]'
334 |             id: UUID(),
335 |             title: "Enterprise IT Transformation Project",
336 |             requirements: longContent,
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
337 |             projectDescription: longContent,
338 |             estimatedValue: 1_000_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:344:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
342 | 
343 |         // When: Classify long acquisition
344 |         let context = try await sut.classifyAcquisition(longAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
345 | 
346 |         // Then: Should handle long content without performance issues

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:347:43: error: type 'Equatable' has no member 'informationTechnology'
345 | 
346 |         // Then: Should handle long content without performance issues
347 |         XCTAssertEqual(context.category, .informationTechnology,
    |                                           `- error: type 'Equatable' has no member 'informationTechnology'
348 |                        "Should correctly classify despite long content")
349 |         XCTAssertGreaterThan(context.confidence, 0.8,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:360:58: error: extra arguments at positions #1, #4, #5, #6, #7 in call
358 |         }
359 |         // Given: Acquisition with special characters and formatting
360 |         let specialCharAcquisition = AcquisitionAggregate(
    |                                                          `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
361 |             id: UUID(),
362 |             title: "IT Services - Software Development & Cloud Computing (Priority: High)",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:361:23: error: missing argument for parameter 'description' in call
359 |         // Given: Acquisition with special characters and formatting
360 |         let specialCharAcquisition = AcquisitionAggregate(
361 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
362 |             title: "IT Services - Software Development & Cloud Computing (Priority: High)",
363 |             requirements: """

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:363:27: error: cannot convert value of type 'String' to expected argument type '[String]'
361 |             id: UUID(),
362 |             title: "IT Services - Software Development & Cloud Computing (Priority: High)",
363 |             requirements: """
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
364 |             • Software development services
365 |             • Cloud computing infrastructure

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:381:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
379 | 
380 |         // When: Classify acquisition with special characters
381 |         let context = try await sut.classifyAcquisition(specialCharAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
382 | 
383 |         // Then: Should handle special characters gracefully

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:384:43: error: type 'Equatable' has no member 'informationTechnology'
382 | 
383 |         // Then: Should handle special characters gracefully
384 |         XCTAssertEqual(context.category, .informationTechnology,
    |                                           `- error: type 'Equatable' has no member 'informationTechnology'
385 |                        "Should classify correctly despite special characters")
386 |         XCTAssertGreaterThan(context.confidence, 0.7,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:404:23: error: 'AcquisitionContext' is ambiguous for type lookup in this context
402 |         let startTime = CFAbsoluteTimeGetCurrent()
403 | 
404 |         var results: [AcquisitionContext] = []
    |                       `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
405 |         for acquisition in acquisitions {
406 |             let context = try await sut.classifyAcquisition(acquisition)

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:406:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
404 |         var results: [AcquisitionContext] = []
405 |         for acquisition in acquisitions {
406 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
407 |             results.append(context)
408 |         }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:430:37: error: extra arguments at positions #1, #4, #5, #6, #7 in call
428 |         deadline: Date? = nil
429 |     ) -> AppCore.AcquisitionAggregate {
430 |         AppCore.AcquisitionAggregate(
    |                                     `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
431 |             id: UUID(),
432 |             title: title,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:431:23: error: missing argument for parameter 'description' in call
429 |     ) -> AppCore.AcquisitionAggregate {
430 |         AppCore.AcquisitionAggregate(
431 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
432 |             title: title,
433 |             requirements: requirements,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:433:27: error: cannot convert value of type 'String?' to expected argument type '[String]?'
431 |             id: UUID(),
432 |             title: title,
433 |             requirements: requirements,
    |                           `- error: cannot convert value of type 'String?' to expected argument type '[String]?'
434 |             projectDescription: description,
435 |             estimatedValue: value,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:443:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
441 |     private func createITAcquisitionTestData() -> [AppCore.AcquisitionAggregate] {
442 |         [
443 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
444 |                 id: UUID(),
445 |                 title: "Software Development Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:444:27: error: missing argument for parameter 'description' in call
442 |         [
443 |             AppCore.AcquisitionAggregate(
444 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
445 |                 title: "Software Development Services",
446 |                 requirements: "Need custom software development with cloud computing and database design",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:446:31: error: cannot convert value of type 'String' to expected argument type '[String]'
444 |                 id: UUID(),
445 |                 title: "Software Development Services",
446 |                 requirements: "Need custom software development with cloud computing and database design",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
447 |                 projectDescription: "Complete IT solution including software programming, network setup, and cybersecurity",
448 |                 estimatedValue: 200_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:452:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
450 |                 isRecurring: false
451 |             ),
452 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
453 |                 id: UUID(),
454 |                 title: "Cybersecurity Infrastructure Upgrade",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:453:27: error: missing argument for parameter 'description' in call
451 |             ),
452 |             AppCore.AcquisitionAggregate(
453 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
454 |                 title: "Cybersecurity Infrastructure Upgrade",
455 |                 requirements: "Comprehensive cybersecurity services including network security and IT support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:455:31: error: cannot convert value of type 'String' to expected argument type '[String]'
453 |                 id: UUID(),
454 |                 title: "Cybersecurity Infrastructure Upgrade",
455 |                 requirements: "Comprehensive cybersecurity services including network security and IT support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
456 |                 projectDescription: "Hardware and software cybersecurity implementation with database management",
457 |                 estimatedValue: 300_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:461:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
459 |                 isRecurring: false
460 |             ),
461 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
462 |                 id: UUID(),
463 |                 title: "Cloud Computing Migration",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:462:27: error: missing argument for parameter 'description' in call
460 |             ),
461 |             AppCore.AcquisitionAggregate(
462 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
463 |                 title: "Cloud Computing Migration",
464 |                 requirements: "Cloud migration services with software development and IT infrastructure support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:464:31: error: cannot convert value of type 'String' to expected argument type '[String]'
462 |                 id: UUID(),
463 |                 title: "Cloud Computing Migration",
464 |                 requirements: "Cloud migration services with software development and IT infrastructure support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
465 |                 projectDescription: "Complete cloud computing solution with network design and database migration",
466 |                 estimatedValue: 150_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:471:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
469 |             ),
470 |             // Add more IT-focused test cases...
471 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
472 |                 id: UUID(),
473 |                 title: "Enterprise Network Hardware Procurement",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:472:27: error: missing argument for parameter 'description' in call
470 |             // Add more IT-focused test cases...
471 |             AppCore.AcquisitionAggregate(
472 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
473 |                 title: "Enterprise Network Hardware Procurement",
474 |                 requirements: "Network equipment and hardware for IT infrastructure with programming support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:474:31: error: cannot convert value of type 'String' to expected argument type '[String]'
472 |                 id: UUID(),
473 |                 title: "Enterprise Network Hardware Procurement",
474 |                 requirements: "Network equipment and hardware for IT infrastructure with programming support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
475 |                 projectDescription: "Complete IT hardware solution including computers, network devices, and software licenses",
476 |                 estimatedValue: 400_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:480:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
478 |                 isRecurring: false
479 |             ),
480 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
481 |                 id: UUID(),
482 |                 title: "Database Management System Implementation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:481:27: error: missing argument for parameter 'description' in call
479 |             ),
480 |             AppCore.AcquisitionAggregate(
481 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
482 |                 title: "Database Management System Implementation",
483 |                 requirements: "Database design and development with cybersecurity and cloud computing integration",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:483:31: error: cannot convert value of type 'String' to expected argument type '[String]'
481 |                 id: UUID(),
482 |                 title: "Database Management System Implementation",
483 |                 requirements: "Database design and development with cybersecurity and cloud computing integration",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
484 |                 projectDescription: "Comprehensive database solution with IT support and software development services",
485 |                 estimatedValue: 250_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:494:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
492 |     private func createConstructionAcquisitionTestData() -> [AppCore.AcquisitionAggregate] {
493 |         [
494 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
495 |                 id: UUID(),
496 |                 title: "Office Building Renovation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:495:27: error: missing argument for parameter 'description' in call
493 |         [
494 |             AppCore.AcquisitionAggregate(
495 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
496 |                 title: "Office Building Renovation",
497 |                 requirements: "Complete building renovation including architectural design and construction management",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:497:31: error: cannot convert value of type 'String' to expected argument type '[String]'
495 |                 id: UUID(),
496 |                 title: "Office Building Renovation",
497 |                 requirements: "Complete building renovation including architectural design and construction management",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
498 |                 projectDescription: "Facility renovation with construction services, building materials, and contractor oversight",
499 |                 estimatedValue: 500_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:503:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
501 |                 isRecurring: false
502 |             ),
503 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
504 |                 id: UUID(),
505 |                 title: "Infrastructure Construction Project",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:504:27: error: missing argument for parameter 'description' in call
502 |             ),
503 |             AppCore.AcquisitionAggregate(
504 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
505 |                 title: "Infrastructure Construction Project",
506 |                 requirements: "New facility construction with engineering services and building system installation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:506:31: error: cannot convert value of type 'String' to expected argument type '[String]'
504 |                 id: UUID(),
505 |                 title: "Infrastructure Construction Project",
506 |                 requirements: "New facility construction with engineering services and building system installation",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
507 |                 projectDescription: "Complete infrastructure project including construction, architectural planning, and facility management",
508 |                 estimatedValue: 1_200_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:512:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
510 |                 isRecurring: false
511 |             ),
512 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
513 |                 id: UUID(),
514 |                 title: "Concrete and Steel Building Materials",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:513:27: error: missing argument for parameter 'description' in call
511 |             ),
512 |             AppCore.AcquisitionAggregate(
513 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
514 |                 title: "Concrete and Steel Building Materials",
515 |                 requirements: "Construction materials procurement including concrete, steel, and building supplies",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:515:31: error: cannot convert value of type 'String' to expected argument type '[String]'
513 |                 id: UUID(),
514 |                 title: "Concrete and Steel Building Materials",
515 |                 requirements: "Construction materials procurement including concrete, steel, and building supplies",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
516 |                 projectDescription: "Building materials for infrastructure project with contractor delivery services",
517 |                 estimatedValue: 300_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:521:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
519 |                 isRecurring: false
520 |             ),
521 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
522 |                 id: UUID(),
523 |                 title: "Architectural Engineering Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:522:27: error: missing argument for parameter 'description' in call
520 |             ),
521 |             AppCore.AcquisitionAggregate(
522 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
523 |                 title: "Architectural Engineering Services",
524 |                 requirements: "Professional architectural and engineering services for facility construction",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:524:31: error: cannot convert value of type 'String' to expected argument type '[String]'
522 |                 id: UUID(),
523 |                 title: "Architectural Engineering Services",
524 |                 requirements: "Professional architectural and engineering services for facility construction",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
525 |                 projectDescription: "Complete engineering and architectural design for building construction project",
526 |                 estimatedValue: 400_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:530:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
528 |                 isRecurring: false
529 |             ),
530 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
531 |                 id: UUID(),
532 |                 title: "Construction Contractor Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:531:27: error: missing argument for parameter 'description' in call
529 |             ),
530 |             AppCore.AcquisitionAggregate(
531 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
532 |                 title: "Construction Contractor Services",
533 |                 requirements: "General contractor services for building renovation and facility construction",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:533:31: error: cannot convert value of type 'String' to expected argument type '[String]'
531 |                 id: UUID(),
532 |                 title: "Construction Contractor Services",
533 |                 requirements: "General contractor services for building renovation and facility construction",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
534 |                 projectDescription: "Comprehensive construction services including renovation, building, and infrastructure work",
535 |                 estimatedValue: 800_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:544:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
542 |     private func createProfessionalServicesTestData() -> [AppCore.AcquisitionAggregate] {
543 |         [
544 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
545 |                 id: UUID(),
546 |                 title: "Management Consulting Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:545:27: error: missing argument for parameter 'description' in call
543 |         [
544 |             AppCore.AcquisitionAggregate(
545 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
546 |                 title: "Management Consulting Services",
547 |                 requirements: "Professional consulting services for advisory assistance and training programs",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:547:31: error: cannot convert value of type 'String' to expected argument type '[String]'
545 |                 id: UUID(),
546 |                 title: "Management Consulting Services",
547 |                 requirements: "Professional consulting services for advisory assistance and training programs",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
548 |                 projectDescription: "Comprehensive consulting with professional services and management support",
549 |                 estimatedValue: 180_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:553:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
551 |                 isRecurring: false
552 |             ),
553 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
554 |                 id: UUID(),
555 |                 title: "Professional Training and Advisory Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:554:27: error: missing argument for parameter 'description' in call
552 |             ),
553 |             AppCore.AcquisitionAggregate(
554 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
555 |                 title: "Professional Training and Advisory Services",
556 |                 requirements: "Training services and advisory assistance for professional development and support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:556:31: error: cannot convert value of type 'String' to expected argument type '[String]'
554 |                 id: UUID(),
555 |                 title: "Professional Training and Advisory Services",
556 |                 requirements: "Training services and advisory assistance for professional development and support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
557 |                 projectDescription: "Professional training programs with consulting and maintenance support services",
558 |                 estimatedValue: 120_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:562:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
560 |                 isRecurring: false
561 |             ),
562 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
563 |                 id: UUID(),
564 |                 title: "Operations Management Support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:563:27: error: missing argument for parameter 'description' in call
561 |             ),
562 |             AppCore.AcquisitionAggregate(
563 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
564 |                 title: "Operations Management Support",
565 |                 requirements: "Professional operations management and advisory consulting services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:565:31: error: cannot convert value of type 'String' to expected argument type '[String]'
563 |                 id: UUID(),
564 |                 title: "Operations Management Support",
565 |                 requirements: "Professional operations management and advisory consulting services",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
566 |                 projectDescription: "Comprehensive management support with professional services and operations consulting",
567 |                 estimatedValue: 220_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:597:48: error: extra arguments at positions #1, #4, #5, #6, #7 in call
595 |             let requirements = "Professional \(selectedKeywords.joined(separator: ", ")) services needed for project \(i)"
596 | 
597 |             return AppCore.AcquisitionAggregate(
    |                                                `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
598 |                 id: UUID(),
599 |                 title: title,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:598:27: error: missing argument for parameter 'description' in call
596 | 
597 |             return AppCore.AcquisitionAggregate(
598 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
599 |                 title: title,
600 |                 requirements: requirements,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:600:31: error: cannot convert value of type 'String' to expected argument type '[String]'
598 |                 id: UUID(),
599 |                 title: title,
600 |                 requirements: requirements,
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
601 |                 projectDescription: "Standard \(category.lowercased()) project with \(selectedKeywords.joined(separator: " and ")) requirements",
602 |                 estimatedValue: Double.random(in: 10000 ... 1_000_000),
[20/35] Compiling AIKOTests AcquisitionContextClassifierTests.swift
/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:39:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 37 |         // When: Classify each acquisition
 38 |         for acquisition in itAcquisitions {
 39 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 40 | 
 41 |             if context.category == .informationTechnology, context.confidence >= 0.8 {

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:41:37: error: cannot infer contextual base in reference to member 'informationTechnology'
 39 |             let context = try await sut.classifyAcquisition(acquisition)
 40 | 
 41 |             if context.category == .informationTechnology, context.confidence >= 0.8 {
    |                                     `- error: cannot infer contextual base in reference to member 'informationTechnology'
 42 |                 correctClassifications += 1
 43 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:67:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 65 |         // When: Classify each acquisition
 66 |         for acquisition in constructionAcquisitions {
 67 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 68 | 
 69 |             if context.category == .construction, context.confidence >= 0.8 {

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:69:37: error: cannot infer contextual base in reference to member 'construction'
 67 |             let context = try await sut.classifyAcquisition(acquisition)
 68 | 
 69 |             if context.category == .construction, context.confidence >= 0.8 {
    |                                     `- error: cannot infer contextual base in reference to member 'construction'
 70 |                 correctClassifications += 1
 71 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:95:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 93 |         // When: Classify each acquisition
 94 |         for acquisition in servicesAcquisitions {
 95 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 96 | 
 97 |             if context.category == .professionalServices, context.confidence >= 0.6 {

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:97:37: error: cannot infer contextual base in reference to member 'professionalServices'
 95 |             let context = try await sut.classifyAcquisition(acquisition)
 96 | 
 97 |             if context.category == .professionalServices, context.confidence >= 0.6 {
    |                                     `- error: cannot infer contextual base in reference to member 'professionalServices'
 98 |                 correctClassifications += 1
 99 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:116:52: error: extra arguments at positions #1, #4, #5, #6, #7 in call
114 |         }
115 |         // Given: High-confidence IT acquisition
116 |         let highConfidenceIT = AcquisitionAggregate(
    |                                                    `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
117 |             id: UUID(),
118 |             title: "Software Development Services for Cloud-based Cybersecurity Platform",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:117:23: error: missing argument for parameter 'description' in call
115 |         // Given: High-confidence IT acquisition
116 |         let highConfidenceIT = AcquisitionAggregate(
117 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
118 |             title: "Software Development Services for Cloud-based Cybersecurity Platform",
119 |             requirements: "We need comprehensive software development services for a cloud-based cybersecurity platform including database design, network security implementation, and IT infrastructure management.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:119:27: error: cannot convert value of type 'String' to expected argument type '[String]'
117 |             id: UUID(),
118 |             title: "Software Development Services for Cloud-based Cybersecurity Platform",
119 |             requirements: "We need comprehensive software development services for a cloud-based cybersecurity platform including database design, network security implementation, and IT infrastructure management.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
120 |             projectDescription: "This project involves building a complete IT solution with advanced cybersecurity features, cloud computing infrastructure, and comprehensive software licensing.",
121 |             estimatedValue: 500_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:127:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
125 | 
126 |         // When: Classify acquisition
127 |         let context = try await sut.classifyAcquisition(highConfidenceIT)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
128 | 
129 |         // Then: Should have high confidence for clear IT context

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:130:43: error: type 'Equatable' has no member 'informationTechnology'
128 | 
129 |         // Then: Should have high confidence for clear IT context
130 |         XCTAssertEqual(context.category, .informationTechnology,
    |                                           `- error: type 'Equatable' has no member 'informationTechnology'
131 |                        "Should classify as IT with high keyword density")
132 |         XCTAssertGreaterThan(context.confidence, 0.8,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:143:52: error: extra arguments at positions #1, #4, #5, #6, #7 in call
141 |         }
142 |         // Given: Mixed IT/Construction acquisition
143 |         let mixedAcquisition = AcquisitionAggregate(
    |                                                    `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
144 |             id: UUID(),
145 |             title: "Smart Building IT Infrastructure and Construction Management",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:144:23: error: missing argument for parameter 'description' in call
142 |         // Given: Mixed IT/Construction acquisition
143 |         let mixedAcquisition = AcquisitionAggregate(
144 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
145 |             title: "Smart Building IT Infrastructure and Construction Management",
146 |             requirements: "Need both software systems for building management and construction services for facility renovation.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:146:27: error: cannot convert value of type 'String' to expected argument type '[String]'
144 |             id: UUID(),
145 |             title: "Smart Building IT Infrastructure and Construction Management",
146 |             requirements: "Need both software systems for building management and construction services for facility renovation.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
147 |             projectDescription: "Project includes both IT components (network hardware, software development) and construction elements (building renovation, architectural services).",
148 |             estimatedValue: 750_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:154:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
152 | 
153 |         // When: Classify mixed acquisition
154 |         let context = try await sut.classifyAcquisition(mixedAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
155 | 
156 |         // Then: Confidence should be lower for mixed contexts

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:161:25: error: reference to member 'informationTechnology' cannot be resolved without a contextual type
159 | 
160 |         // Should still make a primary categorization
161 |         XCTAssertTrue([.informationTechnology, .construction].contains(context.category),
    |                         `- error: reference to member 'informationTechnology' cannot be resolved without a contextual type
162 |                       "Should categorize to strongest matching context")
163 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:161:49: error: reference to member 'construction' cannot be resolved without a contextual type
159 | 
160 |         // Should still make a primary categorization
161 |         XCTAssertTrue([.informationTechnology, .construction].contains(context.category),
    |                                                 `- error: reference to member 'construction' cannot be resolved without a contextual type
162 |                       "Should categorize to strongest matching context")
163 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:161:72: error: missing argument label 'where:' in call
159 | 
160 |         // Should still make a primary categorization
161 |         XCTAssertTrue([.informationTechnology, .construction].contains(context.category),
    |                                                                        `- error: missing argument label 'where:' in call
162 |                       "Should categorize to strongest matching context")
163 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:174:54: error: extra arguments at positions #1, #4, #5, #6, #7 in call
172 |         }
173 |         // Given: High-value, urgent, specialized acquisition
174 |         let complexAcquisition = AcquisitionAggregate(
    |                                                      `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
175 |             id: UUID(),
176 |             title: "Critical Cybersecurity Infrastructure Upgrade",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:175:23: error: missing argument for parameter 'description' in call
173 |         // Given: High-value, urgent, specialized acquisition
174 |         let complexAcquisition = AcquisitionAggregate(
175 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
176 |             title: "Critical Cybersecurity Infrastructure Upgrade",
177 |             requirements: "Urgent need for specialized cybersecurity expertise and security clearance required. High-value project with strict compliance requirements.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:177:27: error: cannot convert value of type 'String' to expected argument type '[String]'
175 |             id: UUID(),
176 |             title: "Critical Cybersecurity Infrastructure Upgrade",
177 |             requirements: "Urgent need for specialized cybersecurity expertise and security clearance required. High-value project with strict compliance requirements.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
178 |             projectDescription: "Mission-critical cybersecurity upgrade requiring top-secret clearance and specialized skills in advanced persistent threat detection.",
179 |             estimatedValue: 2_000_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:185:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
183 | 
184 |         // When: Extract features
185 |         let context = try await sut.classifyAcquisition(complexAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
186 | 
187 |         // Then: Features should be correctly extracted

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:190:42: error: type 'Equatable' has no member 'urgent'
188 |         XCTAssertEqual(context.acquisitionValue, 2_000_000,
189 |                        "Should extract correct acquisition value")
190 |         XCTAssertEqual(context.urgency, .urgent,
    |                                          `- error: type 'Equatable' has no member 'urgent'
191 |                        "Should detect urgent deadline (14 days)")
192 |         XCTAssertEqual(context.complexity, .high,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:192:45: error: type 'Equatable' has no member 'high'
190 |         XCTAssertEqual(context.urgency, .urgent,
191 |                        "Should detect urgent deadline (14 days)")
192 |         XCTAssertEqual(context.complexity, .high,
    |                                             `- error: type 'Equatable' has no member 'high'
193 |                        "Should detect high complexity based on value and requirements")
194 |         XCTAssertTrue(context.features.requiresSpecializedSkills,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:212:43: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
210 |         )
211 | 
212 |         let urgentContext = try await sut.classifyAcquisition(urgentAcquisition)
    |                                           `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
213 |         XCTAssertEqual(urgentContext.urgency, .urgent, "Should detect urgent deadline")
214 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:213:48: error: type 'Equatable' has no member 'urgent'
211 | 
212 |         let urgentContext = try await sut.classifyAcquisition(urgentAcquisition)
213 |         XCTAssertEqual(urgentContext.urgency, .urgent, "Should detect urgent deadline")
    |                                                `- error: type 'Equatable' has no member 'urgent'
214 | 
215 |         // Test moderate deadline (7-30 days)

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:221:45: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
219 |         )
220 | 
221 |         let moderateContext = try await sut.classifyAcquisition(moderateAcquisition)
    |                                             `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
222 |         XCTAssertEqual(moderateContext.urgency, .moderate, "Should detect moderate deadline")
223 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:222:50: error: type 'Equatable' has no member 'moderate'
220 | 
221 |         let moderateContext = try await sut.classifyAcquisition(moderateAcquisition)
222 |         XCTAssertEqual(moderateContext.urgency, .moderate, "Should detect moderate deadline")
    |                                                  `- error: type 'Equatable' has no member 'moderate'
223 | 
224 |         // Test normal deadline (> 30 days)

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:230:43: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
228 |         )
229 | 
230 |         let normalContext = try await sut.classifyAcquisition(normalAcquisition)
    |                                           `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
231 |         XCTAssertEqual(normalContext.urgency, .normal, "Should detect normal deadline")
232 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:231:48: error: type 'Equatable' has no member 'normal'
229 | 
230 |         let normalContext = try await sut.classifyAcquisition(normalAcquisition)
231 |         XCTAssertEqual(normalContext.urgency, .normal, "Should detect normal deadline")
    |                                                `- error: type 'Equatable' has no member 'normal'
232 |     }
233 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:241:61: error: extra arguments at positions #1, #4, #5, #6, #7 in call
239 |         }
240 |         // Test high complexity (high value + detailed requirements + tight timeline)
241 |         let highComplexityAcquisition = AcquisitionAggregate(
    |                                                             `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
242 |             id: UUID(),
243 |             title: "Enterprise-wide IT Transformation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:242:23: error: missing argument for parameter 'description' in call
240 |         // Test high complexity (high value + detailed requirements + tight timeline)
241 |         let highComplexityAcquisition = AcquisitionAggregate(
242 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
243 |             title: "Enterprise-wide IT Transformation",
244 |             requirements: String(repeating: "Detailed requirements for complex system architecture, integration patterns, security frameworks, compliance protocols, and performance optimization across multiple domains. ", count: 10), // >1000 chars

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:244:27: error: cannot convert value of type 'String' to expected argument type '[String]'
242 |             id: UUID(),
243 |             title: "Enterprise-wide IT Transformation",
244 |             requirements: String(repeating: "Detailed requirements for complex system architecture, integration patterns, security frameworks, compliance protocols, and performance optimization across multiple domains. ", count: 10), // >1000 chars
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
245 |             projectDescription: "Comprehensive enterprise transformation",
246 |             estimatedValue: 5_000_000, // High value

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:251:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
249 |         )
250 | 
251 |         let highContext = try await sut.classifyAcquisition(highComplexityAcquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
252 |         XCTAssertEqual(highContext.complexity, .high, "Should detect high complexity")
253 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:252:49: error: type 'Equatable' has no member 'high'
250 | 
251 |         let highContext = try await sut.classifyAcquisition(highComplexityAcquisition)
252 |         XCTAssertEqual(highContext.complexity, .high, "Should detect high complexity")
    |                                                 `- error: type 'Equatable' has no member 'high'
253 | 
254 |         // Test low complexity (low value + simple requirements)

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:255:60: error: extra arguments at positions #1, #4, #5, #6, #7 in call
253 | 
254 |         // Test low complexity (low value + simple requirements)
255 |         let lowComplexityAcquisition = AcquisitionAggregate(
    |                                                            `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
256 |             id: UUID(),
257 |             title: "Simple IT Support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:256:23: error: missing argument for parameter 'description' in call
254 |         // Test low complexity (low value + simple requirements)
255 |         let lowComplexityAcquisition = AcquisitionAggregate(
256 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
257 |             title: "Simple IT Support",
258 |             requirements: "Basic IT support needed", // <100 chars

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:258:27: error: cannot convert value of type 'String' to expected argument type '[String]'
256 |             id: UUID(),
257 |             title: "Simple IT Support",
258 |             requirements: "Basic IT support needed", // <100 chars
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
259 |             projectDescription: "Simple support request",
260 |             estimatedValue: 5000, // Low value

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:265:40: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
263 |         )
264 | 
265 |         let lowContext = try await sut.classifyAcquisition(lowComplexityAcquisition)
    |                                        `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
266 |         XCTAssertEqual(lowContext.complexity, .low, "Should detect low complexity")
267 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:266:48: error: type 'Equatable' has no member 'low'
264 | 
265 |         let lowContext = try await sut.classifyAcquisition(lowComplexityAcquisition)
266 |         XCTAssertEqual(lowContext.complexity, .low, "Should detect low complexity")
    |                                                `- error: type 'Equatable' has no member 'low'
267 |     }
268 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:279:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
277 | 
278 |         // When: Classify acquisition
279 |         let context = try await sut.classifyAcquisition(acquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
280 | 
281 |         // Then: Should include temporal context

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:304:54: error: extra arguments at positions #1, #4, #5, #6, #7 in call
302 |         }
303 |         // Given: Acquisition with minimal content
304 |         let minimalAcquisition = AcquisitionAggregate(
    |                                                      `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
305 |             id: UUID(),
306 |             title: "",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:305:23: error: missing argument for parameter 'description' in call
303 |         // Given: Acquisition with minimal content
304 |         let minimalAcquisition = AcquisitionAggregate(
305 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
306 |             title: "",
307 |             requirements: nil,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:308:33: error: 'nil' requires a contextual type
306 |             title: "",
307 |             requirements: nil,
308 |             projectDescription: nil,
    |                                 `- error: 'nil' requires a contextual type
309 |             estimatedValue: nil,
310 |             deadline: nil,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:309:29: error: 'nil' requires a contextual type
307 |             requirements: nil,
308 |             projectDescription: nil,
309 |             estimatedValue: nil,
    |                             `- error: 'nil' requires a contextual type
310 |             deadline: nil,
311 |             isRecurring: nil

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:310:23: error: 'nil' requires a contextual type
308 |             projectDescription: nil,
309 |             estimatedValue: nil,
310 |             deadline: nil,
    |                       `- error: 'nil' requires a contextual type
311 |             isRecurring: nil
312 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:311:26: error: 'nil' requires a contextual type
309 |             estimatedValue: nil,
310 |             deadline: nil,
311 |             isRecurring: nil
    |                          `- error: 'nil' requires a contextual type
312 |         )
313 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:315:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
313 | 
314 |         // When: Classify minimal acquisition
315 |         let context = try await sut.classifyAcquisition(minimalAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
316 | 
317 |         // Then: Should fallback to general category with neutral confidence

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:318:43: error: type 'Equatable' has no member 'general'
316 | 
317 |         // Then: Should fallback to general category with neutral confidence
318 |         XCTAssertEqual(context.category, .general,
    |                                           `- error: type 'Equatable' has no member 'general'
319 |                        "Should fallback to general category for minimal content")
320 |         XCTAssertEqual(context.confidence, 0.5, accuracy: 0.1,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:333:51: error: extra arguments at positions #1, #4, #5, #6, #7 in call
331 |         let longContent = String(repeating: "software development cloud computing network security cybersecurity database management IT infrastructure digital transformation ", count: 100) // ~10,000 characters
332 | 
333 |         let longAcquisition = AcquisitionAggregate(
    |                                                   `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
334 |             id: UUID(),
335 |             title: "Enterprise IT Transformation Project",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:334:23: error: missing argument for parameter 'description' in call
332 | 
333 |         let longAcquisition = AcquisitionAggregate(
334 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
335 |             title: "Enterprise IT Transformation Project",
336 |             requirements: longContent,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:336:27: error: cannot convert value of type 'String' to expected argument type '[String]'
334 |             id: UUID(),
335 |             title: "Enterprise IT Transformation Project",
336 |             requirements: longContent,
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
337 |             projectDescription: longContent,
338 |             estimatedValue: 1_000_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:344:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
342 | 
343 |         // When: Classify long acquisition
344 |         let context = try await sut.classifyAcquisition(longAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
345 | 
346 |         // Then: Should handle long content without performance issues

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:347:43: error: type 'Equatable' has no member 'informationTechnology'
345 | 
346 |         // Then: Should handle long content without performance issues
347 |         XCTAssertEqual(context.category, .informationTechnology,
    |                                           `- error: type 'Equatable' has no member 'informationTechnology'
348 |                        "Should correctly classify despite long content")
349 |         XCTAssertGreaterThan(context.confidence, 0.8,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:360:58: error: extra arguments at positions #1, #4, #5, #6, #7 in call
358 |         }
359 |         // Given: Acquisition with special characters and formatting
360 |         let specialCharAcquisition = AcquisitionAggregate(
    |                                                          `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
361 |             id: UUID(),
362 |             title: "IT Services - Software Development & Cloud Computing (Priority: High)",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:361:23: error: missing argument for parameter 'description' in call
359 |         // Given: Acquisition with special characters and formatting
360 |         let specialCharAcquisition = AcquisitionAggregate(
361 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
362 |             title: "IT Services - Software Development & Cloud Computing (Priority: High)",
363 |             requirements: """

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:363:27: error: cannot convert value of type 'String' to expected argument type '[String]'
361 |             id: UUID(),
362 |             title: "IT Services - Software Development & Cloud Computing (Priority: High)",
363 |             requirements: """
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
364 |             • Software development services
365 |             • Cloud computing infrastructure

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:381:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
379 | 
380 |         // When: Classify acquisition with special characters
381 |         let context = try await sut.classifyAcquisition(specialCharAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
382 | 
383 |         // Then: Should handle special characters gracefully

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:384:43: error: type 'Equatable' has no member 'informationTechnology'
382 | 
383 |         // Then: Should handle special characters gracefully
384 |         XCTAssertEqual(context.category, .informationTechnology,
    |                                           `- error: type 'Equatable' has no member 'informationTechnology'
385 |                        "Should classify correctly despite special characters")
386 |         XCTAssertGreaterThan(context.confidence, 0.7,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:404:23: error: 'AcquisitionContext' is ambiguous for type lookup in this context
402 |         let startTime = CFAbsoluteTimeGetCurrent()
403 | 
404 |         var results: [AcquisitionContext] = []
    |                       `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
405 |         for acquisition in acquisitions {
406 |             let context = try await sut.classifyAcquisition(acquisition)

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:406:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
404 |         var results: [AcquisitionContext] = []
405 |         for acquisition in acquisitions {
406 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
407 |             results.append(context)
408 |         }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:430:37: error: extra arguments at positions #1, #4, #5, #6, #7 in call
428 |         deadline: Date? = nil
429 |     ) -> AppCore.AcquisitionAggregate {
430 |         AppCore.AcquisitionAggregate(
    |                                     `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
431 |             id: UUID(),
432 |             title: title,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:431:23: error: missing argument for parameter 'description' in call
429 |     ) -> AppCore.AcquisitionAggregate {
430 |         AppCore.AcquisitionAggregate(
431 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
432 |             title: title,
433 |             requirements: requirements,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:433:27: error: cannot convert value of type 'String?' to expected argument type '[String]?'
431 |             id: UUID(),
432 |             title: title,
433 |             requirements: requirements,
    |                           `- error: cannot convert value of type 'String?' to expected argument type '[String]?'
434 |             projectDescription: description,
435 |             estimatedValue: value,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:443:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
441 |     private func createITAcquisitionTestData() -> [AppCore.AcquisitionAggregate] {
442 |         [
443 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
444 |                 id: UUID(),
445 |                 title: "Software Development Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:444:27: error: missing argument for parameter 'description' in call
442 |         [
443 |             AppCore.AcquisitionAggregate(
444 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
445 |                 title: "Software Development Services",
446 |                 requirements: "Need custom software development with cloud computing and database design",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:446:31: error: cannot convert value of type 'String' to expected argument type '[String]'
444 |                 id: UUID(),
445 |                 title: "Software Development Services",
446 |                 requirements: "Need custom software development with cloud computing and database design",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
447 |                 projectDescription: "Complete IT solution including software programming, network setup, and cybersecurity",
448 |                 estimatedValue: 200_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:452:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
450 |                 isRecurring: false
451 |             ),
452 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
453 |                 id: UUID(),
454 |                 title: "Cybersecurity Infrastructure Upgrade",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:453:27: error: missing argument for parameter 'description' in call
451 |             ),
452 |             AppCore.AcquisitionAggregate(
453 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
454 |                 title: "Cybersecurity Infrastructure Upgrade",
455 |                 requirements: "Comprehensive cybersecurity services including network security and IT support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:455:31: error: cannot convert value of type 'String' to expected argument type '[String]'
453 |                 id: UUID(),
454 |                 title: "Cybersecurity Infrastructure Upgrade",
455 |                 requirements: "Comprehensive cybersecurity services including network security and IT support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
456 |                 projectDescription: "Hardware and software cybersecurity implementation with database management",
457 |                 estimatedValue: 300_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:461:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
459 |                 isRecurring: false
460 |             ),
461 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
462 |                 id: UUID(),
463 |                 title: "Cloud Computing Migration",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:462:27: error: missing argument for parameter 'description' in call
460 |             ),
461 |             AppCore.AcquisitionAggregate(
462 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
463 |                 title: "Cloud Computing Migration",
464 |                 requirements: "Cloud migration services with software development and IT infrastructure support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:464:31: error: cannot convert value of type 'String' to expected argument type '[String]'
462 |                 id: UUID(),
463 |                 title: "Cloud Computing Migration",
464 |                 requirements: "Cloud migration services with software development and IT infrastructure support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
465 |                 projectDescription: "Complete cloud computing solution with network design and database migration",
466 |                 estimatedValue: 150_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:471:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
469 |             ),
470 |             // Add more IT-focused test cases...
471 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
472 |                 id: UUID(),
473 |                 title: "Enterprise Network Hardware Procurement",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:472:27: error: missing argument for parameter 'description' in call
470 |             // Add more IT-focused test cases...
471 |             AppCore.AcquisitionAggregate(
472 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
473 |                 title: "Enterprise Network Hardware Procurement",
474 |                 requirements: "Network equipment and hardware for IT infrastructure with programming support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:474:31: error: cannot convert value of type 'String' to expected argument type '[String]'
472 |                 id: UUID(),
473 |                 title: "Enterprise Network Hardware Procurement",
474 |                 requirements: "Network equipment and hardware for IT infrastructure with programming support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
475 |                 projectDescription: "Complete IT hardware solution including computers, network devices, and software licenses",
476 |                 estimatedValue: 400_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:480:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
478 |                 isRecurring: false
479 |             ),
480 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
481 |                 id: UUID(),
482 |                 title: "Database Management System Implementation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:481:27: error: missing argument for parameter 'description' in call
479 |             ),
480 |             AppCore.AcquisitionAggregate(
481 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
482 |                 title: "Database Management System Implementation",
483 |                 requirements: "Database design and development with cybersecurity and cloud computing integration",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:483:31: error: cannot convert value of type 'String' to expected argument type '[String]'
481 |                 id: UUID(),
482 |                 title: "Database Management System Implementation",
483 |                 requirements: "Database design and development with cybersecurity and cloud computing integration",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
484 |                 projectDescription: "Comprehensive database solution with IT support and software development services",
485 |                 estimatedValue: 250_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:494:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
492 |     private func createConstructionAcquisitionTestData() -> [AppCore.AcquisitionAggregate] {
493 |         [
494 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
495 |                 id: UUID(),
496 |                 title: "Office Building Renovation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:495:27: error: missing argument for parameter 'description' in call
493 |         [
494 |             AppCore.AcquisitionAggregate(
495 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
496 |                 title: "Office Building Renovation",
497 |                 requirements: "Complete building renovation including architectural design and construction management",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:497:31: error: cannot convert value of type 'String' to expected argument type '[String]'
495 |                 id: UUID(),
496 |                 title: "Office Building Renovation",
497 |                 requirements: "Complete building renovation including architectural design and construction management",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
498 |                 projectDescription: "Facility renovation with construction services, building materials, and contractor oversight",
499 |                 estimatedValue: 500_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:503:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
501 |                 isRecurring: false
502 |             ),
503 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
504 |                 id: UUID(),
505 |                 title: "Infrastructure Construction Project",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:504:27: error: missing argument for parameter 'description' in call
502 |             ),
503 |             AppCore.AcquisitionAggregate(
504 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
505 |                 title: "Infrastructure Construction Project",
506 |                 requirements: "New facility construction with engineering services and building system installation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:506:31: error: cannot convert value of type 'String' to expected argument type '[String]'
504 |                 id: UUID(),
505 |                 title: "Infrastructure Construction Project",
506 |                 requirements: "New facility construction with engineering services and building system installation",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
507 |                 projectDescription: "Complete infrastructure project including construction, architectural planning, and facility management",
508 |                 estimatedValue: 1_200_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:512:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
510 |                 isRecurring: false
511 |             ),
512 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
513 |                 id: UUID(),
514 |                 title: "Concrete and Steel Building Materials",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:513:27: error: missing argument for parameter 'description' in call
511 |             ),
512 |             AppCore.AcquisitionAggregate(
513 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
514 |                 title: "Concrete and Steel Building Materials",
515 |                 requirements: "Construction materials procurement including concrete, steel, and building supplies",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:515:31: error: cannot convert value of type 'String' to expected argument type '[String]'
513 |                 id: UUID(),
514 |                 title: "Concrete and Steel Building Materials",
515 |                 requirements: "Construction materials procurement including concrete, steel, and building supplies",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
516 |                 projectDescription: "Building materials for infrastructure project with contractor delivery services",
517 |                 estimatedValue: 300_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:521:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
519 |                 isRecurring: false
520 |             ),
521 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
522 |                 id: UUID(),
523 |                 title: "Architectural Engineering Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:522:27: error: missing argument for parameter 'description' in call
520 |             ),
521 |             AppCore.AcquisitionAggregate(
522 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
523 |                 title: "Architectural Engineering Services",
524 |                 requirements: "Professional architectural and engineering services for facility construction",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:524:31: error: cannot convert value of type 'String' to expected argument type '[String]'
522 |                 id: UUID(),
523 |                 title: "Architectural Engineering Services",
524 |                 requirements: "Professional architectural and engineering services for facility construction",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
525 |                 projectDescription: "Complete engineering and architectural design for building construction project",
526 |                 estimatedValue: 400_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:530:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
528 |                 isRecurring: false
529 |             ),
530 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
531 |                 id: UUID(),
532 |                 title: "Construction Contractor Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:531:27: error: missing argument for parameter 'description' in call
529 |             ),
530 |             AppCore.AcquisitionAggregate(
531 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
532 |                 title: "Construction Contractor Services",
533 |                 requirements: "General contractor services for building renovation and facility construction",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:533:31: error: cannot convert value of type 'String' to expected argument type '[String]'
531 |                 id: UUID(),
532 |                 title: "Construction Contractor Services",
533 |                 requirements: "General contractor services for building renovation and facility construction",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
534 |                 projectDescription: "Comprehensive construction services including renovation, building, and infrastructure work",
535 |                 estimatedValue: 800_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:544:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
542 |     private func createProfessionalServicesTestData() -> [AppCore.AcquisitionAggregate] {
543 |         [
544 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
545 |                 id: UUID(),
546 |                 title: "Management Consulting Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:545:27: error: missing argument for parameter 'description' in call
543 |         [
544 |             AppCore.AcquisitionAggregate(
545 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
546 |                 title: "Management Consulting Services",
547 |                 requirements: "Professional consulting services for advisory assistance and training programs",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:547:31: error: cannot convert value of type 'String' to expected argument type '[String]'
545 |                 id: UUID(),
546 |                 title: "Management Consulting Services",
547 |                 requirements: "Professional consulting services for advisory assistance and training programs",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
548 |                 projectDescription: "Comprehensive consulting with professional services and management support",
549 |                 estimatedValue: 180_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:553:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
551 |                 isRecurring: false
552 |             ),
553 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
554 |                 id: UUID(),
555 |                 title: "Professional Training and Advisory Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:554:27: error: missing argument for parameter 'description' in call
552 |             ),
553 |             AppCore.AcquisitionAggregate(
554 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
555 |                 title: "Professional Training and Advisory Services",
556 |                 requirements: "Training services and advisory assistance for professional development and support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:556:31: error: cannot convert value of type 'String' to expected argument type '[String]'
554 |                 id: UUID(),
555 |                 title: "Professional Training and Advisory Services",
556 |                 requirements: "Training services and advisory assistance for professional development and support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
557 |                 projectDescription: "Professional training programs with consulting and maintenance support services",
558 |                 estimatedValue: 120_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:562:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
560 |                 isRecurring: false
561 |             ),
562 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
563 |                 id: UUID(),
564 |                 title: "Operations Management Support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:563:27: error: missing argument for parameter 'description' in call
561 |             ),
562 |             AppCore.AcquisitionAggregate(
563 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
564 |                 title: "Operations Management Support",
565 |                 requirements: "Professional operations management and advisory consulting services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:565:31: error: cannot convert value of type 'String' to expected argument type '[String]'
563 |                 id: UUID(),
564 |                 title: "Operations Management Support",
565 |                 requirements: "Professional operations management and advisory consulting services",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
566 |                 projectDescription: "Comprehensive management support with professional services and operations consulting",
567 |                 estimatedValue: 220_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:597:48: error: extra arguments at positions #1, #4, #5, #6, #7 in call
595 |             let requirements = "Professional \(selectedKeywords.joined(separator: ", ")) services needed for project \(i)"
596 | 
597 |             return AppCore.AcquisitionAggregate(
    |                                                `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
598 |                 id: UUID(),
599 |                 title: title,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:598:27: error: missing argument for parameter 'description' in call
596 | 
597 |             return AppCore.AcquisitionAggregate(
598 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
599 |                 title: title,
600 |                 requirements: requirements,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:600:31: error: cannot convert value of type 'String' to expected argument type '[String]'
598 |                 id: UUID(),
599 |                 title: title,
600 |                 requirements: requirements,
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
601 |                 projectDescription: "Standard \(category.lowercased()) project with \(selectedKeywords.joined(separator: " and ")) requirements",
602 |                 estimatedValue: Double.random(in: 10000 ... 1_000_000),
[21/35] Compiling AIKOTests AdaptiveFormEdgeCasesTests.swift
/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:39:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 37 |         // When: Classify each acquisition
 38 |         for acquisition in itAcquisitions {
 39 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 40 | 
 41 |             if context.category == .informationTechnology, context.confidence >= 0.8 {

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:41:37: error: cannot infer contextual base in reference to member 'informationTechnology'
 39 |             let context = try await sut.classifyAcquisition(acquisition)
 40 | 
 41 |             if context.category == .informationTechnology, context.confidence >= 0.8 {
    |                                     `- error: cannot infer contextual base in reference to member 'informationTechnology'
 42 |                 correctClassifications += 1
 43 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:67:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 65 |         // When: Classify each acquisition
 66 |         for acquisition in constructionAcquisitions {
 67 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 68 | 
 69 |             if context.category == .construction, context.confidence >= 0.8 {

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:69:37: error: cannot infer contextual base in reference to member 'construction'
 67 |             let context = try await sut.classifyAcquisition(acquisition)
 68 | 
 69 |             if context.category == .construction, context.confidence >= 0.8 {
    |                                     `- error: cannot infer contextual base in reference to member 'construction'
 70 |                 correctClassifications += 1
 71 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:95:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 93 |         // When: Classify each acquisition
 94 |         for acquisition in servicesAcquisitions {
 95 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 96 | 
 97 |             if context.category == .professionalServices, context.confidence >= 0.6 {

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:97:37: error: cannot infer contextual base in reference to member 'professionalServices'
 95 |             let context = try await sut.classifyAcquisition(acquisition)
 96 | 
 97 |             if context.category == .professionalServices, context.confidence >= 0.6 {
    |                                     `- error: cannot infer contextual base in reference to member 'professionalServices'
 98 |                 correctClassifications += 1
 99 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:116:52: error: extra arguments at positions #1, #4, #5, #6, #7 in call
114 |         }
115 |         // Given: High-confidence IT acquisition
116 |         let highConfidenceIT = AcquisitionAggregate(
    |                                                    `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
117 |             id: UUID(),
118 |             title: "Software Development Services for Cloud-based Cybersecurity Platform",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:117:23: error: missing argument for parameter 'description' in call
115 |         // Given: High-confidence IT acquisition
116 |         let highConfidenceIT = AcquisitionAggregate(
117 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
118 |             title: "Software Development Services for Cloud-based Cybersecurity Platform",
119 |             requirements: "We need comprehensive software development services for a cloud-based cybersecurity platform including database design, network security implementation, and IT infrastructure management.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:119:27: error: cannot convert value of type 'String' to expected argument type '[String]'
117 |             id: UUID(),
118 |             title: "Software Development Services for Cloud-based Cybersecurity Platform",
119 |             requirements: "We need comprehensive software development services for a cloud-based cybersecurity platform including database design, network security implementation, and IT infrastructure management.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
120 |             projectDescription: "This project involves building a complete IT solution with advanced cybersecurity features, cloud computing infrastructure, and comprehensive software licensing.",
121 |             estimatedValue: 500_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:127:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
125 | 
126 |         // When: Classify acquisition
127 |         let context = try await sut.classifyAcquisition(highConfidenceIT)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
128 | 
129 |         // Then: Should have high confidence for clear IT context

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:130:43: error: type 'Equatable' has no member 'informationTechnology'
128 | 
129 |         // Then: Should have high confidence for clear IT context
130 |         XCTAssertEqual(context.category, .informationTechnology,
    |                                           `- error: type 'Equatable' has no member 'informationTechnology'
131 |                        "Should classify as IT with high keyword density")
132 |         XCTAssertGreaterThan(context.confidence, 0.8,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:143:52: error: extra arguments at positions #1, #4, #5, #6, #7 in call
141 |         }
142 |         // Given: Mixed IT/Construction acquisition
143 |         let mixedAcquisition = AcquisitionAggregate(
    |                                                    `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
144 |             id: UUID(),
145 |             title: "Smart Building IT Infrastructure and Construction Management",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:144:23: error: missing argument for parameter 'description' in call
142 |         // Given: Mixed IT/Construction acquisition
143 |         let mixedAcquisition = AcquisitionAggregate(
144 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
145 |             title: "Smart Building IT Infrastructure and Construction Management",
146 |             requirements: "Need both software systems for building management and construction services for facility renovation.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:146:27: error: cannot convert value of type 'String' to expected argument type '[String]'
144 |             id: UUID(),
145 |             title: "Smart Building IT Infrastructure and Construction Management",
146 |             requirements: "Need both software systems for building management and construction services for facility renovation.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
147 |             projectDescription: "Project includes both IT components (network hardware, software development) and construction elements (building renovation, architectural services).",
148 |             estimatedValue: 750_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:154:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
152 | 
153 |         // When: Classify mixed acquisition
154 |         let context = try await sut.classifyAcquisition(mixedAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
155 | 
156 |         // Then: Confidence should be lower for mixed contexts

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:161:25: error: reference to member 'informationTechnology' cannot be resolved without a contextual type
159 | 
160 |         // Should still make a primary categorization
161 |         XCTAssertTrue([.informationTechnology, .construction].contains(context.category),
    |                         `- error: reference to member 'informationTechnology' cannot be resolved without a contextual type
162 |                       "Should categorize to strongest matching context")
163 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:161:49: error: reference to member 'construction' cannot be resolved without a contextual type
159 | 
160 |         // Should still make a primary categorization
161 |         XCTAssertTrue([.informationTechnology, .construction].contains(context.category),
    |                                                 `- error: reference to member 'construction' cannot be resolved without a contextual type
162 |                       "Should categorize to strongest matching context")
163 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:161:72: error: missing argument label 'where:' in call
159 | 
160 |         // Should still make a primary categorization
161 |         XCTAssertTrue([.informationTechnology, .construction].contains(context.category),
    |                                                                        `- error: missing argument label 'where:' in call
162 |                       "Should categorize to strongest matching context")
163 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:174:54: error: extra arguments at positions #1, #4, #5, #6, #7 in call
172 |         }
173 |         // Given: High-value, urgent, specialized acquisition
174 |         let complexAcquisition = AcquisitionAggregate(
    |                                                      `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
175 |             id: UUID(),
176 |             title: "Critical Cybersecurity Infrastructure Upgrade",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:175:23: error: missing argument for parameter 'description' in call
173 |         // Given: High-value, urgent, specialized acquisition
174 |         let complexAcquisition = AcquisitionAggregate(
175 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
176 |             title: "Critical Cybersecurity Infrastructure Upgrade",
177 |             requirements: "Urgent need for specialized cybersecurity expertise and security clearance required. High-value project with strict compliance requirements.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:177:27: error: cannot convert value of type 'String' to expected argument type '[String]'
175 |             id: UUID(),
176 |             title: "Critical Cybersecurity Infrastructure Upgrade",
177 |             requirements: "Urgent need for specialized cybersecurity expertise and security clearance required. High-value project with strict compliance requirements.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
178 |             projectDescription: "Mission-critical cybersecurity upgrade requiring top-secret clearance and specialized skills in advanced persistent threat detection.",
179 |             estimatedValue: 2_000_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:185:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
183 | 
184 |         // When: Extract features
185 |         let context = try await sut.classifyAcquisition(complexAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
186 | 
187 |         // Then: Features should be correctly extracted

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:190:42: error: type 'Equatable' has no member 'urgent'
188 |         XCTAssertEqual(context.acquisitionValue, 2_000_000,
189 |                        "Should extract correct acquisition value")
190 |         XCTAssertEqual(context.urgency, .urgent,
    |                                          `- error: type 'Equatable' has no member 'urgent'
191 |                        "Should detect urgent deadline (14 days)")
192 |         XCTAssertEqual(context.complexity, .high,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:192:45: error: type 'Equatable' has no member 'high'
190 |         XCTAssertEqual(context.urgency, .urgent,
191 |                        "Should detect urgent deadline (14 days)")
192 |         XCTAssertEqual(context.complexity, .high,
    |                                             `- error: type 'Equatable' has no member 'high'
193 |                        "Should detect high complexity based on value and requirements")
194 |         XCTAssertTrue(context.features.requiresSpecializedSkills,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:212:43: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
210 |         )
211 | 
212 |         let urgentContext = try await sut.classifyAcquisition(urgentAcquisition)
    |                                           `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
213 |         XCTAssertEqual(urgentContext.urgency, .urgent, "Should detect urgent deadline")
214 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:213:48: error: type 'Equatable' has no member 'urgent'
211 | 
212 |         let urgentContext = try await sut.classifyAcquisition(urgentAcquisition)
213 |         XCTAssertEqual(urgentContext.urgency, .urgent, "Should detect urgent deadline")
    |                                                `- error: type 'Equatable' has no member 'urgent'
214 | 
215 |         // Test moderate deadline (7-30 days)

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:221:45: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
219 |         )
220 | 
221 |         let moderateContext = try await sut.classifyAcquisition(moderateAcquisition)
    |                                             `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
222 |         XCTAssertEqual(moderateContext.urgency, .moderate, "Should detect moderate deadline")
223 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:222:50: error: type 'Equatable' has no member 'moderate'
220 | 
221 |         let moderateContext = try await sut.classifyAcquisition(moderateAcquisition)
222 |         XCTAssertEqual(moderateContext.urgency, .moderate, "Should detect moderate deadline")
    |                                                  `- error: type 'Equatable' has no member 'moderate'
223 | 
224 |         // Test normal deadline (> 30 days)

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:230:43: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
228 |         )
229 | 
230 |         let normalContext = try await sut.classifyAcquisition(normalAcquisition)
    |                                           `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
231 |         XCTAssertEqual(normalContext.urgency, .normal, "Should detect normal deadline")
232 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:231:48: error: type 'Equatable' has no member 'normal'
229 | 
230 |         let normalContext = try await sut.classifyAcquisition(normalAcquisition)
231 |         XCTAssertEqual(normalContext.urgency, .normal, "Should detect normal deadline")
    |                                                `- error: type 'Equatable' has no member 'normal'
232 |     }
233 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:241:61: error: extra arguments at positions #1, #4, #5, #6, #7 in call
239 |         }
240 |         // Test high complexity (high value + detailed requirements + tight timeline)
241 |         let highComplexityAcquisition = AcquisitionAggregate(
    |                                                             `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
242 |             id: UUID(),
243 |             title: "Enterprise-wide IT Transformation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:242:23: error: missing argument for parameter 'description' in call
240 |         // Test high complexity (high value + detailed requirements + tight timeline)
241 |         let highComplexityAcquisition = AcquisitionAggregate(
242 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
243 |             title: "Enterprise-wide IT Transformation",
244 |             requirements: String(repeating: "Detailed requirements for complex system architecture, integration patterns, security frameworks, compliance protocols, and performance optimization across multiple domains. ", count: 10), // >1000 chars

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:244:27: error: cannot convert value of type 'String' to expected argument type '[String]'
242 |             id: UUID(),
243 |             title: "Enterprise-wide IT Transformation",
244 |             requirements: String(repeating: "Detailed requirements for complex system architecture, integration patterns, security frameworks, compliance protocols, and performance optimization across multiple domains. ", count: 10), // >1000 chars
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
245 |             projectDescription: "Comprehensive enterprise transformation",
246 |             estimatedValue: 5_000_000, // High value

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:251:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
249 |         )
250 | 
251 |         let highContext = try await sut.classifyAcquisition(highComplexityAcquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
252 |         XCTAssertEqual(highContext.complexity, .high, "Should detect high complexity")
253 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:252:49: error: type 'Equatable' has no member 'high'
250 | 
251 |         let highContext = try await sut.classifyAcquisition(highComplexityAcquisition)
252 |         XCTAssertEqual(highContext.complexity, .high, "Should detect high complexity")
    |                                                 `- error: type 'Equatable' has no member 'high'
253 | 
254 |         // Test low complexity (low value + simple requirements)

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:255:60: error: extra arguments at positions #1, #4, #5, #6, #7 in call
253 | 
254 |         // Test low complexity (low value + simple requirements)
255 |         let lowComplexityAcquisition = AcquisitionAggregate(
    |                                                            `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
256 |             id: UUID(),
257 |             title: "Simple IT Support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:256:23: error: missing argument for parameter 'description' in call
254 |         // Test low complexity (low value + simple requirements)
255 |         let lowComplexityAcquisition = AcquisitionAggregate(
256 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
257 |             title: "Simple IT Support",
258 |             requirements: "Basic IT support needed", // <100 chars

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:258:27: error: cannot convert value of type 'String' to expected argument type '[String]'
256 |             id: UUID(),
257 |             title: "Simple IT Support",
258 |             requirements: "Basic IT support needed", // <100 chars
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
259 |             projectDescription: "Simple support request",
260 |             estimatedValue: 5000, // Low value

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:265:40: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
263 |         )
264 | 
265 |         let lowContext = try await sut.classifyAcquisition(lowComplexityAcquisition)
    |                                        `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
266 |         XCTAssertEqual(lowContext.complexity, .low, "Should detect low complexity")
267 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:266:48: error: type 'Equatable' has no member 'low'
264 | 
265 |         let lowContext = try await sut.classifyAcquisition(lowComplexityAcquisition)
266 |         XCTAssertEqual(lowContext.complexity, .low, "Should detect low complexity")
    |                                                `- error: type 'Equatable' has no member 'low'
267 |     }
268 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:279:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
277 | 
278 |         // When: Classify acquisition
279 |         let context = try await sut.classifyAcquisition(acquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
280 | 
281 |         // Then: Should include temporal context

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:304:54: error: extra arguments at positions #1, #4, #5, #6, #7 in call
302 |         }
303 |         // Given: Acquisition with minimal content
304 |         let minimalAcquisition = AcquisitionAggregate(
    |                                                      `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
305 |             id: UUID(),
306 |             title: "",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:305:23: error: missing argument for parameter 'description' in call
303 |         // Given: Acquisition with minimal content
304 |         let minimalAcquisition = AcquisitionAggregate(
305 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
306 |             title: "",
307 |             requirements: nil,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:308:33: error: 'nil' requires a contextual type
306 |             title: "",
307 |             requirements: nil,
308 |             projectDescription: nil,
    |                                 `- error: 'nil' requires a contextual type
309 |             estimatedValue: nil,
310 |             deadline: nil,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:309:29: error: 'nil' requires a contextual type
307 |             requirements: nil,
308 |             projectDescription: nil,
309 |             estimatedValue: nil,
    |                             `- error: 'nil' requires a contextual type
310 |             deadline: nil,
311 |             isRecurring: nil

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:310:23: error: 'nil' requires a contextual type
308 |             projectDescription: nil,
309 |             estimatedValue: nil,
310 |             deadline: nil,
    |                       `- error: 'nil' requires a contextual type
311 |             isRecurring: nil
312 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:311:26: error: 'nil' requires a contextual type
309 |             estimatedValue: nil,
310 |             deadline: nil,
311 |             isRecurring: nil
    |                          `- error: 'nil' requires a contextual type
312 |         )
313 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:315:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
313 | 
314 |         // When: Classify minimal acquisition
315 |         let context = try await sut.classifyAcquisition(minimalAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
316 | 
317 |         // Then: Should fallback to general category with neutral confidence

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:318:43: error: type 'Equatable' has no member 'general'
316 | 
317 |         // Then: Should fallback to general category with neutral confidence
318 |         XCTAssertEqual(context.category, .general,
    |                                           `- error: type 'Equatable' has no member 'general'
319 |                        "Should fallback to general category for minimal content")
320 |         XCTAssertEqual(context.confidence, 0.5, accuracy: 0.1,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:333:51: error: extra arguments at positions #1, #4, #5, #6, #7 in call
331 |         let longContent = String(repeating: "software development cloud computing network security cybersecurity database management IT infrastructure digital transformation ", count: 100) // ~10,000 characters
332 | 
333 |         let longAcquisition = AcquisitionAggregate(
    |                                                   `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
334 |             id: UUID(),
335 |             title: "Enterprise IT Transformation Project",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:334:23: error: missing argument for parameter 'description' in call
332 | 
333 |         let longAcquisition = AcquisitionAggregate(
334 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
335 |             title: "Enterprise IT Transformation Project",
336 |             requirements: longContent,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:336:27: error: cannot convert value of type 'String' to expected argument type '[String]'
334 |             id: UUID(),
335 |             title: "Enterprise IT Transformation Project",
336 |             requirements: longContent,
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
337 |             projectDescription: longContent,
338 |             estimatedValue: 1_000_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:344:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
342 | 
343 |         // When: Classify long acquisition
344 |         let context = try await sut.classifyAcquisition(longAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
345 | 
346 |         // Then: Should handle long content without performance issues

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:347:43: error: type 'Equatable' has no member 'informationTechnology'
345 | 
346 |         // Then: Should handle long content without performance issues
347 |         XCTAssertEqual(context.category, .informationTechnology,
    |                                           `- error: type 'Equatable' has no member 'informationTechnology'
348 |                        "Should correctly classify despite long content")
349 |         XCTAssertGreaterThan(context.confidence, 0.8,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:360:58: error: extra arguments at positions #1, #4, #5, #6, #7 in call
358 |         }
359 |         // Given: Acquisition with special characters and formatting
360 |         let specialCharAcquisition = AcquisitionAggregate(
    |                                                          `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
361 |             id: UUID(),
362 |             title: "IT Services - Software Development & Cloud Computing (Priority: High)",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:361:23: error: missing argument for parameter 'description' in call
359 |         // Given: Acquisition with special characters and formatting
360 |         let specialCharAcquisition = AcquisitionAggregate(
361 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
362 |             title: "IT Services - Software Development & Cloud Computing (Priority: High)",
363 |             requirements: """

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:363:27: error: cannot convert value of type 'String' to expected argument type '[String]'
361 |             id: UUID(),
362 |             title: "IT Services - Software Development & Cloud Computing (Priority: High)",
363 |             requirements: """
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
364 |             • Software development services
365 |             • Cloud computing infrastructure

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:381:37: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
379 | 
380 |         // When: Classify acquisition with special characters
381 |         let context = try await sut.classifyAcquisition(specialCharAcquisition)
    |                                     `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
382 | 
383 |         // Then: Should handle special characters gracefully

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:384:43: error: type 'Equatable' has no member 'informationTechnology'
382 | 
383 |         // Then: Should handle special characters gracefully
384 |         XCTAssertEqual(context.category, .informationTechnology,
    |                                           `- error: type 'Equatable' has no member 'informationTechnology'
385 |                        "Should classify correctly despite special characters")
386 |         XCTAssertGreaterThan(context.confidence, 0.7,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:404:23: error: 'AcquisitionContext' is ambiguous for type lookup in this context
402 |         let startTime = CFAbsoluteTimeGetCurrent()
403 | 
404 |         var results: [AcquisitionContext] = []
    |                       `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
405 |         for acquisition in acquisitions {
406 |             let context = try await sut.classifyAcquisition(acquisition)

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:406:41: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
404 |         var results: [AcquisitionContext] = []
405 |         for acquisition in acquisitions {
406 |             let context = try await sut.classifyAcquisition(acquisition)
    |                                         `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
407 |             results.append(context)
408 |         }

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:430:37: error: extra arguments at positions #1, #4, #5, #6, #7 in call
428 |         deadline: Date? = nil
429 |     ) -> AppCore.AcquisitionAggregate {
430 |         AppCore.AcquisitionAggregate(
    |                                     `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
431 |             id: UUID(),
432 |             title: title,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:431:23: error: missing argument for parameter 'description' in call
429 |     ) -> AppCore.AcquisitionAggregate {
430 |         AppCore.AcquisitionAggregate(
431 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
432 |             title: title,
433 |             requirements: requirements,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:433:27: error: cannot convert value of type 'String?' to expected argument type '[String]?'
431 |             id: UUID(),
432 |             title: title,
433 |             requirements: requirements,
    |                           `- error: cannot convert value of type 'String?' to expected argument type '[String]?'
434 |             projectDescription: description,
435 |             estimatedValue: value,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:443:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
441 |     private func createITAcquisitionTestData() -> [AppCore.AcquisitionAggregate] {
442 |         [
443 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
444 |                 id: UUID(),
445 |                 title: "Software Development Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:444:27: error: missing argument for parameter 'description' in call
442 |         [
443 |             AppCore.AcquisitionAggregate(
444 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
445 |                 title: "Software Development Services",
446 |                 requirements: "Need custom software development with cloud computing and database design",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:446:31: error: cannot convert value of type 'String' to expected argument type '[String]'
444 |                 id: UUID(),
445 |                 title: "Software Development Services",
446 |                 requirements: "Need custom software development with cloud computing and database design",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
447 |                 projectDescription: "Complete IT solution including software programming, network setup, and cybersecurity",
448 |                 estimatedValue: 200_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:452:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
450 |                 isRecurring: false
451 |             ),
452 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
453 |                 id: UUID(),
454 |                 title: "Cybersecurity Infrastructure Upgrade",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:453:27: error: missing argument for parameter 'description' in call
451 |             ),
452 |             AppCore.AcquisitionAggregate(
453 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
454 |                 title: "Cybersecurity Infrastructure Upgrade",
455 |                 requirements: "Comprehensive cybersecurity services including network security and IT support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:455:31: error: cannot convert value of type 'String' to expected argument type '[String]'
453 |                 id: UUID(),
454 |                 title: "Cybersecurity Infrastructure Upgrade",
455 |                 requirements: "Comprehensive cybersecurity services including network security and IT support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
456 |                 projectDescription: "Hardware and software cybersecurity implementation with database management",
457 |                 estimatedValue: 300_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:461:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
459 |                 isRecurring: false
460 |             ),
461 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
462 |                 id: UUID(),
463 |                 title: "Cloud Computing Migration",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:462:27: error: missing argument for parameter 'description' in call
460 |             ),
461 |             AppCore.AcquisitionAggregate(
462 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
463 |                 title: "Cloud Computing Migration",
464 |                 requirements: "Cloud migration services with software development and IT infrastructure support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:464:31: error: cannot convert value of type 'String' to expected argument type '[String]'
462 |                 id: UUID(),
463 |                 title: "Cloud Computing Migration",
464 |                 requirements: "Cloud migration services with software development and IT infrastructure support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
465 |                 projectDescription: "Complete cloud computing solution with network design and database migration",
466 |                 estimatedValue: 150_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:471:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
469 |             ),
470 |             // Add more IT-focused test cases...
471 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
472 |                 id: UUID(),
473 |                 title: "Enterprise Network Hardware Procurement",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:472:27: error: missing argument for parameter 'description' in call
470 |             // Add more IT-focused test cases...
471 |             AppCore.AcquisitionAggregate(
472 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
473 |                 title: "Enterprise Network Hardware Procurement",
474 |                 requirements: "Network equipment and hardware for IT infrastructure with programming support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:474:31: error: cannot convert value of type 'String' to expected argument type '[String]'
472 |                 id: UUID(),
473 |                 title: "Enterprise Network Hardware Procurement",
474 |                 requirements: "Network equipment and hardware for IT infrastructure with programming support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
475 |                 projectDescription: "Complete IT hardware solution including computers, network devices, and software licenses",
476 |                 estimatedValue: 400_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:480:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
478 |                 isRecurring: false
479 |             ),
480 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
481 |                 id: UUID(),
482 |                 title: "Database Management System Implementation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:481:27: error: missing argument for parameter 'description' in call
479 |             ),
480 |             AppCore.AcquisitionAggregate(
481 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
482 |                 title: "Database Management System Implementation",
483 |                 requirements: "Database design and development with cybersecurity and cloud computing integration",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:483:31: error: cannot convert value of type 'String' to expected argument type '[String]'
481 |                 id: UUID(),
482 |                 title: "Database Management System Implementation",
483 |                 requirements: "Database design and development with cybersecurity and cloud computing integration",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
484 |                 projectDescription: "Comprehensive database solution with IT support and software development services",
485 |                 estimatedValue: 250_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:494:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
492 |     private func createConstructionAcquisitionTestData() -> [AppCore.AcquisitionAggregate] {
493 |         [
494 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
495 |                 id: UUID(),
496 |                 title: "Office Building Renovation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:495:27: error: missing argument for parameter 'description' in call
493 |         [
494 |             AppCore.AcquisitionAggregate(
495 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
496 |                 title: "Office Building Renovation",
497 |                 requirements: "Complete building renovation including architectural design and construction management",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:497:31: error: cannot convert value of type 'String' to expected argument type '[String]'
495 |                 id: UUID(),
496 |                 title: "Office Building Renovation",
497 |                 requirements: "Complete building renovation including architectural design and construction management",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
498 |                 projectDescription: "Facility renovation with construction services, building materials, and contractor oversight",
499 |                 estimatedValue: 500_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:503:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
501 |                 isRecurring: false
502 |             ),
503 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
504 |                 id: UUID(),
505 |                 title: "Infrastructure Construction Project",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:504:27: error: missing argument for parameter 'description' in call
502 |             ),
503 |             AppCore.AcquisitionAggregate(
504 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
505 |                 title: "Infrastructure Construction Project",
506 |                 requirements: "New facility construction with engineering services and building system installation",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:506:31: error: cannot convert value of type 'String' to expected argument type '[String]'
504 |                 id: UUID(),
505 |                 title: "Infrastructure Construction Project",
506 |                 requirements: "New facility construction with engineering services and building system installation",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
507 |                 projectDescription: "Complete infrastructure project including construction, architectural planning, and facility management",
508 |                 estimatedValue: 1_200_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:512:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
510 |                 isRecurring: false
511 |             ),
512 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
513 |                 id: UUID(),
514 |                 title: "Concrete and Steel Building Materials",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:513:27: error: missing argument for parameter 'description' in call
511 |             ),
512 |             AppCore.AcquisitionAggregate(
513 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
514 |                 title: "Concrete and Steel Building Materials",
515 |                 requirements: "Construction materials procurement including concrete, steel, and building supplies",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:515:31: error: cannot convert value of type 'String' to expected argument type '[String]'
513 |                 id: UUID(),
514 |                 title: "Concrete and Steel Building Materials",
515 |                 requirements: "Construction materials procurement including concrete, steel, and building supplies",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
516 |                 projectDescription: "Building materials for infrastructure project with contractor delivery services",
517 |                 estimatedValue: 300_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:521:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
519 |                 isRecurring: false
520 |             ),
521 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
522 |                 id: UUID(),
523 |                 title: "Architectural Engineering Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:522:27: error: missing argument for parameter 'description' in call
520 |             ),
521 |             AppCore.AcquisitionAggregate(
522 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
523 |                 title: "Architectural Engineering Services",
524 |                 requirements: "Professional architectural and engineering services for facility construction",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:524:31: error: cannot convert value of type 'String' to expected argument type '[String]'
522 |                 id: UUID(),
523 |                 title: "Architectural Engineering Services",
524 |                 requirements: "Professional architectural and engineering services for facility construction",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
525 |                 projectDescription: "Complete engineering and architectural design for building construction project",
526 |                 estimatedValue: 400_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:530:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
528 |                 isRecurring: false
529 |             ),
530 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
531 |                 id: UUID(),
532 |                 title: "Construction Contractor Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:531:27: error: missing argument for parameter 'description' in call
529 |             ),
530 |             AppCore.AcquisitionAggregate(
531 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
532 |                 title: "Construction Contractor Services",
533 |                 requirements: "General contractor services for building renovation and facility construction",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:533:31: error: cannot convert value of type 'String' to expected argument type '[String]'
531 |                 id: UUID(),
532 |                 title: "Construction Contractor Services",
533 |                 requirements: "General contractor services for building renovation and facility construction",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
534 |                 projectDescription: "Comprehensive construction services including renovation, building, and infrastructure work",
535 |                 estimatedValue: 800_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:544:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
542 |     private func createProfessionalServicesTestData() -> [AppCore.AcquisitionAggregate] {
543 |         [
544 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
545 |                 id: UUID(),
546 |                 title: "Management Consulting Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:545:27: error: missing argument for parameter 'description' in call
543 |         [
544 |             AppCore.AcquisitionAggregate(
545 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
546 |                 title: "Management Consulting Services",
547 |                 requirements: "Professional consulting services for advisory assistance and training programs",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:547:31: error: cannot convert value of type 'String' to expected argument type '[String]'
545 |                 id: UUID(),
546 |                 title: "Management Consulting Services",
547 |                 requirements: "Professional consulting services for advisory assistance and training programs",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
548 |                 projectDescription: "Comprehensive consulting with professional services and management support",
549 |                 estimatedValue: 180_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:553:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
551 |                 isRecurring: false
552 |             ),
553 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
554 |                 id: UUID(),
555 |                 title: "Professional Training and Advisory Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:554:27: error: missing argument for parameter 'description' in call
552 |             ),
553 |             AppCore.AcquisitionAggregate(
554 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
555 |                 title: "Professional Training and Advisory Services",
556 |                 requirements: "Training services and advisory assistance for professional development and support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:556:31: error: cannot convert value of type 'String' to expected argument type '[String]'
554 |                 id: UUID(),
555 |                 title: "Professional Training and Advisory Services",
556 |                 requirements: "Training services and advisory assistance for professional development and support",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
557 |                 projectDescription: "Professional training programs with consulting and maintenance support services",
558 |                 estimatedValue: 120_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:562:41: error: extra arguments at positions #1, #4, #5, #6, #7 in call
560 |                 isRecurring: false
561 |             ),
562 |             AppCore.AcquisitionAggregate(
    |                                         `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
563 |                 id: UUID(),
564 |                 title: "Operations Management Support",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:563:27: error: missing argument for parameter 'description' in call
561 |             ),
562 |             AppCore.AcquisitionAggregate(
563 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
564 |                 title: "Operations Management Support",
565 |                 requirements: "Professional operations management and advisory consulting services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:565:31: error: cannot convert value of type 'String' to expected argument type '[String]'
563 |                 id: UUID(),
564 |                 title: "Operations Management Support",
565 |                 requirements: "Professional operations management and advisory consulting services",
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
566 |                 projectDescription: "Comprehensive management support with professional services and operations consulting",
567 |                 estimatedValue: 220_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:597:48: error: extra arguments at positions #1, #4, #5, #6, #7 in call
595 |             let requirements = "Professional \(selectedKeywords.joined(separator: ", ")) services needed for project \(i)"
596 | 
597 |             return AppCore.AcquisitionAggregate(
    |                                                `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
598 |                 id: UUID(),
599 |                 title: title,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:598:27: error: missing argument for parameter 'description' in call
596 | 
597 |             return AppCore.AcquisitionAggregate(
598 |                 id: UUID(),
    |                           `- error: missing argument for parameter 'description' in call
599 |                 title: title,
600 |                 requirements: requirements,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AcquisitionContextClassifierTests.swift:600:31: error: cannot convert value of type 'String' to expected argument type '[String]'
598 |                 id: UUID(),
599 |                 title: title,
600 |                 requirements: requirements,
    |                               `- error: cannot convert value of type 'String' to expected argument type '[String]'
601 |                 projectDescription: "Standard \(category.lowercased()) project with \(selectedKeywords.joined(separator: " and ")) requirements",
602 |                 estimatedValue: Double.random(in: 10000 ... 1_000_000),
[22/35] Compiling AIKOTests AdaptiveFormIntegrationTests.swift
/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:833:58: error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
831 |     // MARK: - Test Helper Methods
832 | 
833 |     private func createTestAcquisition(title: String) -> AcquisitionAggregate {
    |                                                          `- error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
834 |         AcquisitionAggregate(
835 |             id: UUID(),

/Users/J/aiko/Sources/Domain/Models/AcquisitionAggregate.swift:6:20: note: found this candidate
  4 | 
  5 | /// Rich domain model for Acquisition aggregate root
  6 | public final class AcquisitionAggregate: AggregateRoot<Acquisition>, @unchecked Sendable {
    |                    `- note: found this candidate
  7 |     // MARK: - Properties
  8 | 

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:295:15: note: found this candidate
293 | 
294 | /// Acquisition aggregate for context classification
295 | public struct AcquisitionAggregate: Sendable {
    |               `- note: found this candidate
296 |     public let title: String?
297 |     public let description: String?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:845:79: error: 'AcquisitionContext' is ambiguous for type lookup in this context
843 |     }
844 | 
845 |     private func createTestAcquisitionContext(_ category: ContextCategory) -> AcquisitionContext {
    |                                                                               `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
846 |         let acquisitionType: AcquisitionType = switch category {
847 |         case .informationTechnology:

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:882:94: error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
880 |     }
881 | 
882 |     private func createHighConfidenceScenario() -> (formData: AppCore.FormData, acquisition: AcquisitionAggregate, userProfile: AppCore.UserProfile) {
    |                                                                                              `- error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
883 |         // Create test form fields using the correct AppCore FormField
884 |         let testField = AppCore.FormField(

/Users/J/aiko/Sources/Domain/Models/AcquisitionAggregate.swift:6:20: note: found this candidate
  4 | 
  5 | /// Rich domain model for Acquisition aggregate root
  6 | public final class AcquisitionAggregate: AggregateRoot<Acquisition>, @unchecked Sendable {
    |                    `- note: found this candidate
  7 |     // MARK: - Properties
  8 | 

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:295:15: note: found this candidate
293 | 
294 | /// Acquisition aggregate for context classification
295 | public struct AcquisitionAggregate: Sendable {
    |               `- note: found this candidate
296 |     public let title: String?
297 |     public let description: String?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:937:11: error: cannot find type 'AdaptiveFormEventType' in scope
935 | // MARK: - Test Extensions
936 | 
937 | extension AdaptiveFormEventType {
    |           `- error: cannot find type 'AdaptiveFormEventType' in scope
938 |     init?(rawValue: String) {
939 |         switch rawValue {

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:24:50: error: missing arguments for parameters 'aiOrchestrator', 'learningLoop', 'adaptiveService', 'coreDataStack' in call
 22 |         // Initialize test infrastructure
 23 |         mockCoreDataActor = MockCoreDataActor()
 24 |         agenticOrchestrator = AgenticOrchestrator()
    |                                                  `- error: missing arguments for parameters 'aiOrchestrator', 'learningLoop', 'adaptiveService', 'coreDataStack' in call
 25 |         learningLoop = LearningLoop.shared
 26 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:29:12: note: 'init(aiOrchestrator:learningLoop:adaptiveService:coreDataStack:)' declared here
 27 |     private let localRLAgent: LocalRLAgent
 28 | 
 29 |     public init(
    |            `- note: 'init(aiOrchestrator:learningLoop:adaptiveService:coreDataStack:)' declared here
 30 |         aiOrchestrator: AIOrchestrator,
 31 |         learningLoop: LearningLoop,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:29:69: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 27 |         // Initialize adaptive form components
 28 |         let contextClassifier = AcquisitionContextClassifier()
 29 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 30 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
 31 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:30:74: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 28 |         let contextClassifier = AcquisitionContextClassifier()
 29 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
 30 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
    |                                                                          `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 31 |         let explanationEngine = ValueExplanationEngine()
 32 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:45:39: error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
 43 |         // Initialize enhanced FormIntelligenceAdapter
 44 |         formIntelligenceAdapter = FormIntelligenceAdapter.liveValue
 45 |         await formIntelligenceAdapter.setAdaptiveService(adaptiveFormService)
    |                                       `- error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
 46 | 
 47 |         // Enable adaptive learning for tests

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:80:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 78 |                 "deliverySchedule": "",
 79 |             ],
 80 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 81 |         )
 82 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:83:49: error: extra arguments at positions #1, #4, #5, #6, #7 in call
 81 |         )
 82 | 
 83 |         let itAcquisition = AcquisitionAggregate(
    |                                                 `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
 84 |             id: UUID(),
 85 |             title: "Software Development Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:84:23: error: missing argument for parameter 'description' in call
 82 | 
 83 |         let itAcquisition = AcquisitionAggregate(
 84 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
 85 |             title: "Software Development Services",
 86 |             requirements: "Need comprehensive software development for IT infrastructure with cloud computing and database management",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:86:27: error: cannot convert value of type 'String' to expected argument type '[String]'
 84 |             id: UUID(),
 85 |             title: "Software Development Services",
 86 |             requirements: "Need comprehensive software development for IT infrastructure with cloud computing and database management",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
 87 |             projectDescription: "Complete IT solution with software programming, network security, and cybersecurity implementation",
 88 |             estimatedValue: 500_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:129:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
127 |                 "performancePeriod": "",
128 |             ],
129 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
130 |         )
131 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:132:56: error: extra arguments at positions #1, #4, #5, #6, #7 in call
130 |         )
131 | 
132 |         let ambiguousAcquisition = AcquisitionAggregate(
    |                                                        `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
133 |             id: UUID(),
134 |             title: "General Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:133:23: error: missing argument for parameter 'description' in call
131 | 
132 |         let ambiguousAcquisition = AcquisitionAggregate(
133 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
134 |             title: "General Services",
135 |             requirements: "Need various general services", // Very generic, low confidence

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:135:27: error: cannot convert value of type 'String' to expected argument type '[String]'
133 |             id: UUID(),
134 |             title: "General Services",
135 |             requirements: "Need various general services", // Very generic, low confidence
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
136 |             projectDescription: "Standard services required",
137 |             estimatedValue: 50000,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:171:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
169 |             revision: "2024-01",
170 |             fields: ["testField": ""],
171 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
172 |         )
173 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:208:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
206 |                 "deliverables": "",
207 |             ],
208 |             metadata: ["legacy": "true"]
    |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
209 |         )
210 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:242:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
240 |             revision: "2024-01",
241 |             fields: ["paymentTerms": ""],
242 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
243 |         )
244 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:258:39: error: value of type 'FormIntelligenceAdapter' has no member 'trackFormModification'
256 | 
257 |         // When: Track user modification
258 |         await formIntelligenceAdapter.trackFormModification(
    |                                       `- error: value of type 'FormIntelligenceAdapter' has no member 'trackFormModification'
259 |             fieldId: "paymentTerms",
260 |             originalValue: originalValue,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:268:56: error: value of type 'AdaptiveFormPopulationService' has no member 'getRecentLearningEvents'
266 |         // Then: Modification should be tracked for learning
267 |         // Verify through adaptive service that learning occurred
268 |         let learningEvents = await adaptiveFormService.getRecentLearningEvents()
    |                                                        `- error: value of type 'AdaptiveFormPopulationService' has no member 'getRecentLearningEvents'
269 | 
270 |         XCTAssertGreaterThan(learningEvents.count, 0,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:288:35: error: value of type 'AdaptiveFormPopulationService' has no member 'registerWithOrchestrator'
286 |         }
287 |         // When: Adaptive service initializes
288 |         await adaptiveFormService.registerWithOrchestrator()
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'registerWithOrchestrator'
289 | 
290 |         // Then: Should be registered as RL agent

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:291:58: error: value of type 'AgenticOrchestrator' has no member 'getRegisteredRLAgents'
289 | 
290 |         // Then: Should be registered as RL agent
291 |         let registeredAgents = await agenticOrchestrator.getRegisteredRLAgents()
    |                                                          `- error: value of type 'AgenticOrchestrator' has no member 'getRegisteredRLAgents'
292 |         let adaptiveAgent = registeredAgents.first { $0.agentId == "adaptive_form_population" }
293 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:308:54: error: value of type 'AgenticOrchestrator' has no member 'getLocalRLAgent'
306 |         }
307 |         // Given: Local RL agent infrastructure exists
308 |         let localRLAgent = await agenticOrchestrator.getLocalRLAgent()
    |                                                      `- error: value of type 'AgenticOrchestrator' has no member 'getLocalRLAgent'
309 |         XCTAssertNotNil(localRLAgent, "Local RL agent should be available")
310 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:312:104: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
310 | 
311 |         // When: Perform adaptive learning operation
312 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
    |                                                                                                        `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
313 |         let testAcquisition = createTestAcquisition(title: "RL Infrastructure Test")
314 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:314:38: error: extra arguments at positions #1, #2, #3 in call
312 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
313 |         let testAcquisition = createTestAcquisition(title: "RL Infrastructure Test")
314 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
315 | 
316 |         _ = try await adaptiveFormService.populateForm(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:314:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
312 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
313 |         let testAcquisition = createTestAcquisition(title: "RL Infrastructure Test")
314 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
315 | 
316 |         _ = try await adaptiveFormService.populateForm(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:352:62: error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
350 |                              "Should have high confidence for coordination")
351 | 
352 |         let coordinatedDecisions = await agenticOrchestrator.getCoordinatedDecisions()
    |                                                              `- error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
353 |         let adaptiveDecision = coordinatedDecisions.first {
354 |             $0.agentId == "adaptive_form_population" && $0.confidence > 0.6

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:369:57: error: cannot infer contextual base in reference to member 'informationTechnology'
367 |         }
368 |         // Given: Learning scenario
369 |         let testContext = createTestAcquisitionContext(.informationTechnology)
    |                                                         `- error: cannot infer contextual base in reference to member 'informationTechnology'
370 | 
371 |         // When: Track modification for learning

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:372:35: error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
370 | 
371 |         // When: Track modification for learning
372 |         await adaptiveFormService.trackModification(
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
373 |             fieldId: "paymentTerms",
374 |             originalValue: "NET-15",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:381:49: error: value of type 'LearningLoop' has no member 'getRecentEvents'
379 | 
380 |         // Then: Learning event should be shared via LearningLoop
381 |         let learningEvents = await learningLoop.getRecentEvents()
    |                                                 `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
382 |         let adaptiveEvents = learningEvents.filter {
383 |             $0.context.workflowState == "adaptive_form_population"

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:407:35: error: value of type 'AdaptiveFormPopulationService' has no member 'updateLearningState'
405 |         let testAction = createTestQLearningAction(value: "Sync Test", confidence: 0.8)
406 | 
407 |         await adaptiveFormService.updateLearningState(state: testState, action: testAction, reward: 0.7)
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'updateLearningState'
408 | 
409 |         // When: Synchronize state with orchestrator

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:410:35: error: value of type 'AdaptiveFormPopulationService' has no member 'synchronizeStateWithOrchestrator'
408 | 
409 |         // When: Synchronize state with orchestrator
410 |         await adaptiveFormService.synchronizeStateWithOrchestrator()
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'synchronizeStateWithOrchestrator'
411 | 
412 |         // Then: States should be synchronized

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:413:59: error: value of type 'AgenticOrchestrator' has no member 'getAgentState'
411 | 
412 |         // Then: States should be synchronized
413 |         let orchestratorState = await agenticOrchestrator.getAgentState(agentId: "adaptive_form_population")
    |                                                           `- error: value of type 'AgenticOrchestrator' has no member 'getAgentState'
414 | 
415 |         XCTAssertNotNil(orchestratorState, "Orchestrator should have agent state")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:416:63: error: cannot convert value of type 'TimeInterval?' (aka 'Optional<Double>') to expected argument type 'TimeInterval' (aka 'Double')
414 | 
415 |         XCTAssertNotNil(orchestratorState, "Orchestrator should have agent state")
416 |         XCTAssertEqual(orchestratorState?.lastUpdateTimestamp.timeIntervalSince1970,
    |                                                               `- error: cannot convert value of type 'TimeInterval?' (aka 'Optional<Double>') to expected argument type 'TimeInterval' (aka 'Double')
417 |                        Date().timeIntervalSince1970, accuracy: 10.0,
418 |                        "State should be recently synchronized")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:430:35: error: value of type 'AgenticOrchestrator' has no member 'simulateFailure'
428 |         }
429 |         // Given: Orchestrator in failure simulation mode
430 |         await agenticOrchestrator.simulateFailure(duration: 5.0)
    |                                   `- error: value of type 'AgenticOrchestrator' has no member 'simulateFailure'
431 | 
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:432:104: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
430 |         await agenticOrchestrator.simulateFailure(duration: 5.0)
431 | 
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
    |                                                                                                        `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
433 |         let testAcquisition = createTestAcquisition(title: "Failure Recovery Test")
434 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:434:38: error: extra arguments at positions #1, #2, #3 in call
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
433 |         let testAcquisition = createTestAcquisition(title: "Failure Recovery Test")
434 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
435 | 
436 |         // When: Attempt form population during orchestrator failure

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:434:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
433 |         let testAcquisition = createTestAcquisition(title: "Failure Recovery Test")
434 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
435 | 
436 |         // When: Attempt form population during orchestrator failure

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:450:53: error: value of type 'AgenticOrchestrator' has no member 'isOperational'
448 | 
449 |         // Verify recovery
450 |         let isRecovered = await agenticOrchestrator.isOperational()
    |                                                     `- error: value of type 'AgenticOrchestrator' has no member 'isOperational'
451 |         XCTAssertTrue(isRecovered, "Orchestrator should recover from failure")
452 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:474:114: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
472 |         }
473 |         // Given: Complete form workflow
474 |         let formData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: ["testField": ""], metadata: [:])
    |                                                                                                                  `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
475 |         let acquisition = createTestAcquisition(title: "Event Capture Test")
476 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:476:38: error: extra arguments at positions #1, #2, #3 in call
474 |         let formData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: ["testField": ""], metadata: [:])
475 |         let acquisition = createTestAcquisition(title: "Event Capture Test")
476 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
477 | 
478 |         // When: Execute complete workflow

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:476:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
474 |         let formData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: ["testField": ""], metadata: [:])
475 |         let acquisition = createTestAcquisition(title: "Event Capture Test")
476 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
477 | 
478 |         // When: Execute complete workflow

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:487:35: error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
485 | 
486 |         // 2. User modification
487 |         await adaptiveFormService.trackModification(
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
488 |             fieldId: "testField",
489 |             originalValue: "original",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:492:52: error: cannot infer contextual base in reference to member 'informationTechnology'
490 |             newValue: "modified",
491 |             formType: "SF-1449",
492 |             context: createTestAcquisitionContext(.informationTechnology)
    |                                                    `- error: cannot infer contextual base in reference to member 'informationTechnology'
493 |         )
494 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:496:39: error: value of type 'AdaptiveFormPopulationService' has no member 'getFieldExplanation'
494 | 
495 |         // 3. Explanation request
496 |         _ = await adaptiveFormService.getFieldExplanation(
    |                                       `- error: value of type 'AdaptiveFormPopulationService' has no member 'getFieldExplanation'
497 |             fieldId: "testField",
498 |             suggestedValue: "modified",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:499:52: error: cannot infer contextual base in reference to member 'informationTechnology'
497 |             fieldId: "testField",
498 |             suggestedValue: "modified",
499 |             context: createTestAcquisitionContext(.informationTechnology)
    |                                                    `- error: cannot infer contextual base in reference to member 'informationTechnology'
500 |         )
501 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:503:44: error: value of type 'LearningLoop' has no member 'getRecentEvents'
501 | 
502 |         // Then: All events should be captured
503 |         let allEvents = await learningLoop.getRecentEvents()
    |                                            `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
504 |         let adaptiveEvents = allEvents.filter { $0.context.workflowState == "adaptive_form_population" }
505 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:510:49: error: cannot infer key path type from context; consider explicitly specifying a root type
508 |                                     "Should capture all workflow events")
509 | 
510 |         let eventTypes = Set(adaptiveEvents.map(\.eventType))
    |                                                 `- error: cannot infer key path type from context; consider explicitly specifying a root type
511 |         XCTAssertTrue(eventTypes.contains(.documentGenerated), "Should capture form population event")
512 |         XCTAssertTrue(eventTypes.contains(.documentEdited), "Should capture modification event")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:511:44: error: cannot infer contextual base in reference to member 'documentGenerated'
509 | 
510 |         let eventTypes = Set(adaptiveEvents.map(\.eventType))
511 |         XCTAssertTrue(eventTypes.contains(.documentGenerated), "Should capture form population event")
    |                                            `- error: cannot infer contextual base in reference to member 'documentGenerated'
512 |         XCTAssertTrue(eventTypes.contains(.documentEdited), "Should capture modification event")
513 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:512:44: error: cannot infer contextual base in reference to member 'documentEdited'
510 |         let eventTypes = Set(adaptiveEvents.map(\.eventType))
511 |         XCTAssertTrue(eventTypes.contains(.documentGenerated), "Should capture form population event")
512 |         XCTAssertTrue(eventTypes.contains(.documentEdited), "Should capture modification event")
    |                                            `- error: cannot infer contextual base in reference to member 'documentEdited'
513 |     }
514 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:532:35: error: cannot find 'AdaptiveFormEventType' in scope
530 |         // When: Record each event type
531 |         for scenario in eventScenarios {
532 |             guard let eventType = AdaptiveFormEventType(rawValue: scenario.action) else {
    |                                   `- error: cannot find 'AdaptiveFormEventType' in scope
533 |                 XCTFail("Invalid event type: \(scenario.action)")
534 |                 continue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:536:32: error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
534 |                 continue
535 |             }
536 |             await LearningLoop.recordAdaptiveFormEvent(
    |                                `- error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
537 |                 eventType,
538 |                 formType: "SF-1449",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:540:56: error: cannot infer contextual base in reference to member 'informationTechnology'
538 |                 formType: "SF-1449",
539 |                 fieldId: "testField",
540 |                 context: createTestAcquisitionContext(.informationTechnology)
    |                                                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
541 |             )
542 |         }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:545:49: error: value of type 'LearningLoop' has no member 'getRecentEvents'
543 | 
544 |         // Then: Event types should be correctly classified
545 |         let recordedEvents = await learningLoop.getRecentEvents()
    |                                                 `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
546 |         let adaptiveEvents = recordedEvents.filter { $0.context.workflowState == "adaptive_form_population" }
547 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:576:23: error: cannot find 'ContextFeatures' in scope
574 |             category: .informationTechnology,
575 |             confidence: 0.85,
576 |             features: ContextFeatures(
    |                       `- error: cannot find 'ContextFeatures' in scope
577 |                 estimatedValue: 200_000,
578 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:573:41: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
571 |         ]
572 | 
573 |         let context = AcquisitionContext(
    |                                         `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
574 |             category: .informationTechnology,
575 |             confidence: 0.85,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:574:13: error: missing argument for parameter 'from' in call
572 | 
573 |         let context = AcquisitionContext(
574 |             category: .informationTechnology,
    |             `- error: missing argument for parameter 'from' in call
575 |             confidence: 0.85,
576 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:574:24: error: cannot infer contextual base in reference to member 'informationTechnology'
572 | 
573 |         let context = AcquisitionContext(
574 |             category: .informationTechnology,
    |                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
575 |             confidence: 0.85,
576 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:584:23: error: cannot infer contextual base in reference to member 'normal'
582 |             ),
583 |             acquisitionValue: 200_000,
584 |             urgency: .normal,
    |                       `- error: cannot infer contextual base in reference to member 'normal'
585 |             complexity: .high,
586 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:585:26: error: cannot infer contextual base in reference to member 'high'
583 |             acquisitionValue: 200_000,
584 |             urgency: .normal,
585 |             complexity: .high,
    |                          `- error: cannot infer contextual base in reference to member 'high'
586 |             acquisitionId: UUID()
587 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:590:28: error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
588 | 
589 |         // When: Record event with metadata
590 |         await LearningLoop.recordAdaptiveFormEvent(
    |                            `- error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
591 |             .suggestionAccepted,
592 |             formType: "SF-1449",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:591:14: error: cannot infer contextual base in reference to member 'suggestionAccepted'
589 |         // When: Record event with metadata
590 |         await LearningLoop.recordAdaptiveFormEvent(
591 |             .suggestionAccepted,
    |              `- error: cannot infer contextual base in reference to member 'suggestionAccepted'
592 |             formType: "SF-1449",
593 |             fieldId: "paymentTerms",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:599:41: error: value of type 'LearningLoop' has no member 'getRecentEvents'
597 | 
598 |         // Then: Metadata should be preserved accurately
599 |         let events = await learningLoop.getRecentEvents()
    |                                         `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
600 |         let targetEvent = events.first { $0.eventType == .suggestionAccepted }
601 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:600:59: error: cannot infer contextual base in reference to member 'suggestionAccepted'
598 |         // Then: Metadata should be preserved accurately
599 |         let events = await learningLoop.getRecentEvents()
600 |         let targetEvent = events.first { $0.eventType == .suggestionAccepted }
    |                                                           `- error: cannot infer contextual base in reference to member 'suggestionAccepted'
601 | 
602 |         XCTAssertNotNil(targetEvent, "Should record suggestion accepted event")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:605:60: error: type of expression is ambiguous without a type annotation
603 | 
604 |         for (key, expectedValue) in richMetadata {
605 |             let actualValue = targetEvent?.context.userData[key]
    |                                                            `- error: type of expression is ambiguous without a type annotation
606 |             XCTAssertEqual(actualValue, expectedValue,
607 |                            "Should preserve metadata: \(key) = \(expectedValue)")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:613:19: warning: value 'learningLoop' was defined but never used; consider replacing with boolean test
611 |     /// Test event ordering and timestamps
612 |     func testEventOrderingAndTimestamps() async throws {
613 |         guard let learningLoop else {
    |                   `- warning: value 'learningLoop' was defined but never used; consider replacing with boolean test
614 |             XCTFail("LearningLoop should be initialized")
615 |             return

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:816:62: error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
814 | 
815 |         // 3. Agent should be coordinated with orchestrator
816 |         let coordinatedDecisions = await agenticOrchestrator.getCoordinatedDecisions()
    |                                                              `- error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
817 |         let adaptiveDecisions = coordinatedDecisions.filter { $0.agentId == "adaptive_form_population" }
818 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:12:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
  10 |     // MARK: - Test Infrastructure
  11 | 
  12 |     var adaptiveService: AdaptiveFormPopulationService?
     |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
  13 |     var qLearningAgent: FormFieldQLearningAgent?
  14 |     var contextClassifier: AcquisitionContextClassifier?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:13:25: error: cannot find type 'FormFieldQLearningAgent' in scope
  11 | 
  12 |     var adaptiveService: AdaptiveFormPopulationService?
  13 |     var qLearningAgent: FormFieldQLearningAgent?
     |                         `- error: cannot find type 'FormFieldQLearningAgent' in scope
  14 |     var contextClassifier: AcquisitionContextClassifier?
  15 |     var mockCoreDataActor: MockCoreDataActor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:14:28: error: cannot find type 'AcquisitionContextClassifier' in scope
  12 |     var adaptiveService: AdaptiveFormPopulationService?
  13 |     var qLearningAgent: FormFieldQLearningAgent?
  14 |     var contextClassifier: AcquisitionContextClassifier?
     |                            `- error: cannot find type 'AcquisitionContextClassifier' in scope
  15 |     var mockCoreDataActor: MockCoreDataActor?
  16 |     var performanceMonitor: PerformanceMonitor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:16:29: error: 'PerformanceMonitor' is ambiguous for type lookup in this context
  14 |     var contextClassifier: AcquisitionContextClassifier?
  15 |     var mockCoreDataActor: MockCoreDataActor?
  16 |     var performanceMonitor: PerformanceMonitor?
     |                             `- error: 'PerformanceMonitor' is ambiguous for type lookup in this context
  17 |     var mlxBenchmarker: MLXPerformanceBenchmarker?
  18 | 
     :
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- note: found this candidate
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:470:7: note: found this candidate
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- note: found this candidate
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:94: error: cannot find type 'QLearningState' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                                                              `- error: cannot find type 'QLearningState' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:54: error: cannot find type 'FieldType' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                      `- error: cannot find type 'FieldType' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:74: error: cannot find type 'ContextCategory' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                                          `- error: cannot find type 'ContextCategory' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:765:50: error: cannot find type 'QLearningState' in scope
 763 |     }
 764 | 
 765 |     private func createRandomQLearningState() -> QLearningState {
     |                                                  `- error: cannot find type 'QLearningState' in scope
 766 |         QLearningState(
 767 |             fieldType: FieldType.allCases.randomElement() ?? .textField,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:778:51: error: cannot find type 'QLearningAction' in scope
 776 |     }
 777 | 
 778 |     private func createRandomQLearningAction() -> QLearningAction {
     |                                                   `- error: cannot find type 'QLearningAction' in scope
 779 |         let values = ["Test Value", "Sample Text", "Default Option", "Custom Entry"]
 780 |         return QLearningAction(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:786:51: error: cannot find type 'QLearningState' in scope
 784 |     }
 785 | 
 786 |     private func createComplexQLearningState() -> QLearningState {
     |                                                   `- error: cannot find type 'QLearningState' in scope
 787 |         QLearningState(
 788 |             fieldType: .dropdownField,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:929:64: error: cannot find type 'QLearningState' in scope
 927 |     }
 928 | 
 929 |     private func createUniqueQLearningState(iteration: Int) -> QLearningState {
     |                                                                `- error: cannot find type 'QLearningState' in scope
 930 |         QLearningState(
 931 |             fieldType: FieldType.allCases[iteration % FieldType.allCases.count],

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:975:16: error: cannot find type 'QLearningState' in scope
 973 | 
 974 | struct FieldSuggestionScenario {
 975 |     let state: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
 976 |     let expectedComplexity: ComplexityLevel
 977 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:986:16: error: cannot find type 'QLearningState' in scope
 984 | 
 985 | struct QNetworkUpdateScenario {
 986 |     let state: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
 987 |     let action: QLearningAction
 988 |     let reward: Double

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:987:17: error: cannot find type 'QLearningAction' in scope
 985 | struct QNetworkUpdateScenario {
 986 |     let state: QLearningState
 987 |     let action: QLearningAction
     |                 `- error: cannot find type 'QLearningAction' in scope
 988 |     let reward: Double
 989 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1019:16: error: cannot find type 'QLearningState' in scope
1017 | 
1018 | struct QuantizationTestCase {
1019 |     let input: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
1020 |     let expectedOutput: QLearningAction
1021 |     let tolerance: Double

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1020:25: error: cannot find type 'QLearningAction' in scope
1018 | struct QuantizationTestCase {
1019 |     let input: QLearningState
1020 |     let expectedOutput: QLearningAction
     |                         `- error: cannot find type 'QLearningAction' in scope
1021 |     let tolerance: Double
1022 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1024:8: error: invalid redeclaration of 'PerformanceMetrics'
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- error: invalid redeclaration of 'PerformanceMetrics'
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1032:13: error: invalid redeclaration of 'PerformanceMonitor'
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- error: invalid redeclaration of 'PerformanceMonitor'
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1071:36: error: cannot find type 'QLearningState' in scope
1069 |     }
1070 | 
1071 |     func benchmarkWithGPU(state _: QLearningState, iterations _: Int) async -> MLXBenchmarkResults {
     |                                    `- error: cannot find type 'QLearningState' in scope
1072 |         MLXBenchmarkResults(
1073 |             averageLatency: Double.random(in: 0.01 ... 0.03),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1078:36: error: cannot find type 'QLearningState' in scope
1076 |     }
1077 | 
1078 |     func benchmarkWithCPU(state _: QLearningState, iterations _: Int) async -> MLXBenchmarkResults {
     |                                    `- error: cannot find type 'QLearningState' in scope
1079 |         MLXBenchmarkResults(
1080 |             averageLatency: Double.random(in: 0.03 ... 0.08),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1294:44: error: cannot find type 'ThermalState' in scope
1292 |     }
1293 | 
1294 |     func getCurrentThermalState() async -> ThermalState {
     |                                            `- error: cannot find type 'ThermalState' in scope
1295 |         // Simulate thermal state
1296 |         let states: [ThermalState] = [.nominal, .fair, .serious]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1300:47: error: cannot find type 'ThermalState' in scope
1298 |     }
1299 | 
1300 |     func calculateThermalImpact(from initial: ThermalState, to final: ThermalState) -> Double {
     |                                               `- error: cannot find type 'ThermalState' in scope
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1300:71: error: cannot find type 'ThermalState' in scope
1298 |     }
1299 | 
1300 |     func calculateThermalImpact(from initial: ThermalState, to final: ThermalState) -> Double {
     |                                                                       `- error: cannot find type 'ThermalState' in scope
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1315:13: error: type 'PerformanceMockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
1313 | 
1314 | /// Mock orchestrator for testing
1315 | final class PerformanceMockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             |- error: type 'PerformanceMockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
     |             `- note: add stubs for conformance
1316 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1317 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1324:52: error: type 'UrgencyLevel' has no member 'urgent'
1322 | 
1323 | extension UrgencyLevel: CaseIterable {
1324 |     public static let allCases: [UrgencyLevel] = [.urgent, .moderate, .normal]
     |                                                    `- error: type 'UrgencyLevel' has no member 'urgent'
1325 | }
1326 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1324:61: error: type 'UrgencyLevel' has no member 'moderate'
1322 | 
1323 | extension UrgencyLevel: CaseIterable {
1324 |     public static let allCases: [UrgencyLevel] = [.urgent, .moderate, .normal]
     |                                                             `- error: type 'UrgencyLevel' has no member 'moderate'
1325 | }
1326 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1327:28: warning: conformance of 'ComplexityLevel' to protocol 'CaseIterable' was already stated in the type's module 'AIKO'
1325 | }
1326 | 
1327 | extension ComplexityLevel: CaseIterable {
     |                            `- warning: conformance of 'ComplexityLevel' to protocol 'CaseIterable' was already stated in the type's module 'AIKO'
1328 |     public static let allCases: [ComplexityLevel] = [.high, .medium, .low]
     |                       `- note: static property 'allCases' will not be used to satisfy the conformance to 'CaseIterable'
1329 | }
1330 | 

/Users/J/aiko/Sources/Models/DocumentChain.swift:149:13: note: 'ComplexityLevel' declares conformance to protocol 'CaseIterable' here
147 | 
148 | /// Complexity level of the acquisition
149 | public enum ComplexityLevel: String, Codable, CaseIterable, Sendable {
    |             `- note: 'ComplexityLevel' declares conformance to protocol 'CaseIterable' here
150 |     case low = "Low"
151 |     case medium = "Medium"

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:28:26: error: cannot find 'FormFieldQLearningAgent' in scope
  26 | 
  27 |         // Initialize system components
  28 |         qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
     |                          `- error: cannot find 'FormFieldQLearningAgent' in scope
  29 |         contextClassifier = AcquisitionContextClassifier()
  30 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:29:29: error: cannot find 'AcquisitionContextClassifier' in scope
  27 |         // Initialize system components
  28 |         qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         contextClassifier = AcquisitionContextClassifier()
     |                             `- error: cannot find 'AcquisitionContextClassifier' in scope
  30 | 
  31 |         adaptiveService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:31:27: error: cannot find 'AdaptiveFormPopulationService' in scope
  29 |         contextClassifier = AcquisitionContextClassifier()
  30 | 
  31 |         adaptiveService = AdaptiveFormPopulationService(
     |                           `- error: cannot find 'AdaptiveFormPopulationService' in scope
  32 |             contextClassifier: contextClassifier,
  33 |             qLearningAgent: qLearningAgent,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:34:34: error: cannot find 'FormModificationTracker' in scope
  32 |             contextClassifier: contextClassifier,
  33 |             qLearningAgent: qLearningAgent,
  34 |             modificationTracker: FormModificationTracker(coreDataActor: mockCoreDataActor),
     |                                  `- error: cannot find 'FormModificationTracker' in scope
  35 |             explanationEngine: ValueExplanationEngine(),
  36 |             metricsCollector: AdaptiveFormMetricsCollector(),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:35:32: error: cannot find 'ValueExplanationEngine' in scope
  33 |             qLearningAgent: qLearningAgent,
  34 |             modificationTracker: FormModificationTracker(coreDataActor: mockCoreDataActor),
  35 |             explanationEngine: ValueExplanationEngine(),
     |                                `- error: cannot find 'ValueExplanationEngine' in scope
  36 |             metricsCollector: AdaptiveFormMetricsCollector(),
  37 |             agenticOrchestrator: PerformanceMockAgenticOrchestrator()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:36:31: error: cannot find 'AdaptiveFormMetricsCollector' in scope
  34 |             modificationTracker: FormModificationTracker(coreDataActor: mockCoreDataActor),
  35 |             explanationEngine: ValueExplanationEngine(),
  36 |             metricsCollector: AdaptiveFormMetricsCollector(),
     |                               `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
  37 |             agenticOrchestrator: PerformanceMockAgenticOrchestrator()
  38 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:41:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'warmUp' of wrapped base type 'MLXPerformanceBenchmarker'
  39 | 
  40 |         // Warm up MLX Swift framework
  41 |         await mlxBenchmarker.warmUp()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'warmUp' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'warmUp' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
  42 |     }
  43 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:180:19: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'simulateDeviceConfig' of wrapped base type 'MLXPerformanceBenchmarker'
 178 |         // When: Test MLX inference performance on each configuration
 179 |         for config in deviceConfigs {
 180 |             await mlxBenchmarker.simulateDeviceConfig(config)
     |                   |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'simulateDeviceConfig' of wrapped base type 'MLXPerformanceBenchmarker'
     |                   |- note: chain the optional using '?' to access member 'simulateDeviceConfig' only for non-'nil' base values
     |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 181 | 
 182 |             let inferenceResults = await mlxBenchmarker.benchmarkQLearningInference(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:182:42: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQLearningInference' of wrapped base type 'MLXPerformanceBenchmarker'
 180 |             await mlxBenchmarker.simulateDeviceConfig(config)
 181 | 
 182 |             let inferenceResults = await mlxBenchmarker.benchmarkQLearningInference(
     |                                          |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQLearningInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                          |- note: chain the optional using '?' to access member 'benchmarkQLearningInference' only for non-'nil' base values
     |                                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 183 |                 iterations: 100,
 184 |                 stateSpaceSize: 1000

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:245:42: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQuantizedModel' of wrapped base type 'MLXPerformanceBenchmarker'
 243 |         // When: Test each quantization level
 244 |         for level in quantizationLevels {
 245 |             let quantizedResults = await mlxBenchmarker.benchmarkQuantizedModel(
     |                                          |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQuantizedModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                          |- note: chain the optional using '?' to access member 'benchmarkQuantizedModel' only for non-'nil' base values
     |                                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 246 |                 quantization: level,
 247 |                 testCases: createQuantizationTestCases(count: 100)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:292:44: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
 290 |         // When: Perform various MLX operations
 291 |         let operations = [
 292 |             ("Model Loading", { await self.mlxBenchmarker.loadQLearningModel() }),
     |                                            |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                            |- note: chain the optional using '?' to access member 'loadQLearningModel' only for non-'nil' base values
     |                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:293:40: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performInference' of wrapped base type 'MLXPerformanceBenchmarker'
 291 |         let operations = [
 292 |             ("Model Loading", { await self.mlxBenchmarker.loadQLearningModel() }),
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
     |                                        |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                        |- note: chain the optional using '?' to access member 'performInference' only for non-'nil' base values
     |                                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),
 295 |             ("Model Unloading", { await self.mlxBenchmarker.unloadModel() }),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:295:46: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),
 295 |             ("Model Unloading", { await self.mlxBenchmarker.unloadModel() }),
     |                                              |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                              |- note: chain the optional using '?' to access member 'unloadModel' only for non-'nil' base values
     |                                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 296 |         ]
 297 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:294:39: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performTraining' of wrapped base type 'MLXPerformanceBenchmarker'
 292 |             ("Model Loading", { await self.mlxBenchmarker.loadQLearningModel() }),
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),
     |                                       |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performTraining' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                       |- note: chain the optional using '?' to access member 'performTraining' only for non-'nil' base values
     |                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 295 |             ("Model Unloading", { await self.mlxBenchmarker.unloadModel() }),
 296 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:343:32: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performConcurrentInference' of wrapped base type 'MLXPerformanceBenchmarker'
 341 |             for i in 1 ... 5 {
 342 |                 group.addTask {
 343 |                     await self.mlxBenchmarker.performConcurrentInference(id: i)
     |                                |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performConcurrentInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                |- note: chain the optional using '?' to access member 'performConcurrentInference' only for non-'nil' base values
     |                                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 344 |                 }
 345 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:368:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'clearModelCache' of wrapped base type 'MLXPerformanceBenchmarker'
 366 |     func testMLXModelCompilationAndCaching() async throws {
 367 |         // Given: Clean state with no cached models
 368 |         await mlxBenchmarker.clearModelCache()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'clearModelCache' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'clearModelCache' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 369 | 
 370 |         // When: Compile model for first time

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:372:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'compileQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
 370 |         // When: Compile model for first time
 371 |         let firstCompilationStart = CFAbsoluteTimeGetCurrent()
 372 |         await mlxBenchmarker.compileQLearningModel()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'compileQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'compileQLearningModel' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 373 |         let firstCompilationTime = CFAbsoluteTimeGetCurrent() - firstCompilationStart
 374 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:376:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
 374 | 
 375 |         // Clear model from memory but keep cache
 376 |         await mlxBenchmarker.unloadModel()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'unloadModel' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 377 | 
 378 |         // Load model again (should use cache)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:380:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
 378 |         // Load model again (should use cache)
 379 |         let cachedLoadStart = CFAbsoluteTimeGetCurrent()
 380 |         await mlxBenchmarker.loadQLearningModel()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'loadQLearningModel' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 381 |         let cachedLoadTime = CFAbsoluteTimeGetCurrent() - cachedLoadStart
 382 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:405:37: error: extra arguments at positions #1, #2, #3 in call
 403 |             createLargeFormData(),
 404 |             acquisition: createComplexAcquisition(),
 405 |             userProfile: UserProfile(id: UUID(), name: "Memory Test User", email: "test@example.com")
     |                                     `- error: extra arguments at positions #1, #2, #3 in call
 406 |         )
 407 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:405:37: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 403 |             createLargeFormData(),
 404 |             acquisition: createComplexAcquisition(),
 405 |             userProfile: UserProfile(id: UUID(), name: "Memory Test User", email: "test@example.com")
     |                                     `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 406 |         )
 407 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:483:42: error: extra arguments at positions #1, #2, #3 in call
 481 |             let formData = createVariedFormData(index: i)
 482 |             let acquisition = createVariedAcquisition(index: i)
 483 |             let userProfile = UserProfile(id: UUID(), name: "CPU Test User \(i)", email: "test\(i)@example.com")
     |                                          `- error: extra arguments at positions #1, #2, #3 in call
 484 | 
 485 |             _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:483:42: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 481 |             let formData = createVariedFormData(index: i)
 482 |             let acquisition = createVariedAcquisition(index: i)
 483 |             let userProfile = UserProfile(id: UUID(), name: "CPU Test User \(i)", email: "test\(i)@example.com")
     |                                          `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 484 | 
 485 |             _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:566:19: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performContinuousInference' of wrapped base type 'MLXPerformanceBenchmarker'
 564 |         while CFAbsoluteTimeGetCurrent() - startTime < operationDuration {
 565 |             // Continuous MLX inference operations
 566 |             await mlxBenchmarker.performContinuousInference(duration: 10) // 10 second bursts
     |                   |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performContinuousInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                   |- note: chain the optional using '?' to access member 'performContinuousInference' only for non-'nil' base values
     |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 567 | 
 568 |             // Check for thermal throttling

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:581:47: error: type 'Equatable' has no member 'critical'
 579 | 
 580 |         // Then: Should not cause excessive thermal issues
 581 |         XCTAssertNotEqual(finalThermalState, .critical,
     |                                               `- error: type 'Equatable' has no member 'critical'
 582 |                           "Extended MLX operations should not cause critical thermal state")
 583 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:607:46: error: extra arguments at positions #1, #2, #3 in call
 605 |                 let formData = createVariedFormData(index: i)
 606 |                 let acquisition = createVariedAcquisition(index: i)
 607 |                 let userProfile = UserProfile(id: UUID(), name: "Load Test User", email: "loadtest@example.com")
     |                                              `- error: extra arguments at positions #1, #2, #3 in call
 608 | 
 609 |                 _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:607:46: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 605 |                 let formData = createVariedFormData(index: i)
 606 |                 let acquisition = createVariedAcquisition(index: i)
 607 |                 let userProfile = UserProfile(id: UUID(), name: "Load Test User", email: "loadtest@example.com")
     |                                              `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 608 | 
 609 |                 _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:630:39: error: 'PerformanceMetrics' is ambiguous for type lookup in this context
 628 |         // Given: Progressively larger Q-table sizes
 629 |         let dataSizes = [1000, 5000, 10000, 25000, 50000]
 630 |         var performanceMetrics: [Int: PerformanceMetrics] = [:]
     |                                       `- error: 'PerformanceMetrics' is ambiguous for type lookup in this context
 631 | 
 632 |         // When: Test performance at each data size
     :
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- note: found this candidate
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:495:8: note: found this candidate
493 | }
494 | 
495 | struct PerformanceMetrics {
    |        `- note: found this candidate
496 |     let average: TimeInterval
497 |     let p95: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:655:62: error: incorrect argument labels in call (have 'lookupTime:updateTime:', expected 'average:p95:')
 653 |             let updateTime = CFAbsoluteTimeGetCurrent() - updateStart
 654 | 
 655 |             performanceMetrics[dataSize] = PerformanceMetrics(
     |                                                              `- error: incorrect argument labels in call (have 'lookupTime:updateTime:', expected 'average:p95:')
 656 |                 lookupTime: lookupTime / 1000, // Average per lookup
 657 |                 updateTime: updateTime / 1000 // Average per update

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:686:61: error: cannot infer contextual base in reference to member 'textField'
 684 |         [
 685 |             FieldSuggestionScenario(
 686 |                 state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
     |                                                             `- error: cannot infer contextual base in reference to member 'textField'
 687 |                 expectedComplexity: .medium
 688 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:686:82: error: cannot infer contextual base in reference to member 'informationTechnology'
 684 |         [
 685 |             FieldSuggestionScenario(
 686 |                 state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
     |                                                                                  `- error: cannot infer contextual base in reference to member 'informationTechnology'
 687 |                 expectedComplexity: .medium
 688 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:687:38: error: cannot infer contextual base in reference to member 'medium'
 685 |             FieldSuggestionScenario(
 686 |                 state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
 687 |                 expectedComplexity: .medium
     |                                      `- error: cannot infer contextual base in reference to member 'medium'
 688 |             ),
 689 |             FieldSuggestionScenario(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:690:61: error: cannot infer contextual base in reference to member 'dropdownField'
 688 |             ),
 689 |             FieldSuggestionScenario(
 690 |                 state: createTestQLearningState(fieldType: .dropdownField, context: .construction),
     |                                                             `- error: cannot infer contextual base in reference to member 'dropdownField'
 691 |                 expectedComplexity: .high
 692 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:690:86: error: cannot infer contextual base in reference to member 'construction'
 688 |             ),
 689 |             FieldSuggestionScenario(
 690 |                 state: createTestQLearningState(fieldType: .dropdownField, context: .construction),
     |                                                                                      `- error: cannot infer contextual base in reference to member 'construction'
 691 |                 expectedComplexity: .high
 692 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:691:38: error: cannot infer contextual base in reference to member 'high'
 689 |             FieldSuggestionScenario(
 690 |                 state: createTestQLearningState(fieldType: .dropdownField, context: .construction),
 691 |                 expectedComplexity: .high
     |                                      `- error: cannot infer contextual base in reference to member 'high'
 692 |             ),
 693 |             FieldSuggestionScenario(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:694:61: error: cannot infer contextual base in reference to member 'numberField'
 692 |             ),
 693 |             FieldSuggestionScenario(
 694 |                 state: createTestQLearningState(fieldType: .numberField, context: .professionalServices),
     |                                                             `- error: cannot infer contextual base in reference to member 'numberField'
 695 |                 expectedComplexity: .low
 696 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:694:84: error: cannot infer contextual base in reference to member 'professionalServices'
 692 |             ),
 693 |             FieldSuggestionScenario(
 694 |                 state: createTestQLearningState(fieldType: .numberField, context: .professionalServices),
     |                                                                                    `- error: cannot infer contextual base in reference to member 'professionalServices'
 695 |                 expectedComplexity: .low
 696 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:695:38: error: cannot infer contextual base in reference to member 'low'
 693 |             FieldSuggestionScenario(
 694 |                 state: createTestQLearningState(fieldType: .numberField, context: .professionalServices),
 695 |                 expectedComplexity: .low
     |                                      `- error: cannot infer contextual base in reference to member 'low'
 696 |             ),
 697 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:705:41: error: extra arguments at positions #1, #2, #3 in call
 703 |                 formData: createSimpleFormData(),
 704 |                 acquisition: createSimpleAcquisition(),
 705 |                 userProfile: UserProfile(id: UUID(), name: "Simple User", email: "simple@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 706 |             ),
 707 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:705:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 703 |                 formData: createSimpleFormData(),
 704 |                 acquisition: createSimpleAcquisition(),
 705 |                 userProfile: UserProfile(id: UUID(), name: "Simple User", email: "simple@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 706 |             ),
 707 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:710:41: error: extra arguments at positions #1, #2, #3 in call
 708 |                 formData: createComplexFormData(),
 709 |                 acquisition: createComplexAcquisition(),
 710 |                 userProfile: UserProfile(id: UUID(), name: "Complex User", email: "complex@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 711 |             ),
 712 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:710:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 708 |                 formData: createComplexFormData(),
 709 |                 acquisition: createComplexAcquisition(),
 710 |                 userProfile: UserProfile(id: UUID(), name: "Complex User", email: "complex@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 711 |             ),
 712 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:715:41: error: extra arguments at positions #1, #2, #3 in call
 713 |                 formData: createLargeFormData(),
 714 |                 acquisition: createLargeAcquisition(),
 715 |                 userProfile: UserProfile(id: UUID(), name: "Large User", email: "large@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 716 |             ),
 717 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:715:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 713 |                 formData: createLargeFormData(),
 714 |                 acquisition: createLargeAcquisition(),
 715 |                 userProfile: UserProfile(id: UUID(), name: "Large User", email: "large@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 716 |             ),
 717 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:722:33: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 720 |     private func createContextClassificationTestData() -> [AcquisitionAggregate] {
 721 |         [
 722 |             AcquisitionAggregate(
     |                                 `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 723 |                 id: UUID(),
 724 |                 title: "Software Development Services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:723:17: error: missing argument for parameter 'managedObject' in call
 721 |         [
 722 |             AcquisitionAggregate(
 723 |                 id: UUID(),
     |                 `- error: missing argument for parameter 'managedObject' in call
 724 |                 title: "Software Development Services",
 725 |                 requirements: "Need cloud computing and database management",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:731:33: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 729 |                 isRecurring: false
 730 |             ),
 731 |             AcquisitionAggregate(
     |                                 `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 732 |                 id: UUID(),
 733 |                 title: "Building Construction Project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:732:17: error: missing argument for parameter 'managedObject' in call
 730 |             ),
 731 |             AcquisitionAggregate(
 732 |                 id: UUID(),
     |                 `- error: missing argument for parameter 'managedObject' in call
 733 |                 title: "Building Construction Project",
 734 |                 requirements: "Construction services and building materials",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:747:32: error: cannot find 'FieldType' in scope
 745 |             QNetworkUpdateScenario(
 746 |                 state: createTestQLearningState(
 747 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
     |                                `- error: cannot find 'FieldType' in scope
 748 |                     context: ContextCategory.allCases.randomElement() ?? .general
 749 |                 ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:748:30: error: cannot find 'ContextCategory' in scope
 746 |                 state: createTestQLearningState(
 747 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
 748 |                     context: ContextCategory.allCases.randomElement() ?? .general
     |                              `- error: cannot find 'ContextCategory' in scope
 749 |                 ),
 750 |                 action: createRandomQLearningAction(),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:810:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 808 |             revision: "2024-01",
 809 |             fields: ["simpleField": ""],
 810 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 811 |         )
 812 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:827:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 825 |                 "performancePeriod": "",
 826 |             ],
 827 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 828 |         )
 829 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:841:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 839 |             revision: "2024-01",
 840 |             fields: fields,
 841 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 842 |         )
 843 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:854:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
 852 |                 "dynamicField\(index)": "",
 853 |             ],
 854 |             metadata: ["index": "\(index)"]
     |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
 855 |         )
 856 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:859:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 857 | 
 858 |     private func createSimpleAcquisition() -> AcquisitionAggregate {
 859 |         AcquisitionAggregate(
     |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 860 |             id: UUID(),
 861 |             title: "Simple Acquisition",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:860:13: error: missing argument for parameter 'managedObject' in call
 858 |     private func createSimpleAcquisition() -> AcquisitionAggregate {
 859 |         AcquisitionAggregate(
 860 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 861 |             title: "Simple Acquisition",
 862 |             requirements: "Basic requirements",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:871:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 869 | 
 870 |     private func createComplexAcquisition() -> AcquisitionAggregate {
 871 |         AcquisitionAggregate(
     |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 872 |             id: UUID(),
 873 |             title: "Complex IT Infrastructure Project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:872:13: error: missing argument for parameter 'managedObject' in call
 870 |     private func createComplexAcquisition() -> AcquisitionAggregate {
 871 |         AcquisitionAggregate(
 872 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 873 |             title: "Complex IT Infrastructure Project",
 874 |             requirements: "Comprehensive software development with cloud computing, database design, network security, and cybersecurity implementation for enterprise IT infrastructure.",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:885:36: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 883 |         let largeRequirements = String(repeating: "Complex requirements involving multiple stakeholders, extensive documentation, comprehensive testing, quality assurance, and ongoing support services. ", count: 20)
 884 | 
 885 |         return AcquisitionAggregate(
     |                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 886 |             id: UUID(),
 887 |             title: "Large Scale Enterprise Transformation",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:886:13: error: missing argument for parameter 'managedObject' in call
 884 | 
 885 |         return AcquisitionAggregate(
 886 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 887 |             title: "Large Scale Enterprise Transformation",
 888 |             requirements: largeRequirements,

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:900:36: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 898 |         let context = contexts[index % contexts.count]
 899 | 
 900 |         return AcquisitionAggregate(
     |                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 901 |             id: UUID(),
 902 |             title: "\(context) Project \(index)",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:901:13: error: missing argument for parameter 'managedObject' in call
 899 | 
 900 |         return AcquisitionAggregate(
 901 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 902 |             title: "\(context) Project \(index)",
 903 |             requirements: "Requirements for \(context.lowercased()) project \(index)",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:913:23: error: cannot find 'ContextCategory' in scope
 911 |     private func createRandomAcquisitionContext() -> AcquisitionContext {
 912 |         AcquisitionContext(
 913 |             category: ContextCategory.allCases.randomElement() ?? .general,
     |                       `- error: cannot find 'ContextCategory' in scope
 914 |             confidence: Double.random(in: 0.5 ... 1.0),
 915 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:915:23: error: cannot find 'ContextFeatures' in scope
 913 |             category: ContextCategory.allCases.randomElement() ?? .general,
 914 |             confidence: Double.random(in: 0.5 ... 1.0),
 915 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
 916 |                 estimatedValue: Double.random(in: 10000 ... 1_000_000),
 917 |                 hasUrgentDeadline: Bool.random(),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:912:9: error: no exact matches in call to initializer 
 910 | 
 911 |     private func createRandomAcquisitionContext() -> AcquisitionContext {
 912 |         AcquisitionContext(
     |         |- error: no exact matches in call to initializer 
     |         `- note: candidate has partially matching parameter list (from: any Decoder)
 913 |             category: ContextCategory.allCases.randomElement() ?? .general,
 914 |             confidence: Double.random(in: 0.5 ... 1.0),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:542:12: note: candidate has partially matching parameter list (acquisitionId: UUID, documentType: TestDocumentType, acquisitionValue: Double, complexity: TestComplexityLevel, timeConstraints: TestTimeConstraints, regulatoryRequirements: Set<TestFARClause>, historicalSuccess: Double, userProfile: TestUserProfile, workflowProgress: Double, completedDocuments: [String])
540 |     }
541 | 
542 |     public init(acquisitionId: UUID, documentType: TestDocumentType, acquisitionValue: Double, complexity: TestComplexityLevel, timeConstraints: TestTimeConstraints, regulatoryRequirements: Set<TestFARClause>, historicalSuccess: Double, userProfile: TestUserProfile, workflowProgress: Double, completedDocuments: [String]) {
    |            `- note: candidate has partially matching parameter list (acquisitionId: UUID, documentType: TestDocumentType, acquisitionValue: Double, complexity: TestComplexityLevel, timeConstraints: TestTimeConstraints, regulatoryRequirements: Set<TestFARClause>, historicalSuccess: Double, userProfile: TestUserProfile, workflowProgress: Double, completedDocuments: [String])
543 |         self.acquisitionId = acquisitionId
544 |         self.documentType = documentType

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1296:22: error: cannot find type 'ThermalState' in scope
1294 |     func getCurrentThermalState() async -> ThermalState {
1295 |         // Simulate thermal state
1296 |         let states: [ThermalState] = [.nominal, .fair, .serious]
     |                      `- error: cannot find type 'ThermalState' in scope
1297 |         return states.randomElement() ?? .nominal
1298 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1303:16: error: no exact matches in call to initializer 
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue
1303 |         return Double(finalValue - initialValue) / 3.0 // Normalized 0-1
     |                `- error: no exact matches in call to initializer 
1304 |     }
1305 | }

Swift.Double.init:2:8: note: candidate expects value of type 'Builtin.FPIEEE64' for parameter #1 (got 'Duration')
1 | struct Double {
2 | public init(_ _value: Builtin.FPIEEE64)}
  |        `- note: candidate expects value of type 'Builtin.FPIEEE64' for parameter #1 (got 'Duration')
3 | 

Swift.Double.init:2:8: note: candidate expects value of type 'Int' for parameter #1 (got 'Duration')
1 | struct Double {
2 | public init(_ v: Int)}
  |        `- note: candidate expects value of type 'Int' for parameter #1 (got 'Duration')
3 | 

Swift.Double.init:3:21: note: candidate expects value of type 'Float16' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
3 |   @inlinable public init(_ other: Float16)}
  |                     `- note: candidate expects value of type 'Float16' for parameter #1 (got 'Duration')
4 | 

Swift.Double.init:2:19: note: candidate expects value of type 'Float' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @inlinable public init(_ other: Float)}
  |                   `- note: candidate expects value of type 'Float' for parameter #1 (got 'Duration')
3 | 

Swift.Double.init:2:19: note: candidate expects value of type 'Double' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @inlinable public init(_ other: Double)}
  |                   `- note: candidate expects value of type 'Double' for parameter #1 (got 'Duration')
3 | 

CoreFoundation.Double.init:2:8: note: candidate expects value of type 'CGFloat' for parameter #1 (got 'Duration')
1 | struct Double {
2 | public init(_ value: CGFloat)}
  |        `- note: candidate expects value of type 'CGFloat' for parameter #1 (got 'Duration')
3 | 

Foundation.Double.init:3:10: note: candidate expects value of type 'NSNumber' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @available(swift, deprecated: 4, renamed: "init(truncating:)")
3 |   public init(_ number: __shared NSNumber)}
  |          `- note: candidate expects value of type 'NSNumber' for parameter #1 (got 'Duration')
4 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:12:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
 10 |     // MARK: - Test Infrastructure
 11 | 
 12 |     var adaptiveService: AdaptiveFormPopulationService?
    |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
 13 |     var qLearningAgent: FormFieldQLearningAgent?
 14 |     var modificationTracker: FormModificationTracker?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:13:25: error: cannot find type 'FormFieldQLearningAgent' in scope
 11 | 
 12 |     var adaptiveService: AdaptiveFormPopulationService?
 13 |     var qLearningAgent: FormFieldQLearningAgent?
    |                         `- error: cannot find type 'FormFieldQLearningAgent' in scope
 14 |     var modificationTracker: FormModificationTracker?
 15 |     var mockCoreDataActor: MockCoreDataActor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:14:30: error: cannot find type 'FormModificationTracker' in scope
 12 |     var adaptiveService: AdaptiveFormPopulationService?
 13 |     var qLearningAgent: FormFieldQLearningAgent?
 14 |     var modificationTracker: FormModificationTracker?
    |                              `- error: cannot find type 'FormModificationTracker' in scope
 15 |     var mockCoreDataActor: MockCoreDataActor?
 16 |     var privacyValidator: PrivacyComplianceValidator?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:607:48: error: cannot find type 'ContextCategory' in scope
605 |     // MARK: - Test Helper Methods
606 | 
607 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
    |                                                `- error: cannot find type 'ContextCategory' in scope
608 |         AcquisitionContext(
609 |             category: category,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:94: error: cannot find type 'QLearningState' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                                                              `- error: cannot find type 'QLearningState' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:54: error: cannot find type 'FieldType' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                      `- error: cannot find type 'FieldType' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:74: error: cannot find type 'ContextCategory' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                                          `- error: cannot find type 'ContextCategory' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:658:82: error: cannot find type 'QLearningAction' in scope
656 |     }
657 | 
658 |     private func createTestQLearningAction(value: String, confidence: Double) -> QLearningAction {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
659 |         QLearningAction(suggestedValue: value, confidence: confidence)
660 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:662:60: error: cannot find type 'QLearningState' in scope
660 |     }
661 | 
662 |     private func createExtensiveLearningData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                            `- error: cannot find type 'QLearningState' in scope
663 |         (1 ... 100).map { i in
664 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:662:84: error: cannot find type 'QLearningAction' in scope
660 |     }
661 | 
662 |     private func createExtensiveLearningData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                    `- error: cannot find type 'QLearningAction' in scope
663 |         (1 ... 100).map { i in
664 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:675:59: error: cannot find type 'QLearningState' in scope
673 |     }
674 | 
675 |     private func createSensitivePatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                           `- error: cannot find type 'QLearningState' in scope
676 |         [
677 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:675:83: error: cannot find type 'QLearningAction' in scope
673 |     }
674 | 
675 |     private func createSensitivePatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                   `- error: cannot find type 'QLearningAction' in scope
676 |         [
677 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:690:55: error: cannot find type 'QLearningState' in scope
688 |     }
689 | 
690 |     private func createSimplePatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                       `- error: cannot find type 'QLearningState' in scope
691 |         (
692 |             state: createTestQLearningState(fieldType: .textField, context: .general),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:690:79: error: cannot find type 'QLearningAction' in scope
688 |     }
689 | 
690 |     private func createSimplePatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                                               `- error: cannot find type 'QLearningAction' in scope
691 |         (
692 |             state: createTestQLearningState(fieldType: .textField, context: .general),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:697:56: error: cannot find type 'QLearningState' in scope
695 |     }
696 | 
697 |     private func createComplexPatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                        `- error: cannot find type 'QLearningState' in scope
698 |         (
699 |             state: createTestQLearningState(fieldType: .dropdownField, context: .informationTechnology),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:697:80: error: cannot find type 'QLearningAction' in scope
695 |     }
696 | 
697 |     private func createComplexPatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                                                `- error: cannot find type 'QLearningAction' in scope
698 |         (
699 |             state: createTestQLearningState(fieldType: .dropdownField, context: .informationTechnology),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:704:59: error: cannot find type 'QLearningState' in scope
702 |     }
703 | 
704 |     private func createKnownTrainingDataSet() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                           `- error: cannot find type 'QLearningState' in scope
705 |         (1 ... 50).map { i in
706 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:704:83: error: cannot find type 'QLearningAction' in scope
702 |     }
703 | 
704 |     private func createKnownTrainingDataSet() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                   `- error: cannot find type 'QLearningAction' in scope
705 |         (1 ... 50).map { i in
706 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:717:57: error: cannot find type 'QLearningState' in scope
715 |     }
716 | 
717 |     private func createRegularPatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                         `- error: cannot find type 'QLearningState' in scope
718 |         [
719 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:717:81: error: cannot find type 'QLearningAction' in scope
715 |     }
716 | 
717 |     private func createRegularPatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                 `- error: cannot find type 'QLearningAction' in scope
718 |         [
719 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:60: error: cannot find type 'QLearningState' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                            `- error: cannot find type 'QLearningState' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:84: error: cannot find type 'QLearningAction' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                                                    `- error: cannot find type 'QLearningAction' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:131: error: cannot find type 'AdaptiveFormMetricsCollector' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                                                                                                   `- error: cannot find type 'AdaptiveFormMetricsCollector' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             |- error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
    |             `- note: add stubs for conformance
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: error: invalid redeclaration of 'MockAgenticOrchestrator'
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- error: invalid redeclaration of 'MockAgenticOrchestrator'
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:29:22: error: cannot find 'FormFieldQLearningAgent' in scope
 27 | 
 28 |         // Initialize system components
 29 |         let qAgent = FormFieldQLearningAgent(coreDataActor: mockActor)
    |                      `- error: cannot find 'FormFieldQLearningAgent' in scope
 30 |         qLearningAgent = qAgent
 31 |         let modTracker = FormModificationTracker(coreDataActor: mockActor)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:31:26: error: cannot find 'FormModificationTracker' in scope
 29 |         let qAgent = FormFieldQLearningAgent(coreDataActor: mockActor)
 30 |         qLearningAgent = qAgent
 31 |         let modTracker = FormModificationTracker(coreDataActor: mockActor)
    |                          `- error: cannot find 'FormModificationTracker' in scope
 32 |         modificationTracker = modTracker
 33 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:34:27: error: cannot find 'AdaptiveFormPopulationService' in scope
 32 |         modificationTracker = modTracker
 33 | 
 34 |         adaptiveService = AdaptiveFormPopulationService(
    |                           `- error: cannot find 'AdaptiveFormPopulationService' in scope
 35 |             contextClassifier: AcquisitionContextClassifier(),
 36 |             qLearningAgent: qAgent,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:35:32: error: cannot find 'AcquisitionContextClassifier' in scope
 33 | 
 34 |         adaptiveService = AdaptiveFormPopulationService(
 35 |             contextClassifier: AcquisitionContextClassifier(),
    |                                `- error: cannot find 'AcquisitionContextClassifier' in scope
 36 |             qLearningAgent: qAgent,
 37 |             modificationTracker: modTracker,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:38:32: error: cannot find 'ValueExplanationEngine' in scope
 36 |             qLearningAgent: qAgent,
 37 |             modificationTracker: modTracker,
 38 |             explanationEngine: ValueExplanationEngine(),
    |                                `- error: cannot find 'ValueExplanationEngine' in scope
 39 |             metricsCollector: AdaptiveFormMetricsCollector(),
 40 |             agenticOrchestrator: MockAgenticOrchestrator()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:39:31: error: cannot find 'AdaptiveFormMetricsCollector' in scope
 37 |             modificationTracker: modTracker,
 38 |             explanationEngine: ValueExplanationEngine(),
 39 |             metricsCollector: AdaptiveFormMetricsCollector(),
    |                               `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
 40 |             agenticOrchestrator: MockAgenticOrchestrator()
 41 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:77:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 75 |                 "paymentAmount": "$50,000.00",
 76 |             ],
 77 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 78 |         )
 79 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:82:27: error: extra argument 'requirements' in call
 80 |         let acquisition = createTestAcquisition(
 81 |             title: "Personal Services Contract",
 82 |             requirements: "Need consulting services from John Smith at john.smith@personalservices.com"
    |                           `- error: extra argument 'requirements' in call
 83 |         )
 84 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:85:38: error: extra arguments at positions #1, #2, #3 in call
 83 |         )
 84 | 
 85 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
 86 | 
 87 |         // When: Process form with PII data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:85:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 83 |         )
 84 | 
 85 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 86 | 
 87 |         // When: Process form with PII data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:99:27: error: cannot find 'ContextFeatures' in scope
 97 |                 category: .professionalServices,
 98 |                 confidence: 0.8,
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),
    |                           `- error: cannot find 'ContextFeatures' in scope
100 |                 acquisitionValue: 50000,
101 |                 urgency: .normal,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:96:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 94 |             newValue: "John Smith Personal Services LLC",
 95 |             formType: "SF-1449",
 96 |             context: AcquisitionContext(
    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 97 |                 category: .professionalServices,
 98 |                 confidence: 0.8,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:97:17: error: missing argument for parameter 'from' in call
 95 |             formType: "SF-1449",
 96 |             context: AcquisitionContext(
 97 |                 category: .professionalServices,
    |                 `- error: missing argument for parameter 'from' in call
 98 |                 confidence: 0.8,
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:97:28: error: cannot infer contextual base in reference to member 'professionalServices'
 95 |             formType: "SF-1449",
 96 |             context: AcquisitionContext(
 97 |                 category: .professionalServices,
    |                            `- error: cannot infer contextual base in reference to member 'professionalServices'
 98 |                 confidence: 0.8,
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:101:27: error: cannot infer contextual base in reference to member 'normal'
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),
100 |                 acquisitionValue: 50000,
101 |                 urgency: .normal,
    |                           `- error: cannot infer contextual base in reference to member 'normal'
102 |                 complexity: .medium,
103 |                 acquisitionId: acquisition.id

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:102:30: error: cannot infer contextual base in reference to member 'medium'
100 |                 acquisitionValue: 50000,
101 |                 urgency: .normal,
102 |                 complexity: .medium,
    |                              `- error: cannot infer contextual base in reference to member 'medium'
103 |                 acquisitionId: acquisition.id
104 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:132:13: error: cannot find 'FieldModification' in scope
130 |         // Given: Form interactions with various field types
131 |         let testModifications = [
132 |             FieldModification(
    |             `- error: cannot find 'FieldModification' in scope
133 |                 fieldId: "paymentTerms",
134 |                 originalValue: "NET-15",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:140:13: error: cannot find 'FieldModification' in scope
138 |                 context: createTestContext(.informationTechnology)
139 |             ),
140 |             FieldModification(
    |             `- error: cannot find 'FieldModification' in scope
141 |                 fieldId: "evaluationCriteria",
142 |                 originalValue: "Price Only",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:138:45: error: cannot infer contextual base in reference to member 'informationTechnology'
136 |                 timestamp: Date(),
137 |                 formType: "SF-1449",
138 |                 context: createTestContext(.informationTechnology)
    |                                             `- error: cannot infer contextual base in reference to member 'informationTechnology'
139 |             ),
140 |             FieldModification(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:146:45: error: cannot infer contextual base in reference to member 'informationTechnology'
144 |                 timestamp: Date(),
145 |                 formType: "SF-1449",
146 |                 context: createTestContext(.informationTechnology)
    |                                             `- error: cannot infer contextual base in reference to member 'informationTechnology'
147 |             ),
148 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:198:50: error: value of type 'MockCoreDataActor' has no member 'getMemoryDump'
196 | 
197 |         // Verify secure deletion (memory should be overwritten)
198 |         let memoryDump = await mockCoreDataActor.getMemoryDump()
    |                                                  `- error: value of type 'MockCoreDataActor' has no member 'getMemoryDump'
199 |         let sensitiveDataFound = memoryDump.contains { dump in
200 |             dump.contains("fieldType:") || dump.contains("context:") || dump.contains("qValue:")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:215:50: error: cannot infer contextual base in reference to member 'textField'
213 |         // Given: System with learning data
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                  `- error: cannot infer contextual base in reference to member 'textField'
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
217 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:215:71: error: cannot infer contextual base in reference to member 'informationTechnology'
213 |         // Given: System with learning data
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                                       `- error: cannot infer contextual base in reference to member 'informationTechnology'
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
217 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:216:50: error: cannot infer contextual base in reference to member 'dropdownField'
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
    |                                                  `- error: cannot infer contextual base in reference to member 'dropdownField'
217 |         ]
218 |         let testActions = [

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:216:75: error: cannot infer contextual base in reference to member 'construction'
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
    |                                                                           `- error: cannot infer contextual base in reference to member 'construction'
217 |         ]
218 |         let testActions = [

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:329:58: error: cannot infer contextual base in reference to member 'textField'
327 |         // Given: Private user patterns in Q-learning model
328 |         let privatePatterns = [
329 |             (state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                          `- error: cannot infer contextual base in reference to member 'textField'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:329:79: error: cannot infer contextual base in reference to member 'informationTechnology'
327 |         // Given: Private user patterns in Q-learning model
328 |         let privatePatterns = [
329 |             (state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                                               `- error: cannot infer contextual base in reference to member 'informationTechnology'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:332:58: error: cannot infer contextual base in reference to member 'textField'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),
332 |             (state: createTestQLearningState(fieldType: .textField, context: .construction),
    |                                                          `- error: cannot infer contextual base in reference to member 'textField'
333 |              action: createTestQLearningAction(value: "Private Construction Value", confidence: 0.8),
334 |              reward: 0.8),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:332:79: error: cannot infer contextual base in reference to member 'construction'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),
332 |             (state: createTestQLearningState(fieldType: .textField, context: .construction),
    |                                                                               `- error: cannot infer contextual base in reference to member 'construction'
333 |              action: createTestQLearningAction(value: "Private Construction Value", confidence: 0.8),
334 |              reward: 0.8),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:369:62: error: cannot infer contextual base in reference to member 'textField'
367 |         await adaptiveService.enableDifferentialPrivacy(epsilon: 1.0) // Standard privacy parameter
368 | 
369 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                              `- error: cannot infer contextual base in reference to member 'textField'
370 |         let testAction = createTestQLearningAction(value: "DP Test", confidence: 0.8)
371 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:369:83: error: cannot infer contextual base in reference to member 'informationTechnology'
367 |         await adaptiveService.enableDifferentialPrivacy(epsilon: 1.0) // Standard privacy parameter
368 | 
369 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'informationTechnology'
370 |         let testAction = createTestQLearningAction(value: "DP Test", confidence: 0.8)
371 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:373:27: error: cannot find type 'ValuePrediction' in scope
371 | 
372 |         // When: Make multiple queries for the same state-action pair
373 |         var predictions: [ValuePrediction] = []
    |                           `- error: cannot find type 'ValuePrediction' in scope
374 |         for _ in 1 ... 100 {
375 |             let prediction = await qLearningAgent.predictFieldValue(state: testState)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:380:48: error: cannot infer key path type from context; consider explicitly specifying a root type
378 | 
379 |         // Then: Predictions should have appropriate noise for privacy
380 |         let confidenceValues = predictions.map(\.confidence)
    |                                                `- error: cannot infer key path type from context; consider explicitly specifying a root type
381 |         let confidenceVariance = calculateVariance(confidenceValues)
382 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:440:37: error: value of optional type 'AdversarialAttackTester?' must be unwrapped to refer to member 'attemptModelInversionAttack' of wrapped base type 'AdversarialAttackTester'
438 | 
439 |         // When: Attempt model inversion attack
440 |         let inversionResult = await adversarialTester.attemptModelInversionAttack(
    |                                     |- error: value of optional type 'AdversarialAttackTester?' must be unwrapped to refer to member 'attemptModelInversionAttack' of wrapped base type 'AdversarialAttackTester'
    |                                     |- note: chain the optional using '?' to access member 'attemptModelInversionAttack' only for non-'nil' base values
    |                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
441 |             target: qLearningAgent,
442 |             knownTrainingData: knownTrainingData

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:462:32: error: cannot find 'AdaptiveFormMetricsCollector' in scope
460 | 
461 |         // Given: System collecting performance metrics
462 |         let metricsCollector = AdaptiveFormMetricsCollector()
    |                                `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
463 | 
464 |         // Process forms with different privacy-sensitive patterns

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:500:38: error: extra arguments at positions #1, #2, #3 in call
498 |         let formData = createTestFormData()
499 |         let acquisition = createTestAcquisition(title: "Network Test Acquisition")
500 |         let userProfile = UserProfile(id: UUID(), name: "Network Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
501 | 
502 |         _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:500:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
498 |         let formData = createTestFormData()
499 |         let acquisition = createTestAcquisition(title: "Network Test Acquisition")
500 |         let userProfile = UserProfile(id: UUID(), name: "Network Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
501 | 
502 |         _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:510:41: error: cannot infer contextual base in reference to member 'informationTechnology'
508 |             newValue: "modified",
509 |             formType: "SF-1449",
510 |             context: createTestContext(.informationTechnology)
    |                                         `- error: cannot infer contextual base in reference to member 'informationTechnology'
511 |         )
512 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:517:41: error: cannot infer contextual base in reference to member 'informationTechnology'
515 |             fieldId: "testField",
516 |             suggestedValue: "test value",
517 |             context: createTestContext(.informationTechnology)
    |                                         `- error: cannot infer contextual base in reference to member 'informationTechnology'
518 |         )
519 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:550:62: error: cannot infer contextual base in reference to member 'textField'
548 | 
549 |         // When: Perform ML operations
550 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                              `- error: cannot infer contextual base in reference to member 'textField'
551 |         _ = await qLearningAgent.predictFieldValue(state: testState)
552 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:550:83: error: cannot infer contextual base in reference to member 'informationTechnology'
548 | 
549 |         // When: Perform ML operations
550 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'informationTechnology'
551 |         _ = await qLearningAgent.predictFieldValue(state: testState)
552 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:554:33: error: cannot find 'AcquisitionContextClassifier' in scope
552 | 
553 |         let testAcquisition = createTestAcquisition(title: "MLX Test")
554 |         let contextClassifier = AcquisitionContextClassifier()
    |                                 `- error: cannot find 'AcquisitionContextClassifier' in scope
555 |         _ = try await contextClassifier.classifyAcquisition(testAcquisition)
556 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:571:19: warning: value 'mockCoreDataActor' was defined but never used; consider replacing with boolean test
569 |     /// Test encrypted Core Data storage with key rotation
570 |     func testEncryptedCoreDataStorageWithKeyRotation() async throws {
571 |         guard let mockCoreDataActor else {
    |                   `- warning: value 'mockCoreDataActor' was defined but never used; consider replacing with boolean test
572 |             XCTFail("MockCoreDataActor should be initialized")
573 |             return

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:611:23: error: cannot find 'ContextFeatures' in scope
609 |             category: category,
610 |             confidence: 0.8,
611 |             features: ContextFeatures(
    |                       `- error: cannot find 'ContextFeatures' in scope
612 |                 estimatedValue: 100_000,
613 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:608:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
606 | 
607 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
608 |         AcquisitionContext(
    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
609 |             category: category,
610 |             confidence: 0.8,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:609:13: error: missing argument for parameter 'from' in call
607 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
608 |         AcquisitionContext(
609 |             category: category,
    |             `- error: missing argument for parameter 'from' in call
610 |             confidence: 0.8,
611 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:619:23: error: cannot infer contextual base in reference to member 'normal'
617 |             ),
618 |             acquisitionValue: 100_000,
619 |             urgency: .normal,
    |                       `- error: cannot infer contextual base in reference to member 'normal'
620 |             complexity: .medium,
621 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:620:26: error: cannot infer contextual base in reference to member 'medium'
618 |             acquisitionValue: 100_000,
619 |             urgency: .normal,
620 |             complexity: .medium,
    |                          `- error: cannot infer contextual base in reference to member 'medium'
621 |             acquisitionId: UUID()
622 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:626:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
624 | 
625 |     private func createTestAcquisition(title: String) -> AcquisitionAggregate {
626 |         AcquisitionAggregate(
    |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
627 |             id: UUID(),
628 |             title: title,

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:627:13: error: missing argument for parameter 'managedObject' in call
625 |     private func createTestAcquisition(title: String) -> AcquisitionAggregate {
626 |         AcquisitionAggregate(
627 |             id: UUID(),
    |             `- error: missing argument for parameter 'managedObject' in call
628 |             title: title,
629 |             requirements: "Test requirements",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:645:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
643 |                 "paymentTerms": "NET-30",
644 |             ],
645 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
646 |         )
647 |     }
[23/35] Compiling AIKOTests AdaptiveFormPerformanceTests.swift
/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:833:58: error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
831 |     // MARK: - Test Helper Methods
832 | 
833 |     private func createTestAcquisition(title: String) -> AcquisitionAggregate {
    |                                                          `- error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
834 |         AcquisitionAggregate(
835 |             id: UUID(),

/Users/J/aiko/Sources/Domain/Models/AcquisitionAggregate.swift:6:20: note: found this candidate
  4 | 
  5 | /// Rich domain model for Acquisition aggregate root
  6 | public final class AcquisitionAggregate: AggregateRoot<Acquisition>, @unchecked Sendable {
    |                    `- note: found this candidate
  7 |     // MARK: - Properties
  8 | 

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:295:15: note: found this candidate
293 | 
294 | /// Acquisition aggregate for context classification
295 | public struct AcquisitionAggregate: Sendable {
    |               `- note: found this candidate
296 |     public let title: String?
297 |     public let description: String?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:845:79: error: 'AcquisitionContext' is ambiguous for type lookup in this context
843 |     }
844 | 
845 |     private func createTestAcquisitionContext(_ category: ContextCategory) -> AcquisitionContext {
    |                                                                               `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
846 |         let acquisitionType: AcquisitionType = switch category {
847 |         case .informationTechnology:

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:882:94: error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
880 |     }
881 | 
882 |     private func createHighConfidenceScenario() -> (formData: AppCore.FormData, acquisition: AcquisitionAggregate, userProfile: AppCore.UserProfile) {
    |                                                                                              `- error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
883 |         // Create test form fields using the correct AppCore FormField
884 |         let testField = AppCore.FormField(

/Users/J/aiko/Sources/Domain/Models/AcquisitionAggregate.swift:6:20: note: found this candidate
  4 | 
  5 | /// Rich domain model for Acquisition aggregate root
  6 | public final class AcquisitionAggregate: AggregateRoot<Acquisition>, @unchecked Sendable {
    |                    `- note: found this candidate
  7 |     // MARK: - Properties
  8 | 

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:295:15: note: found this candidate
293 | 
294 | /// Acquisition aggregate for context classification
295 | public struct AcquisitionAggregate: Sendable {
    |               `- note: found this candidate
296 |     public let title: String?
297 |     public let description: String?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:937:11: error: cannot find type 'AdaptiveFormEventType' in scope
935 | // MARK: - Test Extensions
936 | 
937 | extension AdaptiveFormEventType {
    |           `- error: cannot find type 'AdaptiveFormEventType' in scope
938 |     init?(rawValue: String) {
939 |         switch rawValue {

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:24:50: error: missing arguments for parameters 'aiOrchestrator', 'learningLoop', 'adaptiveService', 'coreDataStack' in call
 22 |         // Initialize test infrastructure
 23 |         mockCoreDataActor = MockCoreDataActor()
 24 |         agenticOrchestrator = AgenticOrchestrator()
    |                                                  `- error: missing arguments for parameters 'aiOrchestrator', 'learningLoop', 'adaptiveService', 'coreDataStack' in call
 25 |         learningLoop = LearningLoop.shared
 26 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:29:12: note: 'init(aiOrchestrator:learningLoop:adaptiveService:coreDataStack:)' declared here
 27 |     private let localRLAgent: LocalRLAgent
 28 | 
 29 |     public init(
    |            `- note: 'init(aiOrchestrator:learningLoop:adaptiveService:coreDataStack:)' declared here
 30 |         aiOrchestrator: AIOrchestrator,
 31 |         learningLoop: LearningLoop,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:29:69: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 27 |         // Initialize adaptive form components
 28 |         let contextClassifier = AcquisitionContextClassifier()
 29 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 30 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
 31 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:30:74: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 28 |         let contextClassifier = AcquisitionContextClassifier()
 29 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
 30 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
    |                                                                          `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 31 |         let explanationEngine = ValueExplanationEngine()
 32 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:45:39: error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
 43 |         // Initialize enhanced FormIntelligenceAdapter
 44 |         formIntelligenceAdapter = FormIntelligenceAdapter.liveValue
 45 |         await formIntelligenceAdapter.setAdaptiveService(adaptiveFormService)
    |                                       `- error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
 46 | 
 47 |         // Enable adaptive learning for tests

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:80:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 78 |                 "deliverySchedule": "",
 79 |             ],
 80 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 81 |         )
 82 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:83:49: error: extra arguments at positions #1, #4, #5, #6, #7 in call
 81 |         )
 82 | 
 83 |         let itAcquisition = AcquisitionAggregate(
    |                                                 `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
 84 |             id: UUID(),
 85 |             title: "Software Development Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:84:23: error: missing argument for parameter 'description' in call
 82 | 
 83 |         let itAcquisition = AcquisitionAggregate(
 84 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
 85 |             title: "Software Development Services",
 86 |             requirements: "Need comprehensive software development for IT infrastructure with cloud computing and database management",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:86:27: error: cannot convert value of type 'String' to expected argument type '[String]'
 84 |             id: UUID(),
 85 |             title: "Software Development Services",
 86 |             requirements: "Need comprehensive software development for IT infrastructure with cloud computing and database management",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
 87 |             projectDescription: "Complete IT solution with software programming, network security, and cybersecurity implementation",
 88 |             estimatedValue: 500_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:129:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
127 |                 "performancePeriod": "",
128 |             ],
129 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
130 |         )
131 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:132:56: error: extra arguments at positions #1, #4, #5, #6, #7 in call
130 |         )
131 | 
132 |         let ambiguousAcquisition = AcquisitionAggregate(
    |                                                        `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
133 |             id: UUID(),
134 |             title: "General Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:133:23: error: missing argument for parameter 'description' in call
131 | 
132 |         let ambiguousAcquisition = AcquisitionAggregate(
133 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
134 |             title: "General Services",
135 |             requirements: "Need various general services", // Very generic, low confidence

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:135:27: error: cannot convert value of type 'String' to expected argument type '[String]'
133 |             id: UUID(),
134 |             title: "General Services",
135 |             requirements: "Need various general services", // Very generic, low confidence
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
136 |             projectDescription: "Standard services required",
137 |             estimatedValue: 50000,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:171:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
169 |             revision: "2024-01",
170 |             fields: ["testField": ""],
171 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
172 |         )
173 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:208:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
206 |                 "deliverables": "",
207 |             ],
208 |             metadata: ["legacy": "true"]
    |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
209 |         )
210 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:242:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
240 |             revision: "2024-01",
241 |             fields: ["paymentTerms": ""],
242 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
243 |         )
244 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:258:39: error: value of type 'FormIntelligenceAdapter' has no member 'trackFormModification'
256 | 
257 |         // When: Track user modification
258 |         await formIntelligenceAdapter.trackFormModification(
    |                                       `- error: value of type 'FormIntelligenceAdapter' has no member 'trackFormModification'
259 |             fieldId: "paymentTerms",
260 |             originalValue: originalValue,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:268:56: error: value of type 'AdaptiveFormPopulationService' has no member 'getRecentLearningEvents'
266 |         // Then: Modification should be tracked for learning
267 |         // Verify through adaptive service that learning occurred
268 |         let learningEvents = await adaptiveFormService.getRecentLearningEvents()
    |                                                        `- error: value of type 'AdaptiveFormPopulationService' has no member 'getRecentLearningEvents'
269 | 
270 |         XCTAssertGreaterThan(learningEvents.count, 0,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:288:35: error: value of type 'AdaptiveFormPopulationService' has no member 'registerWithOrchestrator'
286 |         }
287 |         // When: Adaptive service initializes
288 |         await adaptiveFormService.registerWithOrchestrator()
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'registerWithOrchestrator'
289 | 
290 |         // Then: Should be registered as RL agent

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:291:58: error: value of type 'AgenticOrchestrator' has no member 'getRegisteredRLAgents'
289 | 
290 |         // Then: Should be registered as RL agent
291 |         let registeredAgents = await agenticOrchestrator.getRegisteredRLAgents()
    |                                                          `- error: value of type 'AgenticOrchestrator' has no member 'getRegisteredRLAgents'
292 |         let adaptiveAgent = registeredAgents.first { $0.agentId == "adaptive_form_population" }
293 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:308:54: error: value of type 'AgenticOrchestrator' has no member 'getLocalRLAgent'
306 |         }
307 |         // Given: Local RL agent infrastructure exists
308 |         let localRLAgent = await agenticOrchestrator.getLocalRLAgent()
    |                                                      `- error: value of type 'AgenticOrchestrator' has no member 'getLocalRLAgent'
309 |         XCTAssertNotNil(localRLAgent, "Local RL agent should be available")
310 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:312:104: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
310 | 
311 |         // When: Perform adaptive learning operation
312 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
    |                                                                                                        `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
313 |         let testAcquisition = createTestAcquisition(title: "RL Infrastructure Test")
314 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:314:38: error: extra arguments at positions #1, #2, #3 in call
312 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
313 |         let testAcquisition = createTestAcquisition(title: "RL Infrastructure Test")
314 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
315 | 
316 |         _ = try await adaptiveFormService.populateForm(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:314:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
312 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
313 |         let testAcquisition = createTestAcquisition(title: "RL Infrastructure Test")
314 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
315 | 
316 |         _ = try await adaptiveFormService.populateForm(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:352:62: error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
350 |                              "Should have high confidence for coordination")
351 | 
352 |         let coordinatedDecisions = await agenticOrchestrator.getCoordinatedDecisions()
    |                                                              `- error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
353 |         let adaptiveDecision = coordinatedDecisions.first {
354 |             $0.agentId == "adaptive_form_population" && $0.confidence > 0.6

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:369:57: error: cannot infer contextual base in reference to member 'informationTechnology'
367 |         }
368 |         // Given: Learning scenario
369 |         let testContext = createTestAcquisitionContext(.informationTechnology)
    |                                                         `- error: cannot infer contextual base in reference to member 'informationTechnology'
370 | 
371 |         // When: Track modification for learning

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:372:35: error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
370 | 
371 |         // When: Track modification for learning
372 |         await adaptiveFormService.trackModification(
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
373 |             fieldId: "paymentTerms",
374 |             originalValue: "NET-15",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:381:49: error: value of type 'LearningLoop' has no member 'getRecentEvents'
379 | 
380 |         // Then: Learning event should be shared via LearningLoop
381 |         let learningEvents = await learningLoop.getRecentEvents()
    |                                                 `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
382 |         let adaptiveEvents = learningEvents.filter {
383 |             $0.context.workflowState == "adaptive_form_population"

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:407:35: error: value of type 'AdaptiveFormPopulationService' has no member 'updateLearningState'
405 |         let testAction = createTestQLearningAction(value: "Sync Test", confidence: 0.8)
406 | 
407 |         await adaptiveFormService.updateLearningState(state: testState, action: testAction, reward: 0.7)
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'updateLearningState'
408 | 
409 |         // When: Synchronize state with orchestrator

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:410:35: error: value of type 'AdaptiveFormPopulationService' has no member 'synchronizeStateWithOrchestrator'
408 | 
409 |         // When: Synchronize state with orchestrator
410 |         await adaptiveFormService.synchronizeStateWithOrchestrator()
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'synchronizeStateWithOrchestrator'
411 | 
412 |         // Then: States should be synchronized

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:413:59: error: value of type 'AgenticOrchestrator' has no member 'getAgentState'
411 | 
412 |         // Then: States should be synchronized
413 |         let orchestratorState = await agenticOrchestrator.getAgentState(agentId: "adaptive_form_population")
    |                                                           `- error: value of type 'AgenticOrchestrator' has no member 'getAgentState'
414 | 
415 |         XCTAssertNotNil(orchestratorState, "Orchestrator should have agent state")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:416:63: error: cannot convert value of type 'TimeInterval?' (aka 'Optional<Double>') to expected argument type 'TimeInterval' (aka 'Double')
414 | 
415 |         XCTAssertNotNil(orchestratorState, "Orchestrator should have agent state")
416 |         XCTAssertEqual(orchestratorState?.lastUpdateTimestamp.timeIntervalSince1970,
    |                                                               `- error: cannot convert value of type 'TimeInterval?' (aka 'Optional<Double>') to expected argument type 'TimeInterval' (aka 'Double')
417 |                        Date().timeIntervalSince1970, accuracy: 10.0,
418 |                        "State should be recently synchronized")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:430:35: error: value of type 'AgenticOrchestrator' has no member 'simulateFailure'
428 |         }
429 |         // Given: Orchestrator in failure simulation mode
430 |         await agenticOrchestrator.simulateFailure(duration: 5.0)
    |                                   `- error: value of type 'AgenticOrchestrator' has no member 'simulateFailure'
431 | 
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:432:104: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
430 |         await agenticOrchestrator.simulateFailure(duration: 5.0)
431 | 
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
    |                                                                                                        `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
433 |         let testAcquisition = createTestAcquisition(title: "Failure Recovery Test")
434 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:434:38: error: extra arguments at positions #1, #2, #3 in call
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
433 |         let testAcquisition = createTestAcquisition(title: "Failure Recovery Test")
434 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
435 | 
436 |         // When: Attempt form population during orchestrator failure

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:434:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
433 |         let testAcquisition = createTestAcquisition(title: "Failure Recovery Test")
434 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
435 | 
436 |         // When: Attempt form population during orchestrator failure

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:450:53: error: value of type 'AgenticOrchestrator' has no member 'isOperational'
448 | 
449 |         // Verify recovery
450 |         let isRecovered = await agenticOrchestrator.isOperational()
    |                                                     `- error: value of type 'AgenticOrchestrator' has no member 'isOperational'
451 |         XCTAssertTrue(isRecovered, "Orchestrator should recover from failure")
452 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:474:114: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
472 |         }
473 |         // Given: Complete form workflow
474 |         let formData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: ["testField": ""], metadata: [:])
    |                                                                                                                  `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
475 |         let acquisition = createTestAcquisition(title: "Event Capture Test")
476 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:476:38: error: extra arguments at positions #1, #2, #3 in call
474 |         let formData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: ["testField": ""], metadata: [:])
475 |         let acquisition = createTestAcquisition(title: "Event Capture Test")
476 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
477 | 
478 |         // When: Execute complete workflow

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:476:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
474 |         let formData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: ["testField": ""], metadata: [:])
475 |         let acquisition = createTestAcquisition(title: "Event Capture Test")
476 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
477 | 
478 |         // When: Execute complete workflow

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:487:35: error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
485 | 
486 |         // 2. User modification
487 |         await adaptiveFormService.trackModification(
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
488 |             fieldId: "testField",
489 |             originalValue: "original",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:492:52: error: cannot infer contextual base in reference to member 'informationTechnology'
490 |             newValue: "modified",
491 |             formType: "SF-1449",
492 |             context: createTestAcquisitionContext(.informationTechnology)
    |                                                    `- error: cannot infer contextual base in reference to member 'informationTechnology'
493 |         )
494 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:496:39: error: value of type 'AdaptiveFormPopulationService' has no member 'getFieldExplanation'
494 | 
495 |         // 3. Explanation request
496 |         _ = await adaptiveFormService.getFieldExplanation(
    |                                       `- error: value of type 'AdaptiveFormPopulationService' has no member 'getFieldExplanation'
497 |             fieldId: "testField",
498 |             suggestedValue: "modified",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:499:52: error: cannot infer contextual base in reference to member 'informationTechnology'
497 |             fieldId: "testField",
498 |             suggestedValue: "modified",
499 |             context: createTestAcquisitionContext(.informationTechnology)
    |                                                    `- error: cannot infer contextual base in reference to member 'informationTechnology'
500 |         )
501 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:503:44: error: value of type 'LearningLoop' has no member 'getRecentEvents'
501 | 
502 |         // Then: All events should be captured
503 |         let allEvents = await learningLoop.getRecentEvents()
    |                                            `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
504 |         let adaptiveEvents = allEvents.filter { $0.context.workflowState == "adaptive_form_population" }
505 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:510:49: error: cannot infer key path type from context; consider explicitly specifying a root type
508 |                                     "Should capture all workflow events")
509 | 
510 |         let eventTypes = Set(adaptiveEvents.map(\.eventType))
    |                                                 `- error: cannot infer key path type from context; consider explicitly specifying a root type
511 |         XCTAssertTrue(eventTypes.contains(.documentGenerated), "Should capture form population event")
512 |         XCTAssertTrue(eventTypes.contains(.documentEdited), "Should capture modification event")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:511:44: error: cannot infer contextual base in reference to member 'documentGenerated'
509 | 
510 |         let eventTypes = Set(adaptiveEvents.map(\.eventType))
511 |         XCTAssertTrue(eventTypes.contains(.documentGenerated), "Should capture form population event")
    |                                            `- error: cannot infer contextual base in reference to member 'documentGenerated'
512 |         XCTAssertTrue(eventTypes.contains(.documentEdited), "Should capture modification event")
513 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:512:44: error: cannot infer contextual base in reference to member 'documentEdited'
510 |         let eventTypes = Set(adaptiveEvents.map(\.eventType))
511 |         XCTAssertTrue(eventTypes.contains(.documentGenerated), "Should capture form population event")
512 |         XCTAssertTrue(eventTypes.contains(.documentEdited), "Should capture modification event")
    |                                            `- error: cannot infer contextual base in reference to member 'documentEdited'
513 |     }
514 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:532:35: error: cannot find 'AdaptiveFormEventType' in scope
530 |         // When: Record each event type
531 |         for scenario in eventScenarios {
532 |             guard let eventType = AdaptiveFormEventType(rawValue: scenario.action) else {
    |                                   `- error: cannot find 'AdaptiveFormEventType' in scope
533 |                 XCTFail("Invalid event type: \(scenario.action)")
534 |                 continue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:536:32: error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
534 |                 continue
535 |             }
536 |             await LearningLoop.recordAdaptiveFormEvent(
    |                                `- error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
537 |                 eventType,
538 |                 formType: "SF-1449",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:540:56: error: cannot infer contextual base in reference to member 'informationTechnology'
538 |                 formType: "SF-1449",
539 |                 fieldId: "testField",
540 |                 context: createTestAcquisitionContext(.informationTechnology)
    |                                                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
541 |             )
542 |         }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:545:49: error: value of type 'LearningLoop' has no member 'getRecentEvents'
543 | 
544 |         // Then: Event types should be correctly classified
545 |         let recordedEvents = await learningLoop.getRecentEvents()
    |                                                 `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
546 |         let adaptiveEvents = recordedEvents.filter { $0.context.workflowState == "adaptive_form_population" }
547 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:576:23: error: cannot find 'ContextFeatures' in scope
574 |             category: .informationTechnology,
575 |             confidence: 0.85,
576 |             features: ContextFeatures(
    |                       `- error: cannot find 'ContextFeatures' in scope
577 |                 estimatedValue: 200_000,
578 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:573:41: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
571 |         ]
572 | 
573 |         let context = AcquisitionContext(
    |                                         `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
574 |             category: .informationTechnology,
575 |             confidence: 0.85,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:574:13: error: missing argument for parameter 'from' in call
572 | 
573 |         let context = AcquisitionContext(
574 |             category: .informationTechnology,
    |             `- error: missing argument for parameter 'from' in call
575 |             confidence: 0.85,
576 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:574:24: error: cannot infer contextual base in reference to member 'informationTechnology'
572 | 
573 |         let context = AcquisitionContext(
574 |             category: .informationTechnology,
    |                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
575 |             confidence: 0.85,
576 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:584:23: error: cannot infer contextual base in reference to member 'normal'
582 |             ),
583 |             acquisitionValue: 200_000,
584 |             urgency: .normal,
    |                       `- error: cannot infer contextual base in reference to member 'normal'
585 |             complexity: .high,
586 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:585:26: error: cannot infer contextual base in reference to member 'high'
583 |             acquisitionValue: 200_000,
584 |             urgency: .normal,
585 |             complexity: .high,
    |                          `- error: cannot infer contextual base in reference to member 'high'
586 |             acquisitionId: UUID()
587 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:590:28: error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
588 | 
589 |         // When: Record event with metadata
590 |         await LearningLoop.recordAdaptiveFormEvent(
    |                            `- error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
591 |             .suggestionAccepted,
592 |             formType: "SF-1449",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:591:14: error: cannot infer contextual base in reference to member 'suggestionAccepted'
589 |         // When: Record event with metadata
590 |         await LearningLoop.recordAdaptiveFormEvent(
591 |             .suggestionAccepted,
    |              `- error: cannot infer contextual base in reference to member 'suggestionAccepted'
592 |             formType: "SF-1449",
593 |             fieldId: "paymentTerms",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:599:41: error: value of type 'LearningLoop' has no member 'getRecentEvents'
597 | 
598 |         // Then: Metadata should be preserved accurately
599 |         let events = await learningLoop.getRecentEvents()
    |                                         `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
600 |         let targetEvent = events.first { $0.eventType == .suggestionAccepted }
601 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:600:59: error: cannot infer contextual base in reference to member 'suggestionAccepted'
598 |         // Then: Metadata should be preserved accurately
599 |         let events = await learningLoop.getRecentEvents()
600 |         let targetEvent = events.first { $0.eventType == .suggestionAccepted }
    |                                                           `- error: cannot infer contextual base in reference to member 'suggestionAccepted'
601 | 
602 |         XCTAssertNotNil(targetEvent, "Should record suggestion accepted event")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:605:60: error: type of expression is ambiguous without a type annotation
603 | 
604 |         for (key, expectedValue) in richMetadata {
605 |             let actualValue = targetEvent?.context.userData[key]
    |                                                            `- error: type of expression is ambiguous without a type annotation
606 |             XCTAssertEqual(actualValue, expectedValue,
607 |                            "Should preserve metadata: \(key) = \(expectedValue)")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:613:19: warning: value 'learningLoop' was defined but never used; consider replacing with boolean test
611 |     /// Test event ordering and timestamps
612 |     func testEventOrderingAndTimestamps() async throws {
613 |         guard let learningLoop else {
    |                   `- warning: value 'learningLoop' was defined but never used; consider replacing with boolean test
614 |             XCTFail("LearningLoop should be initialized")
615 |             return

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:816:62: error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
814 | 
815 |         // 3. Agent should be coordinated with orchestrator
816 |         let coordinatedDecisions = await agenticOrchestrator.getCoordinatedDecisions()
    |                                                              `- error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
817 |         let adaptiveDecisions = coordinatedDecisions.filter { $0.agentId == "adaptive_form_population" }
818 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:12:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
  10 |     // MARK: - Test Infrastructure
  11 | 
  12 |     var adaptiveService: AdaptiveFormPopulationService?
     |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
  13 |     var qLearningAgent: FormFieldQLearningAgent?
  14 |     var contextClassifier: AcquisitionContextClassifier?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:13:25: error: cannot find type 'FormFieldQLearningAgent' in scope
  11 | 
  12 |     var adaptiveService: AdaptiveFormPopulationService?
  13 |     var qLearningAgent: FormFieldQLearningAgent?
     |                         `- error: cannot find type 'FormFieldQLearningAgent' in scope
  14 |     var contextClassifier: AcquisitionContextClassifier?
  15 |     var mockCoreDataActor: MockCoreDataActor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:14:28: error: cannot find type 'AcquisitionContextClassifier' in scope
  12 |     var adaptiveService: AdaptiveFormPopulationService?
  13 |     var qLearningAgent: FormFieldQLearningAgent?
  14 |     var contextClassifier: AcquisitionContextClassifier?
     |                            `- error: cannot find type 'AcquisitionContextClassifier' in scope
  15 |     var mockCoreDataActor: MockCoreDataActor?
  16 |     var performanceMonitor: PerformanceMonitor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:16:29: error: 'PerformanceMonitor' is ambiguous for type lookup in this context
  14 |     var contextClassifier: AcquisitionContextClassifier?
  15 |     var mockCoreDataActor: MockCoreDataActor?
  16 |     var performanceMonitor: PerformanceMonitor?
     |                             `- error: 'PerformanceMonitor' is ambiguous for type lookup in this context
  17 |     var mlxBenchmarker: MLXPerformanceBenchmarker?
  18 | 
     :
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- note: found this candidate
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:470:7: note: found this candidate
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- note: found this candidate
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:94: error: cannot find type 'QLearningState' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                                                              `- error: cannot find type 'QLearningState' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:54: error: cannot find type 'FieldType' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                      `- error: cannot find type 'FieldType' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:74: error: cannot find type 'ContextCategory' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                                          `- error: cannot find type 'ContextCategory' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:765:50: error: cannot find type 'QLearningState' in scope
 763 |     }
 764 | 
 765 |     private func createRandomQLearningState() -> QLearningState {
     |                                                  `- error: cannot find type 'QLearningState' in scope
 766 |         QLearningState(
 767 |             fieldType: FieldType.allCases.randomElement() ?? .textField,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:778:51: error: cannot find type 'QLearningAction' in scope
 776 |     }
 777 | 
 778 |     private func createRandomQLearningAction() -> QLearningAction {
     |                                                   `- error: cannot find type 'QLearningAction' in scope
 779 |         let values = ["Test Value", "Sample Text", "Default Option", "Custom Entry"]
 780 |         return QLearningAction(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:786:51: error: cannot find type 'QLearningState' in scope
 784 |     }
 785 | 
 786 |     private func createComplexQLearningState() -> QLearningState {
     |                                                   `- error: cannot find type 'QLearningState' in scope
 787 |         QLearningState(
 788 |             fieldType: .dropdownField,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:929:64: error: cannot find type 'QLearningState' in scope
 927 |     }
 928 | 
 929 |     private func createUniqueQLearningState(iteration: Int) -> QLearningState {
     |                                                                `- error: cannot find type 'QLearningState' in scope
 930 |         QLearningState(
 931 |             fieldType: FieldType.allCases[iteration % FieldType.allCases.count],

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:975:16: error: cannot find type 'QLearningState' in scope
 973 | 
 974 | struct FieldSuggestionScenario {
 975 |     let state: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
 976 |     let expectedComplexity: ComplexityLevel
 977 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:986:16: error: cannot find type 'QLearningState' in scope
 984 | 
 985 | struct QNetworkUpdateScenario {
 986 |     let state: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
 987 |     let action: QLearningAction
 988 |     let reward: Double

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:987:17: error: cannot find type 'QLearningAction' in scope
 985 | struct QNetworkUpdateScenario {
 986 |     let state: QLearningState
 987 |     let action: QLearningAction
     |                 `- error: cannot find type 'QLearningAction' in scope
 988 |     let reward: Double
 989 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1019:16: error: cannot find type 'QLearningState' in scope
1017 | 
1018 | struct QuantizationTestCase {
1019 |     let input: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
1020 |     let expectedOutput: QLearningAction
1021 |     let tolerance: Double

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1020:25: error: cannot find type 'QLearningAction' in scope
1018 | struct QuantizationTestCase {
1019 |     let input: QLearningState
1020 |     let expectedOutput: QLearningAction
     |                         `- error: cannot find type 'QLearningAction' in scope
1021 |     let tolerance: Double
1022 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1024:8: error: invalid redeclaration of 'PerformanceMetrics'
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- error: invalid redeclaration of 'PerformanceMetrics'
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1032:13: error: invalid redeclaration of 'PerformanceMonitor'
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- error: invalid redeclaration of 'PerformanceMonitor'
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1071:36: error: cannot find type 'QLearningState' in scope
1069 |     }
1070 | 
1071 |     func benchmarkWithGPU(state _: QLearningState, iterations _: Int) async -> MLXBenchmarkResults {
     |                                    `- error: cannot find type 'QLearningState' in scope
1072 |         MLXBenchmarkResults(
1073 |             averageLatency: Double.random(in: 0.01 ... 0.03),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1078:36: error: cannot find type 'QLearningState' in scope
1076 |     }
1077 | 
1078 |     func benchmarkWithCPU(state _: QLearningState, iterations _: Int) async -> MLXBenchmarkResults {
     |                                    `- error: cannot find type 'QLearningState' in scope
1079 |         MLXBenchmarkResults(
1080 |             averageLatency: Double.random(in: 0.03 ... 0.08),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1294:44: error: cannot find type 'ThermalState' in scope
1292 |     }
1293 | 
1294 |     func getCurrentThermalState() async -> ThermalState {
     |                                            `- error: cannot find type 'ThermalState' in scope
1295 |         // Simulate thermal state
1296 |         let states: [ThermalState] = [.nominal, .fair, .serious]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1300:47: error: cannot find type 'ThermalState' in scope
1298 |     }
1299 | 
1300 |     func calculateThermalImpact(from initial: ThermalState, to final: ThermalState) -> Double {
     |                                               `- error: cannot find type 'ThermalState' in scope
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1300:71: error: cannot find type 'ThermalState' in scope
1298 |     }
1299 | 
1300 |     func calculateThermalImpact(from initial: ThermalState, to final: ThermalState) -> Double {
     |                                                                       `- error: cannot find type 'ThermalState' in scope
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1315:13: error: type 'PerformanceMockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
1313 | 
1314 | /// Mock orchestrator for testing
1315 | final class PerformanceMockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             |- error: type 'PerformanceMockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
     |             `- note: add stubs for conformance
1316 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1317 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1324:52: error: type 'UrgencyLevel' has no member 'urgent'
1322 | 
1323 | extension UrgencyLevel: CaseIterable {
1324 |     public static let allCases: [UrgencyLevel] = [.urgent, .moderate, .normal]
     |                                                    `- error: type 'UrgencyLevel' has no member 'urgent'
1325 | }
1326 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1324:61: error: type 'UrgencyLevel' has no member 'moderate'
1322 | 
1323 | extension UrgencyLevel: CaseIterable {
1324 |     public static let allCases: [UrgencyLevel] = [.urgent, .moderate, .normal]
     |                                                             `- error: type 'UrgencyLevel' has no member 'moderate'
1325 | }
1326 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1327:28: warning: conformance of 'ComplexityLevel' to protocol 'CaseIterable' was already stated in the type's module 'AIKO'
1325 | }
1326 | 
1327 | extension ComplexityLevel: CaseIterable {
     |                            `- warning: conformance of 'ComplexityLevel' to protocol 'CaseIterable' was already stated in the type's module 'AIKO'
1328 |     public static let allCases: [ComplexityLevel] = [.high, .medium, .low]
     |                       `- note: static property 'allCases' will not be used to satisfy the conformance to 'CaseIterable'
1329 | }
1330 | 

/Users/J/aiko/Sources/Models/DocumentChain.swift:149:13: note: 'ComplexityLevel' declares conformance to protocol 'CaseIterable' here
147 | 
148 | /// Complexity level of the acquisition
149 | public enum ComplexityLevel: String, Codable, CaseIterable, Sendable {
    |             `- note: 'ComplexityLevel' declares conformance to protocol 'CaseIterable' here
150 |     case low = "Low"
151 |     case medium = "Medium"

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:28:26: error: cannot find 'FormFieldQLearningAgent' in scope
  26 | 
  27 |         // Initialize system components
  28 |         qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
     |                          `- error: cannot find 'FormFieldQLearningAgent' in scope
  29 |         contextClassifier = AcquisitionContextClassifier()
  30 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:29:29: error: cannot find 'AcquisitionContextClassifier' in scope
  27 |         // Initialize system components
  28 |         qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         contextClassifier = AcquisitionContextClassifier()
     |                             `- error: cannot find 'AcquisitionContextClassifier' in scope
  30 | 
  31 |         adaptiveService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:31:27: error: cannot find 'AdaptiveFormPopulationService' in scope
  29 |         contextClassifier = AcquisitionContextClassifier()
  30 | 
  31 |         adaptiveService = AdaptiveFormPopulationService(
     |                           `- error: cannot find 'AdaptiveFormPopulationService' in scope
  32 |             contextClassifier: contextClassifier,
  33 |             qLearningAgent: qLearningAgent,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:34:34: error: cannot find 'FormModificationTracker' in scope
  32 |             contextClassifier: contextClassifier,
  33 |             qLearningAgent: qLearningAgent,
  34 |             modificationTracker: FormModificationTracker(coreDataActor: mockCoreDataActor),
     |                                  `- error: cannot find 'FormModificationTracker' in scope
  35 |             explanationEngine: ValueExplanationEngine(),
  36 |             metricsCollector: AdaptiveFormMetricsCollector(),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:35:32: error: cannot find 'ValueExplanationEngine' in scope
  33 |             qLearningAgent: qLearningAgent,
  34 |             modificationTracker: FormModificationTracker(coreDataActor: mockCoreDataActor),
  35 |             explanationEngine: ValueExplanationEngine(),
     |                                `- error: cannot find 'ValueExplanationEngine' in scope
  36 |             metricsCollector: AdaptiveFormMetricsCollector(),
  37 |             agenticOrchestrator: PerformanceMockAgenticOrchestrator()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:36:31: error: cannot find 'AdaptiveFormMetricsCollector' in scope
  34 |             modificationTracker: FormModificationTracker(coreDataActor: mockCoreDataActor),
  35 |             explanationEngine: ValueExplanationEngine(),
  36 |             metricsCollector: AdaptiveFormMetricsCollector(),
     |                               `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
  37 |             agenticOrchestrator: PerformanceMockAgenticOrchestrator()
  38 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:41:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'warmUp' of wrapped base type 'MLXPerformanceBenchmarker'
  39 | 
  40 |         // Warm up MLX Swift framework
  41 |         await mlxBenchmarker.warmUp()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'warmUp' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'warmUp' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
  42 |     }
  43 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:180:19: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'simulateDeviceConfig' of wrapped base type 'MLXPerformanceBenchmarker'
 178 |         // When: Test MLX inference performance on each configuration
 179 |         for config in deviceConfigs {
 180 |             await mlxBenchmarker.simulateDeviceConfig(config)
     |                   |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'simulateDeviceConfig' of wrapped base type 'MLXPerformanceBenchmarker'
     |                   |- note: chain the optional using '?' to access member 'simulateDeviceConfig' only for non-'nil' base values
     |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 181 | 
 182 |             let inferenceResults = await mlxBenchmarker.benchmarkQLearningInference(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:182:42: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQLearningInference' of wrapped base type 'MLXPerformanceBenchmarker'
 180 |             await mlxBenchmarker.simulateDeviceConfig(config)
 181 | 
 182 |             let inferenceResults = await mlxBenchmarker.benchmarkQLearningInference(
     |                                          |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQLearningInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                          |- note: chain the optional using '?' to access member 'benchmarkQLearningInference' only for non-'nil' base values
     |                                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 183 |                 iterations: 100,
 184 |                 stateSpaceSize: 1000

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:245:42: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQuantizedModel' of wrapped base type 'MLXPerformanceBenchmarker'
 243 |         // When: Test each quantization level
 244 |         for level in quantizationLevels {
 245 |             let quantizedResults = await mlxBenchmarker.benchmarkQuantizedModel(
     |                                          |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQuantizedModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                          |- note: chain the optional using '?' to access member 'benchmarkQuantizedModel' only for non-'nil' base values
     |                                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 246 |                 quantization: level,
 247 |                 testCases: createQuantizationTestCases(count: 100)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:292:44: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
 290 |         // When: Perform various MLX operations
 291 |         let operations = [
 292 |             ("Model Loading", { await self.mlxBenchmarker.loadQLearningModel() }),
     |                                            |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                            |- note: chain the optional using '?' to access member 'loadQLearningModel' only for non-'nil' base values
     |                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:293:40: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performInference' of wrapped base type 'MLXPerformanceBenchmarker'
 291 |         let operations = [
 292 |             ("Model Loading", { await self.mlxBenchmarker.loadQLearningModel() }),
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
     |                                        |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                        |- note: chain the optional using '?' to access member 'performInference' only for non-'nil' base values
     |                                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),
 295 |             ("Model Unloading", { await self.mlxBenchmarker.unloadModel() }),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:295:46: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),
 295 |             ("Model Unloading", { await self.mlxBenchmarker.unloadModel() }),
     |                                              |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                              |- note: chain the optional using '?' to access member 'unloadModel' only for non-'nil' base values
     |                                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 296 |         ]
 297 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:294:39: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performTraining' of wrapped base type 'MLXPerformanceBenchmarker'
 292 |             ("Model Loading", { await self.mlxBenchmarker.loadQLearningModel() }),
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),
     |                                       |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performTraining' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                       |- note: chain the optional using '?' to access member 'performTraining' only for non-'nil' base values
     |                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 295 |             ("Model Unloading", { await self.mlxBenchmarker.unloadModel() }),
 296 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:343:32: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performConcurrentInference' of wrapped base type 'MLXPerformanceBenchmarker'
 341 |             for i in 1 ... 5 {
 342 |                 group.addTask {
 343 |                     await self.mlxBenchmarker.performConcurrentInference(id: i)
     |                                |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performConcurrentInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                |- note: chain the optional using '?' to access member 'performConcurrentInference' only for non-'nil' base values
     |                                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 344 |                 }
 345 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:368:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'clearModelCache' of wrapped base type 'MLXPerformanceBenchmarker'
 366 |     func testMLXModelCompilationAndCaching() async throws {
 367 |         // Given: Clean state with no cached models
 368 |         await mlxBenchmarker.clearModelCache()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'clearModelCache' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'clearModelCache' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 369 | 
 370 |         // When: Compile model for first time

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:372:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'compileQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
 370 |         // When: Compile model for first time
 371 |         let firstCompilationStart = CFAbsoluteTimeGetCurrent()
 372 |         await mlxBenchmarker.compileQLearningModel()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'compileQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'compileQLearningModel' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 373 |         let firstCompilationTime = CFAbsoluteTimeGetCurrent() - firstCompilationStart
 374 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:376:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
 374 | 
 375 |         // Clear model from memory but keep cache
 376 |         await mlxBenchmarker.unloadModel()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'unloadModel' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 377 | 
 378 |         // Load model again (should use cache)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:380:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
 378 |         // Load model again (should use cache)
 379 |         let cachedLoadStart = CFAbsoluteTimeGetCurrent()
 380 |         await mlxBenchmarker.loadQLearningModel()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'loadQLearningModel' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 381 |         let cachedLoadTime = CFAbsoluteTimeGetCurrent() - cachedLoadStart
 382 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:405:37: error: extra arguments at positions #1, #2, #3 in call
 403 |             createLargeFormData(),
 404 |             acquisition: createComplexAcquisition(),
 405 |             userProfile: UserProfile(id: UUID(), name: "Memory Test User", email: "test@example.com")
     |                                     `- error: extra arguments at positions #1, #2, #3 in call
 406 |         )
 407 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:405:37: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 403 |             createLargeFormData(),
 404 |             acquisition: createComplexAcquisition(),
 405 |             userProfile: UserProfile(id: UUID(), name: "Memory Test User", email: "test@example.com")
     |                                     `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 406 |         )
 407 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:483:42: error: extra arguments at positions #1, #2, #3 in call
 481 |             let formData = createVariedFormData(index: i)
 482 |             let acquisition = createVariedAcquisition(index: i)
 483 |             let userProfile = UserProfile(id: UUID(), name: "CPU Test User \(i)", email: "test\(i)@example.com")
     |                                          `- error: extra arguments at positions #1, #2, #3 in call
 484 | 
 485 |             _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:483:42: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 481 |             let formData = createVariedFormData(index: i)
 482 |             let acquisition = createVariedAcquisition(index: i)
 483 |             let userProfile = UserProfile(id: UUID(), name: "CPU Test User \(i)", email: "test\(i)@example.com")
     |                                          `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 484 | 
 485 |             _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:566:19: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performContinuousInference' of wrapped base type 'MLXPerformanceBenchmarker'
 564 |         while CFAbsoluteTimeGetCurrent() - startTime < operationDuration {
 565 |             // Continuous MLX inference operations
 566 |             await mlxBenchmarker.performContinuousInference(duration: 10) // 10 second bursts
     |                   |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performContinuousInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                   |- note: chain the optional using '?' to access member 'performContinuousInference' only for non-'nil' base values
     |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 567 | 
 568 |             // Check for thermal throttling

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:581:47: error: type 'Equatable' has no member 'critical'
 579 | 
 580 |         // Then: Should not cause excessive thermal issues
 581 |         XCTAssertNotEqual(finalThermalState, .critical,
     |                                               `- error: type 'Equatable' has no member 'critical'
 582 |                           "Extended MLX operations should not cause critical thermal state")
 583 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:607:46: error: extra arguments at positions #1, #2, #3 in call
 605 |                 let formData = createVariedFormData(index: i)
 606 |                 let acquisition = createVariedAcquisition(index: i)
 607 |                 let userProfile = UserProfile(id: UUID(), name: "Load Test User", email: "loadtest@example.com")
     |                                              `- error: extra arguments at positions #1, #2, #3 in call
 608 | 
 609 |                 _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:607:46: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 605 |                 let formData = createVariedFormData(index: i)
 606 |                 let acquisition = createVariedAcquisition(index: i)
 607 |                 let userProfile = UserProfile(id: UUID(), name: "Load Test User", email: "loadtest@example.com")
     |                                              `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 608 | 
 609 |                 _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:630:39: error: 'PerformanceMetrics' is ambiguous for type lookup in this context
 628 |         // Given: Progressively larger Q-table sizes
 629 |         let dataSizes = [1000, 5000, 10000, 25000, 50000]
 630 |         var performanceMetrics: [Int: PerformanceMetrics] = [:]
     |                                       `- error: 'PerformanceMetrics' is ambiguous for type lookup in this context
 631 | 
 632 |         // When: Test performance at each data size
     :
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- note: found this candidate
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:495:8: note: found this candidate
493 | }
494 | 
495 | struct PerformanceMetrics {
    |        `- note: found this candidate
496 |     let average: TimeInterval
497 |     let p95: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:655:62: error: incorrect argument labels in call (have 'lookupTime:updateTime:', expected 'average:p95:')
 653 |             let updateTime = CFAbsoluteTimeGetCurrent() - updateStart
 654 | 
 655 |             performanceMetrics[dataSize] = PerformanceMetrics(
     |                                                              `- error: incorrect argument labels in call (have 'lookupTime:updateTime:', expected 'average:p95:')
 656 |                 lookupTime: lookupTime / 1000, // Average per lookup
 657 |                 updateTime: updateTime / 1000 // Average per update

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:686:61: error: cannot infer contextual base in reference to member 'textField'
 684 |         [
 685 |             FieldSuggestionScenario(
 686 |                 state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
     |                                                             `- error: cannot infer contextual base in reference to member 'textField'
 687 |                 expectedComplexity: .medium
 688 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:686:82: error: cannot infer contextual base in reference to member 'informationTechnology'
 684 |         [
 685 |             FieldSuggestionScenario(
 686 |                 state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
     |                                                                                  `- error: cannot infer contextual base in reference to member 'informationTechnology'
 687 |                 expectedComplexity: .medium
 688 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:687:38: error: cannot infer contextual base in reference to member 'medium'
 685 |             FieldSuggestionScenario(
 686 |                 state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
 687 |                 expectedComplexity: .medium
     |                                      `- error: cannot infer contextual base in reference to member 'medium'
 688 |             ),
 689 |             FieldSuggestionScenario(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:690:61: error: cannot infer contextual base in reference to member 'dropdownField'
 688 |             ),
 689 |             FieldSuggestionScenario(
 690 |                 state: createTestQLearningState(fieldType: .dropdownField, context: .construction),
     |                                                             `- error: cannot infer contextual base in reference to member 'dropdownField'
 691 |                 expectedComplexity: .high
 692 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:690:86: error: cannot infer contextual base in reference to member 'construction'
 688 |             ),
 689 |             FieldSuggestionScenario(
 690 |                 state: createTestQLearningState(fieldType: .dropdownField, context: .construction),
     |                                                                                      `- error: cannot infer contextual base in reference to member 'construction'
 691 |                 expectedComplexity: .high
 692 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:691:38: error: cannot infer contextual base in reference to member 'high'
 689 |             FieldSuggestionScenario(
 690 |                 state: createTestQLearningState(fieldType: .dropdownField, context: .construction),
 691 |                 expectedComplexity: .high
     |                                      `- error: cannot infer contextual base in reference to member 'high'
 692 |             ),
 693 |             FieldSuggestionScenario(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:694:61: error: cannot infer contextual base in reference to member 'numberField'
 692 |             ),
 693 |             FieldSuggestionScenario(
 694 |                 state: createTestQLearningState(fieldType: .numberField, context: .professionalServices),
     |                                                             `- error: cannot infer contextual base in reference to member 'numberField'
 695 |                 expectedComplexity: .low
 696 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:694:84: error: cannot infer contextual base in reference to member 'professionalServices'
 692 |             ),
 693 |             FieldSuggestionScenario(
 694 |                 state: createTestQLearningState(fieldType: .numberField, context: .professionalServices),
     |                                                                                    `- error: cannot infer contextual base in reference to member 'professionalServices'
 695 |                 expectedComplexity: .low
 696 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:695:38: error: cannot infer contextual base in reference to member 'low'
 693 |             FieldSuggestionScenario(
 694 |                 state: createTestQLearningState(fieldType: .numberField, context: .professionalServices),
 695 |                 expectedComplexity: .low
     |                                      `- error: cannot infer contextual base in reference to member 'low'
 696 |             ),
 697 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:705:41: error: extra arguments at positions #1, #2, #3 in call
 703 |                 formData: createSimpleFormData(),
 704 |                 acquisition: createSimpleAcquisition(),
 705 |                 userProfile: UserProfile(id: UUID(), name: "Simple User", email: "simple@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 706 |             ),
 707 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:705:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 703 |                 formData: createSimpleFormData(),
 704 |                 acquisition: createSimpleAcquisition(),
 705 |                 userProfile: UserProfile(id: UUID(), name: "Simple User", email: "simple@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 706 |             ),
 707 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:710:41: error: extra arguments at positions #1, #2, #3 in call
 708 |                 formData: createComplexFormData(),
 709 |                 acquisition: createComplexAcquisition(),
 710 |                 userProfile: UserProfile(id: UUID(), name: "Complex User", email: "complex@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 711 |             ),
 712 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:710:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 708 |                 formData: createComplexFormData(),
 709 |                 acquisition: createComplexAcquisition(),
 710 |                 userProfile: UserProfile(id: UUID(), name: "Complex User", email: "complex@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 711 |             ),
 712 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:715:41: error: extra arguments at positions #1, #2, #3 in call
 713 |                 formData: createLargeFormData(),
 714 |                 acquisition: createLargeAcquisition(),
 715 |                 userProfile: UserProfile(id: UUID(), name: "Large User", email: "large@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 716 |             ),
 717 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:715:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 713 |                 formData: createLargeFormData(),
 714 |                 acquisition: createLargeAcquisition(),
 715 |                 userProfile: UserProfile(id: UUID(), name: "Large User", email: "large@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 716 |             ),
 717 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:722:33: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 720 |     private func createContextClassificationTestData() -> [AcquisitionAggregate] {
 721 |         [
 722 |             AcquisitionAggregate(
     |                                 `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 723 |                 id: UUID(),
 724 |                 title: "Software Development Services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:723:17: error: missing argument for parameter 'managedObject' in call
 721 |         [
 722 |             AcquisitionAggregate(
 723 |                 id: UUID(),
     |                 `- error: missing argument for parameter 'managedObject' in call
 724 |                 title: "Software Development Services",
 725 |                 requirements: "Need cloud computing and database management",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:731:33: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 729 |                 isRecurring: false
 730 |             ),
 731 |             AcquisitionAggregate(
     |                                 `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 732 |                 id: UUID(),
 733 |                 title: "Building Construction Project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:732:17: error: missing argument for parameter 'managedObject' in call
 730 |             ),
 731 |             AcquisitionAggregate(
 732 |                 id: UUID(),
     |                 `- error: missing argument for parameter 'managedObject' in call
 733 |                 title: "Building Construction Project",
 734 |                 requirements: "Construction services and building materials",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:747:32: error: cannot find 'FieldType' in scope
 745 |             QNetworkUpdateScenario(
 746 |                 state: createTestQLearningState(
 747 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
     |                                `- error: cannot find 'FieldType' in scope
 748 |                     context: ContextCategory.allCases.randomElement() ?? .general
 749 |                 ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:748:30: error: cannot find 'ContextCategory' in scope
 746 |                 state: createTestQLearningState(
 747 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
 748 |                     context: ContextCategory.allCases.randomElement() ?? .general
     |                              `- error: cannot find 'ContextCategory' in scope
 749 |                 ),
 750 |                 action: createRandomQLearningAction(),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:810:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 808 |             revision: "2024-01",
 809 |             fields: ["simpleField": ""],
 810 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 811 |         )
 812 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:827:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 825 |                 "performancePeriod": "",
 826 |             ],
 827 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 828 |         )
 829 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:841:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 839 |             revision: "2024-01",
 840 |             fields: fields,
 841 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 842 |         )
 843 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:854:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
 852 |                 "dynamicField\(index)": "",
 853 |             ],
 854 |             metadata: ["index": "\(index)"]
     |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
 855 |         )
 856 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:859:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 857 | 
 858 |     private func createSimpleAcquisition() -> AcquisitionAggregate {
 859 |         AcquisitionAggregate(
     |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 860 |             id: UUID(),
 861 |             title: "Simple Acquisition",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:860:13: error: missing argument for parameter 'managedObject' in call
 858 |     private func createSimpleAcquisition() -> AcquisitionAggregate {
 859 |         AcquisitionAggregate(
 860 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 861 |             title: "Simple Acquisition",
 862 |             requirements: "Basic requirements",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:871:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 869 | 
 870 |     private func createComplexAcquisition() -> AcquisitionAggregate {
 871 |         AcquisitionAggregate(
     |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 872 |             id: UUID(),
 873 |             title: "Complex IT Infrastructure Project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:872:13: error: missing argument for parameter 'managedObject' in call
 870 |     private func createComplexAcquisition() -> AcquisitionAggregate {
 871 |         AcquisitionAggregate(
 872 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 873 |             title: "Complex IT Infrastructure Project",
 874 |             requirements: "Comprehensive software development with cloud computing, database design, network security, and cybersecurity implementation for enterprise IT infrastructure.",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:885:36: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 883 |         let largeRequirements = String(repeating: "Complex requirements involving multiple stakeholders, extensive documentation, comprehensive testing, quality assurance, and ongoing support services. ", count: 20)
 884 | 
 885 |         return AcquisitionAggregate(
     |                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 886 |             id: UUID(),
 887 |             title: "Large Scale Enterprise Transformation",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:886:13: error: missing argument for parameter 'managedObject' in call
 884 | 
 885 |         return AcquisitionAggregate(
 886 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 887 |             title: "Large Scale Enterprise Transformation",
 888 |             requirements: largeRequirements,

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:900:36: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 898 |         let context = contexts[index % contexts.count]
 899 | 
 900 |         return AcquisitionAggregate(
     |                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 901 |             id: UUID(),
 902 |             title: "\(context) Project \(index)",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:901:13: error: missing argument for parameter 'managedObject' in call
 899 | 
 900 |         return AcquisitionAggregate(
 901 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 902 |             title: "\(context) Project \(index)",
 903 |             requirements: "Requirements for \(context.lowercased()) project \(index)",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:913:23: error: cannot find 'ContextCategory' in scope
 911 |     private func createRandomAcquisitionContext() -> AcquisitionContext {
 912 |         AcquisitionContext(
 913 |             category: ContextCategory.allCases.randomElement() ?? .general,
     |                       `- error: cannot find 'ContextCategory' in scope
 914 |             confidence: Double.random(in: 0.5 ... 1.0),
 915 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:915:23: error: cannot find 'ContextFeatures' in scope
 913 |             category: ContextCategory.allCases.randomElement() ?? .general,
 914 |             confidence: Double.random(in: 0.5 ... 1.0),
 915 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
 916 |                 estimatedValue: Double.random(in: 10000 ... 1_000_000),
 917 |                 hasUrgentDeadline: Bool.random(),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:912:9: error: no exact matches in call to initializer 
 910 | 
 911 |     private func createRandomAcquisitionContext() -> AcquisitionContext {
 912 |         AcquisitionContext(
     |         |- error: no exact matches in call to initializer 
     |         `- note: candidate has partially matching parameter list (from: any Decoder)
 913 |             category: ContextCategory.allCases.randomElement() ?? .general,
 914 |             confidence: Double.random(in: 0.5 ... 1.0),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:542:12: note: candidate has partially matching parameter list (acquisitionId: UUID, documentType: TestDocumentType, acquisitionValue: Double, complexity: TestComplexityLevel, timeConstraints: TestTimeConstraints, regulatoryRequirements: Set<TestFARClause>, historicalSuccess: Double, userProfile: TestUserProfile, workflowProgress: Double, completedDocuments: [String])
540 |     }
541 | 
542 |     public init(acquisitionId: UUID, documentType: TestDocumentType, acquisitionValue: Double, complexity: TestComplexityLevel, timeConstraints: TestTimeConstraints, regulatoryRequirements: Set<TestFARClause>, historicalSuccess: Double, userProfile: TestUserProfile, workflowProgress: Double, completedDocuments: [String]) {
    |            `- note: candidate has partially matching parameter list (acquisitionId: UUID, documentType: TestDocumentType, acquisitionValue: Double, complexity: TestComplexityLevel, timeConstraints: TestTimeConstraints, regulatoryRequirements: Set<TestFARClause>, historicalSuccess: Double, userProfile: TestUserProfile, workflowProgress: Double, completedDocuments: [String])
543 |         self.acquisitionId = acquisitionId
544 |         self.documentType = documentType

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1296:22: error: cannot find type 'ThermalState' in scope
1294 |     func getCurrentThermalState() async -> ThermalState {
1295 |         // Simulate thermal state
1296 |         let states: [ThermalState] = [.nominal, .fair, .serious]
     |                      `- error: cannot find type 'ThermalState' in scope
1297 |         return states.randomElement() ?? .nominal
1298 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1303:16: error: no exact matches in call to initializer 
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue
1303 |         return Double(finalValue - initialValue) / 3.0 // Normalized 0-1
     |                `- error: no exact matches in call to initializer 
1304 |     }
1305 | }

Swift.Double.init:2:8: note: candidate expects value of type 'Builtin.FPIEEE64' for parameter #1 (got 'Duration')
1 | struct Double {
2 | public init(_ _value: Builtin.FPIEEE64)}
  |        `- note: candidate expects value of type 'Builtin.FPIEEE64' for parameter #1 (got 'Duration')
3 | 

Swift.Double.init:2:8: note: candidate expects value of type 'Int' for parameter #1 (got 'Duration')
1 | struct Double {
2 | public init(_ v: Int)}
  |        `- note: candidate expects value of type 'Int' for parameter #1 (got 'Duration')
3 | 

Swift.Double.init:3:21: note: candidate expects value of type 'Float16' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
3 |   @inlinable public init(_ other: Float16)}
  |                     `- note: candidate expects value of type 'Float16' for parameter #1 (got 'Duration')
4 | 

Swift.Double.init:2:19: note: candidate expects value of type 'Float' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @inlinable public init(_ other: Float)}
  |                   `- note: candidate expects value of type 'Float' for parameter #1 (got 'Duration')
3 | 

Swift.Double.init:2:19: note: candidate expects value of type 'Double' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @inlinable public init(_ other: Double)}
  |                   `- note: candidate expects value of type 'Double' for parameter #1 (got 'Duration')
3 | 

CoreFoundation.Double.init:2:8: note: candidate expects value of type 'CGFloat' for parameter #1 (got 'Duration')
1 | struct Double {
2 | public init(_ value: CGFloat)}
  |        `- note: candidate expects value of type 'CGFloat' for parameter #1 (got 'Duration')
3 | 

Foundation.Double.init:3:10: note: candidate expects value of type 'NSNumber' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @available(swift, deprecated: 4, renamed: "init(truncating:)")
3 |   public init(_ number: __shared NSNumber)}
  |          `- note: candidate expects value of type 'NSNumber' for parameter #1 (got 'Duration')
4 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:12:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
 10 |     // MARK: - Test Infrastructure
 11 | 
 12 |     var adaptiveService: AdaptiveFormPopulationService?
    |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
 13 |     var qLearningAgent: FormFieldQLearningAgent?
 14 |     var modificationTracker: FormModificationTracker?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:13:25: error: cannot find type 'FormFieldQLearningAgent' in scope
 11 | 
 12 |     var adaptiveService: AdaptiveFormPopulationService?
 13 |     var qLearningAgent: FormFieldQLearningAgent?
    |                         `- error: cannot find type 'FormFieldQLearningAgent' in scope
 14 |     var modificationTracker: FormModificationTracker?
 15 |     var mockCoreDataActor: MockCoreDataActor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:14:30: error: cannot find type 'FormModificationTracker' in scope
 12 |     var adaptiveService: AdaptiveFormPopulationService?
 13 |     var qLearningAgent: FormFieldQLearningAgent?
 14 |     var modificationTracker: FormModificationTracker?
    |                              `- error: cannot find type 'FormModificationTracker' in scope
 15 |     var mockCoreDataActor: MockCoreDataActor?
 16 |     var privacyValidator: PrivacyComplianceValidator?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:607:48: error: cannot find type 'ContextCategory' in scope
605 |     // MARK: - Test Helper Methods
606 | 
607 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
    |                                                `- error: cannot find type 'ContextCategory' in scope
608 |         AcquisitionContext(
609 |             category: category,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:94: error: cannot find type 'QLearningState' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                                                              `- error: cannot find type 'QLearningState' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:54: error: cannot find type 'FieldType' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                      `- error: cannot find type 'FieldType' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:74: error: cannot find type 'ContextCategory' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                                          `- error: cannot find type 'ContextCategory' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:658:82: error: cannot find type 'QLearningAction' in scope
656 |     }
657 | 
658 |     private func createTestQLearningAction(value: String, confidence: Double) -> QLearningAction {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
659 |         QLearningAction(suggestedValue: value, confidence: confidence)
660 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:662:60: error: cannot find type 'QLearningState' in scope
660 |     }
661 | 
662 |     private func createExtensiveLearningData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                            `- error: cannot find type 'QLearningState' in scope
663 |         (1 ... 100).map { i in
664 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:662:84: error: cannot find type 'QLearningAction' in scope
660 |     }
661 | 
662 |     private func createExtensiveLearningData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                    `- error: cannot find type 'QLearningAction' in scope
663 |         (1 ... 100).map { i in
664 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:675:59: error: cannot find type 'QLearningState' in scope
673 |     }
674 | 
675 |     private func createSensitivePatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                           `- error: cannot find type 'QLearningState' in scope
676 |         [
677 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:675:83: error: cannot find type 'QLearningAction' in scope
673 |     }
674 | 
675 |     private func createSensitivePatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                   `- error: cannot find type 'QLearningAction' in scope
676 |         [
677 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:690:55: error: cannot find type 'QLearningState' in scope
688 |     }
689 | 
690 |     private func createSimplePatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                       `- error: cannot find type 'QLearningState' in scope
691 |         (
692 |             state: createTestQLearningState(fieldType: .textField, context: .general),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:690:79: error: cannot find type 'QLearningAction' in scope
688 |     }
689 | 
690 |     private func createSimplePatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                                               `- error: cannot find type 'QLearningAction' in scope
691 |         (
692 |             state: createTestQLearningState(fieldType: .textField, context: .general),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:697:56: error: cannot find type 'QLearningState' in scope
695 |     }
696 | 
697 |     private func createComplexPatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                        `- error: cannot find type 'QLearningState' in scope
698 |         (
699 |             state: createTestQLearningState(fieldType: .dropdownField, context: .informationTechnology),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:697:80: error: cannot find type 'QLearningAction' in scope
695 |     }
696 | 
697 |     private func createComplexPatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                                                `- error: cannot find type 'QLearningAction' in scope
698 |         (
699 |             state: createTestQLearningState(fieldType: .dropdownField, context: .informationTechnology),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:704:59: error: cannot find type 'QLearningState' in scope
702 |     }
703 | 
704 |     private func createKnownTrainingDataSet() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                           `- error: cannot find type 'QLearningState' in scope
705 |         (1 ... 50).map { i in
706 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:704:83: error: cannot find type 'QLearningAction' in scope
702 |     }
703 | 
704 |     private func createKnownTrainingDataSet() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                   `- error: cannot find type 'QLearningAction' in scope
705 |         (1 ... 50).map { i in
706 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:717:57: error: cannot find type 'QLearningState' in scope
715 |     }
716 | 
717 |     private func createRegularPatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                         `- error: cannot find type 'QLearningState' in scope
718 |         [
719 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:717:81: error: cannot find type 'QLearningAction' in scope
715 |     }
716 | 
717 |     private func createRegularPatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                 `- error: cannot find type 'QLearningAction' in scope
718 |         [
719 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:60: error: cannot find type 'QLearningState' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                            `- error: cannot find type 'QLearningState' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:84: error: cannot find type 'QLearningAction' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                                                    `- error: cannot find type 'QLearningAction' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:131: error: cannot find type 'AdaptiveFormMetricsCollector' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                                                                                                   `- error: cannot find type 'AdaptiveFormMetricsCollector' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             |- error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
    |             `- note: add stubs for conformance
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: error: invalid redeclaration of 'MockAgenticOrchestrator'
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- error: invalid redeclaration of 'MockAgenticOrchestrator'
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:29:22: error: cannot find 'FormFieldQLearningAgent' in scope
 27 | 
 28 |         // Initialize system components
 29 |         let qAgent = FormFieldQLearningAgent(coreDataActor: mockActor)
    |                      `- error: cannot find 'FormFieldQLearningAgent' in scope
 30 |         qLearningAgent = qAgent
 31 |         let modTracker = FormModificationTracker(coreDataActor: mockActor)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:31:26: error: cannot find 'FormModificationTracker' in scope
 29 |         let qAgent = FormFieldQLearningAgent(coreDataActor: mockActor)
 30 |         qLearningAgent = qAgent
 31 |         let modTracker = FormModificationTracker(coreDataActor: mockActor)
    |                          `- error: cannot find 'FormModificationTracker' in scope
 32 |         modificationTracker = modTracker
 33 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:34:27: error: cannot find 'AdaptiveFormPopulationService' in scope
 32 |         modificationTracker = modTracker
 33 | 
 34 |         adaptiveService = AdaptiveFormPopulationService(
    |                           `- error: cannot find 'AdaptiveFormPopulationService' in scope
 35 |             contextClassifier: AcquisitionContextClassifier(),
 36 |             qLearningAgent: qAgent,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:35:32: error: cannot find 'AcquisitionContextClassifier' in scope
 33 | 
 34 |         adaptiveService = AdaptiveFormPopulationService(
 35 |             contextClassifier: AcquisitionContextClassifier(),
    |                                `- error: cannot find 'AcquisitionContextClassifier' in scope
 36 |             qLearningAgent: qAgent,
 37 |             modificationTracker: modTracker,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:38:32: error: cannot find 'ValueExplanationEngine' in scope
 36 |             qLearningAgent: qAgent,
 37 |             modificationTracker: modTracker,
 38 |             explanationEngine: ValueExplanationEngine(),
    |                                `- error: cannot find 'ValueExplanationEngine' in scope
 39 |             metricsCollector: AdaptiveFormMetricsCollector(),
 40 |             agenticOrchestrator: MockAgenticOrchestrator()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:39:31: error: cannot find 'AdaptiveFormMetricsCollector' in scope
 37 |             modificationTracker: modTracker,
 38 |             explanationEngine: ValueExplanationEngine(),
 39 |             metricsCollector: AdaptiveFormMetricsCollector(),
    |                               `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
 40 |             agenticOrchestrator: MockAgenticOrchestrator()
 41 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:77:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 75 |                 "paymentAmount": "$50,000.00",
 76 |             ],
 77 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 78 |         )
 79 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:82:27: error: extra argument 'requirements' in call
 80 |         let acquisition = createTestAcquisition(
 81 |             title: "Personal Services Contract",
 82 |             requirements: "Need consulting services from John Smith at john.smith@personalservices.com"
    |                           `- error: extra argument 'requirements' in call
 83 |         )
 84 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:85:38: error: extra arguments at positions #1, #2, #3 in call
 83 |         )
 84 | 
 85 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
 86 | 
 87 |         // When: Process form with PII data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:85:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 83 |         )
 84 | 
 85 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 86 | 
 87 |         // When: Process form with PII data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:99:27: error: cannot find 'ContextFeatures' in scope
 97 |                 category: .professionalServices,
 98 |                 confidence: 0.8,
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),
    |                           `- error: cannot find 'ContextFeatures' in scope
100 |                 acquisitionValue: 50000,
101 |                 urgency: .normal,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:96:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 94 |             newValue: "John Smith Personal Services LLC",
 95 |             formType: "SF-1449",
 96 |             context: AcquisitionContext(
    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 97 |                 category: .professionalServices,
 98 |                 confidence: 0.8,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:97:17: error: missing argument for parameter 'from' in call
 95 |             formType: "SF-1449",
 96 |             context: AcquisitionContext(
 97 |                 category: .professionalServices,
    |                 `- error: missing argument for parameter 'from' in call
 98 |                 confidence: 0.8,
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:97:28: error: cannot infer contextual base in reference to member 'professionalServices'
 95 |             formType: "SF-1449",
 96 |             context: AcquisitionContext(
 97 |                 category: .professionalServices,
    |                            `- error: cannot infer contextual base in reference to member 'professionalServices'
 98 |                 confidence: 0.8,
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:101:27: error: cannot infer contextual base in reference to member 'normal'
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),
100 |                 acquisitionValue: 50000,
101 |                 urgency: .normal,
    |                           `- error: cannot infer contextual base in reference to member 'normal'
102 |                 complexity: .medium,
103 |                 acquisitionId: acquisition.id

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:102:30: error: cannot infer contextual base in reference to member 'medium'
100 |                 acquisitionValue: 50000,
101 |                 urgency: .normal,
102 |                 complexity: .medium,
    |                              `- error: cannot infer contextual base in reference to member 'medium'
103 |                 acquisitionId: acquisition.id
104 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:132:13: error: cannot find 'FieldModification' in scope
130 |         // Given: Form interactions with various field types
131 |         let testModifications = [
132 |             FieldModification(
    |             `- error: cannot find 'FieldModification' in scope
133 |                 fieldId: "paymentTerms",
134 |                 originalValue: "NET-15",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:140:13: error: cannot find 'FieldModification' in scope
138 |                 context: createTestContext(.informationTechnology)
139 |             ),
140 |             FieldModification(
    |             `- error: cannot find 'FieldModification' in scope
141 |                 fieldId: "evaluationCriteria",
142 |                 originalValue: "Price Only",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:138:45: error: cannot infer contextual base in reference to member 'informationTechnology'
136 |                 timestamp: Date(),
137 |                 formType: "SF-1449",
138 |                 context: createTestContext(.informationTechnology)
    |                                             `- error: cannot infer contextual base in reference to member 'informationTechnology'
139 |             ),
140 |             FieldModification(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:146:45: error: cannot infer contextual base in reference to member 'informationTechnology'
144 |                 timestamp: Date(),
145 |                 formType: "SF-1449",
146 |                 context: createTestContext(.informationTechnology)
    |                                             `- error: cannot infer contextual base in reference to member 'informationTechnology'
147 |             ),
148 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:198:50: error: value of type 'MockCoreDataActor' has no member 'getMemoryDump'
196 | 
197 |         // Verify secure deletion (memory should be overwritten)
198 |         let memoryDump = await mockCoreDataActor.getMemoryDump()
    |                                                  `- error: value of type 'MockCoreDataActor' has no member 'getMemoryDump'
199 |         let sensitiveDataFound = memoryDump.contains { dump in
200 |             dump.contains("fieldType:") || dump.contains("context:") || dump.contains("qValue:")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:215:50: error: cannot infer contextual base in reference to member 'textField'
213 |         // Given: System with learning data
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                  `- error: cannot infer contextual base in reference to member 'textField'
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
217 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:215:71: error: cannot infer contextual base in reference to member 'informationTechnology'
213 |         // Given: System with learning data
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                                       `- error: cannot infer contextual base in reference to member 'informationTechnology'
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
217 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:216:50: error: cannot infer contextual base in reference to member 'dropdownField'
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
    |                                                  `- error: cannot infer contextual base in reference to member 'dropdownField'
217 |         ]
218 |         let testActions = [

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:216:75: error: cannot infer contextual base in reference to member 'construction'
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
    |                                                                           `- error: cannot infer contextual base in reference to member 'construction'
217 |         ]
218 |         let testActions = [

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:329:58: error: cannot infer contextual base in reference to member 'textField'
327 |         // Given: Private user patterns in Q-learning model
328 |         let privatePatterns = [
329 |             (state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                          `- error: cannot infer contextual base in reference to member 'textField'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:329:79: error: cannot infer contextual base in reference to member 'informationTechnology'
327 |         // Given: Private user patterns in Q-learning model
328 |         let privatePatterns = [
329 |             (state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                                               `- error: cannot infer contextual base in reference to member 'informationTechnology'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:332:58: error: cannot infer contextual base in reference to member 'textField'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),
332 |             (state: createTestQLearningState(fieldType: .textField, context: .construction),
    |                                                          `- error: cannot infer contextual base in reference to member 'textField'
333 |              action: createTestQLearningAction(value: "Private Construction Value", confidence: 0.8),
334 |              reward: 0.8),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:332:79: error: cannot infer contextual base in reference to member 'construction'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),
332 |             (state: createTestQLearningState(fieldType: .textField, context: .construction),
    |                                                                               `- error: cannot infer contextual base in reference to member 'construction'
333 |              action: createTestQLearningAction(value: "Private Construction Value", confidence: 0.8),
334 |              reward: 0.8),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:369:62: error: cannot infer contextual base in reference to member 'textField'
367 |         await adaptiveService.enableDifferentialPrivacy(epsilon: 1.0) // Standard privacy parameter
368 | 
369 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                              `- error: cannot infer contextual base in reference to member 'textField'
370 |         let testAction = createTestQLearningAction(value: "DP Test", confidence: 0.8)
371 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:369:83: error: cannot infer contextual base in reference to member 'informationTechnology'
367 |         await adaptiveService.enableDifferentialPrivacy(epsilon: 1.0) // Standard privacy parameter
368 | 
369 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'informationTechnology'
370 |         let testAction = createTestQLearningAction(value: "DP Test", confidence: 0.8)
371 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:373:27: error: cannot find type 'ValuePrediction' in scope
371 | 
372 |         // When: Make multiple queries for the same state-action pair
373 |         var predictions: [ValuePrediction] = []
    |                           `- error: cannot find type 'ValuePrediction' in scope
374 |         for _ in 1 ... 100 {
375 |             let prediction = await qLearningAgent.predictFieldValue(state: testState)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:380:48: error: cannot infer key path type from context; consider explicitly specifying a root type
378 | 
379 |         // Then: Predictions should have appropriate noise for privacy
380 |         let confidenceValues = predictions.map(\.confidence)
    |                                                `- error: cannot infer key path type from context; consider explicitly specifying a root type
381 |         let confidenceVariance = calculateVariance(confidenceValues)
382 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:440:37: error: value of optional type 'AdversarialAttackTester?' must be unwrapped to refer to member 'attemptModelInversionAttack' of wrapped base type 'AdversarialAttackTester'
438 | 
439 |         // When: Attempt model inversion attack
440 |         let inversionResult = await adversarialTester.attemptModelInversionAttack(
    |                                     |- error: value of optional type 'AdversarialAttackTester?' must be unwrapped to refer to member 'attemptModelInversionAttack' of wrapped base type 'AdversarialAttackTester'
    |                                     |- note: chain the optional using '?' to access member 'attemptModelInversionAttack' only for non-'nil' base values
    |                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
441 |             target: qLearningAgent,
442 |             knownTrainingData: knownTrainingData

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:462:32: error: cannot find 'AdaptiveFormMetricsCollector' in scope
460 | 
461 |         // Given: System collecting performance metrics
462 |         let metricsCollector = AdaptiveFormMetricsCollector()
    |                                `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
463 | 
464 |         // Process forms with different privacy-sensitive patterns

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:500:38: error: extra arguments at positions #1, #2, #3 in call
498 |         let formData = createTestFormData()
499 |         let acquisition = createTestAcquisition(title: "Network Test Acquisition")
500 |         let userProfile = UserProfile(id: UUID(), name: "Network Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
501 | 
502 |         _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:500:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
498 |         let formData = createTestFormData()
499 |         let acquisition = createTestAcquisition(title: "Network Test Acquisition")
500 |         let userProfile = UserProfile(id: UUID(), name: "Network Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
501 | 
502 |         _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:510:41: error: cannot infer contextual base in reference to member 'informationTechnology'
508 |             newValue: "modified",
509 |             formType: "SF-1449",
510 |             context: createTestContext(.informationTechnology)
    |                                         `- error: cannot infer contextual base in reference to member 'informationTechnology'
511 |         )
512 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:517:41: error: cannot infer contextual base in reference to member 'informationTechnology'
515 |             fieldId: "testField",
516 |             suggestedValue: "test value",
517 |             context: createTestContext(.informationTechnology)
    |                                         `- error: cannot infer contextual base in reference to member 'informationTechnology'
518 |         )
519 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:550:62: error: cannot infer contextual base in reference to member 'textField'
548 | 
549 |         // When: Perform ML operations
550 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                              `- error: cannot infer contextual base in reference to member 'textField'
551 |         _ = await qLearningAgent.predictFieldValue(state: testState)
552 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:550:83: error: cannot infer contextual base in reference to member 'informationTechnology'
548 | 
549 |         // When: Perform ML operations
550 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'informationTechnology'
551 |         _ = await qLearningAgent.predictFieldValue(state: testState)
552 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:554:33: error: cannot find 'AcquisitionContextClassifier' in scope
552 | 
553 |         let testAcquisition = createTestAcquisition(title: "MLX Test")
554 |         let contextClassifier = AcquisitionContextClassifier()
    |                                 `- error: cannot find 'AcquisitionContextClassifier' in scope
555 |         _ = try await contextClassifier.classifyAcquisition(testAcquisition)
556 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:571:19: warning: value 'mockCoreDataActor' was defined but never used; consider replacing with boolean test
569 |     /// Test encrypted Core Data storage with key rotation
570 |     func testEncryptedCoreDataStorageWithKeyRotation() async throws {
571 |         guard let mockCoreDataActor else {
    |                   `- warning: value 'mockCoreDataActor' was defined but never used; consider replacing with boolean test
572 |             XCTFail("MockCoreDataActor should be initialized")
573 |             return

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:611:23: error: cannot find 'ContextFeatures' in scope
609 |             category: category,
610 |             confidence: 0.8,
611 |             features: ContextFeatures(
    |                       `- error: cannot find 'ContextFeatures' in scope
612 |                 estimatedValue: 100_000,
613 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:608:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
606 | 
607 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
608 |         AcquisitionContext(
    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
609 |             category: category,
610 |             confidence: 0.8,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:609:13: error: missing argument for parameter 'from' in call
607 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
608 |         AcquisitionContext(
609 |             category: category,
    |             `- error: missing argument for parameter 'from' in call
610 |             confidence: 0.8,
611 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:619:23: error: cannot infer contextual base in reference to member 'normal'
617 |             ),
618 |             acquisitionValue: 100_000,
619 |             urgency: .normal,
    |                       `- error: cannot infer contextual base in reference to member 'normal'
620 |             complexity: .medium,
621 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:620:26: error: cannot infer contextual base in reference to member 'medium'
618 |             acquisitionValue: 100_000,
619 |             urgency: .normal,
620 |             complexity: .medium,
    |                          `- error: cannot infer contextual base in reference to member 'medium'
621 |             acquisitionId: UUID()
622 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:626:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
624 | 
625 |     private func createTestAcquisition(title: String) -> AcquisitionAggregate {
626 |         AcquisitionAggregate(
    |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
627 |             id: UUID(),
628 |             title: title,

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:627:13: error: missing argument for parameter 'managedObject' in call
625 |     private func createTestAcquisition(title: String) -> AcquisitionAggregate {
626 |         AcquisitionAggregate(
627 |             id: UUID(),
    |             `- error: missing argument for parameter 'managedObject' in call
628 |             title: title,
629 |             requirements: "Test requirements",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:645:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
643 |                 "paymentTerms": "NET-30",
644 |             ],
645 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
646 |         )
647 |     }
[24/35] Compiling AIKOTests AdaptiveFormPrivacyTests.swift
/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:833:58: error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
831 |     // MARK: - Test Helper Methods
832 | 
833 |     private func createTestAcquisition(title: String) -> AcquisitionAggregate {
    |                                                          `- error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
834 |         AcquisitionAggregate(
835 |             id: UUID(),

/Users/J/aiko/Sources/Domain/Models/AcquisitionAggregate.swift:6:20: note: found this candidate
  4 | 
  5 | /// Rich domain model for Acquisition aggregate root
  6 | public final class AcquisitionAggregate: AggregateRoot<Acquisition>, @unchecked Sendable {
    |                    `- note: found this candidate
  7 |     // MARK: - Properties
  8 | 

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:295:15: note: found this candidate
293 | 
294 | /// Acquisition aggregate for context classification
295 | public struct AcquisitionAggregate: Sendable {
    |               `- note: found this candidate
296 |     public let title: String?
297 |     public let description: String?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:845:79: error: 'AcquisitionContext' is ambiguous for type lookup in this context
843 |     }
844 | 
845 |     private func createTestAcquisitionContext(_ category: ContextCategory) -> AcquisitionContext {
    |                                                                               `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
846 |         let acquisitionType: AcquisitionType = switch category {
847 |         case .informationTechnology:

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:882:94: error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
880 |     }
881 | 
882 |     private func createHighConfidenceScenario() -> (formData: AppCore.FormData, acquisition: AcquisitionAggregate, userProfile: AppCore.UserProfile) {
    |                                                                                              `- error: 'AcquisitionAggregate' is ambiguous for type lookup in this context
883 |         // Create test form fields using the correct AppCore FormField
884 |         let testField = AppCore.FormField(

/Users/J/aiko/Sources/Domain/Models/AcquisitionAggregate.swift:6:20: note: found this candidate
  4 | 
  5 | /// Rich domain model for Acquisition aggregate root
  6 | public final class AcquisitionAggregate: AggregateRoot<Acquisition>, @unchecked Sendable {
    |                    `- note: found this candidate
  7 |     // MARK: - Properties
  8 | 

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:295:15: note: found this candidate
293 | 
294 | /// Acquisition aggregate for context classification
295 | public struct AcquisitionAggregate: Sendable {
    |               `- note: found this candidate
296 |     public let title: String?
297 |     public let description: String?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:937:11: error: cannot find type 'AdaptiveFormEventType' in scope
935 | // MARK: - Test Extensions
936 | 
937 | extension AdaptiveFormEventType {
    |           `- error: cannot find type 'AdaptiveFormEventType' in scope
938 |     init?(rawValue: String) {
939 |         switch rawValue {

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:24:50: error: missing arguments for parameters 'aiOrchestrator', 'learningLoop', 'adaptiveService', 'coreDataStack' in call
 22 |         // Initialize test infrastructure
 23 |         mockCoreDataActor = MockCoreDataActor()
 24 |         agenticOrchestrator = AgenticOrchestrator()
    |                                                  `- error: missing arguments for parameters 'aiOrchestrator', 'learningLoop', 'adaptiveService', 'coreDataStack' in call
 25 |         learningLoop = LearningLoop.shared
 26 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:29:12: note: 'init(aiOrchestrator:learningLoop:adaptiveService:coreDataStack:)' declared here
 27 |     private let localRLAgent: LocalRLAgent
 28 | 
 29 |     public init(
    |            `- note: 'init(aiOrchestrator:learningLoop:adaptiveService:coreDataStack:)' declared here
 30 |         aiOrchestrator: AIOrchestrator,
 31 |         learningLoop: LearningLoop,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:29:69: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 27 |         // Initialize adaptive form components
 28 |         let contextClassifier = AcquisitionContextClassifier()
 29 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 30 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
 31 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:30:74: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 28 |         let contextClassifier = AcquisitionContextClassifier()
 29 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
 30 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
    |                                                                          `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 31 |         let explanationEngine = ValueExplanationEngine()
 32 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:45:39: error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
 43 |         // Initialize enhanced FormIntelligenceAdapter
 44 |         formIntelligenceAdapter = FormIntelligenceAdapter.liveValue
 45 |         await formIntelligenceAdapter.setAdaptiveService(adaptiveFormService)
    |                                       `- error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
 46 | 
 47 |         // Enable adaptive learning for tests

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:80:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 78 |                 "deliverySchedule": "",
 79 |             ],
 80 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 81 |         )
 82 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:83:49: error: extra arguments at positions #1, #4, #5, #6, #7 in call
 81 |         )
 82 | 
 83 |         let itAcquisition = AcquisitionAggregate(
    |                                                 `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
 84 |             id: UUID(),
 85 |             title: "Software Development Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:84:23: error: missing argument for parameter 'description' in call
 82 | 
 83 |         let itAcquisition = AcquisitionAggregate(
 84 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
 85 |             title: "Software Development Services",
 86 |             requirements: "Need comprehensive software development for IT infrastructure with cloud computing and database management",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:86:27: error: cannot convert value of type 'String' to expected argument type '[String]'
 84 |             id: UUID(),
 85 |             title: "Software Development Services",
 86 |             requirements: "Need comprehensive software development for IT infrastructure with cloud computing and database management",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
 87 |             projectDescription: "Complete IT solution with software programming, network security, and cybersecurity implementation",
 88 |             estimatedValue: 500_000,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:129:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
127 |                 "performancePeriod": "",
128 |             ],
129 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
130 |         )
131 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:132:56: error: extra arguments at positions #1, #4, #5, #6, #7 in call
130 |         )
131 | 
132 |         let ambiguousAcquisition = AcquisitionAggregate(
    |                                                        `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
133 |             id: UUID(),
134 |             title: "General Services",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:133:23: error: missing argument for parameter 'description' in call
131 | 
132 |         let ambiguousAcquisition = AcquisitionAggregate(
133 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
134 |             title: "General Services",
135 |             requirements: "Need various general services", // Very generic, low confidence

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:135:27: error: cannot convert value of type 'String' to expected argument type '[String]'
133 |             id: UUID(),
134 |             title: "General Services",
135 |             requirements: "Need various general services", // Very generic, low confidence
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
136 |             projectDescription: "Standard services required",
137 |             estimatedValue: 50000,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:171:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
169 |             revision: "2024-01",
170 |             fields: ["testField": ""],
171 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
172 |         )
173 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:208:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
206 |                 "deliverables": "",
207 |             ],
208 |             metadata: ["legacy": "true"]
    |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
209 |         )
210 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:242:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
240 |             revision: "2024-01",
241 |             fields: ["paymentTerms": ""],
242 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
243 |         )
244 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:258:39: error: value of type 'FormIntelligenceAdapter' has no member 'trackFormModification'
256 | 
257 |         // When: Track user modification
258 |         await formIntelligenceAdapter.trackFormModification(
    |                                       `- error: value of type 'FormIntelligenceAdapter' has no member 'trackFormModification'
259 |             fieldId: "paymentTerms",
260 |             originalValue: originalValue,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:268:56: error: value of type 'AdaptiveFormPopulationService' has no member 'getRecentLearningEvents'
266 |         // Then: Modification should be tracked for learning
267 |         // Verify through adaptive service that learning occurred
268 |         let learningEvents = await adaptiveFormService.getRecentLearningEvents()
    |                                                        `- error: value of type 'AdaptiveFormPopulationService' has no member 'getRecentLearningEvents'
269 | 
270 |         XCTAssertGreaterThan(learningEvents.count, 0,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:288:35: error: value of type 'AdaptiveFormPopulationService' has no member 'registerWithOrchestrator'
286 |         }
287 |         // When: Adaptive service initializes
288 |         await adaptiveFormService.registerWithOrchestrator()
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'registerWithOrchestrator'
289 | 
290 |         // Then: Should be registered as RL agent

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:291:58: error: value of type 'AgenticOrchestrator' has no member 'getRegisteredRLAgents'
289 | 
290 |         // Then: Should be registered as RL agent
291 |         let registeredAgents = await agenticOrchestrator.getRegisteredRLAgents()
    |                                                          `- error: value of type 'AgenticOrchestrator' has no member 'getRegisteredRLAgents'
292 |         let adaptiveAgent = registeredAgents.first { $0.agentId == "adaptive_form_population" }
293 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:308:54: error: value of type 'AgenticOrchestrator' has no member 'getLocalRLAgent'
306 |         }
307 |         // Given: Local RL agent infrastructure exists
308 |         let localRLAgent = await agenticOrchestrator.getLocalRLAgent()
    |                                                      `- error: value of type 'AgenticOrchestrator' has no member 'getLocalRLAgent'
309 |         XCTAssertNotNil(localRLAgent, "Local RL agent should be available")
310 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:312:104: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
310 | 
311 |         // When: Perform adaptive learning operation
312 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
    |                                                                                                        `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
313 |         let testAcquisition = createTestAcquisition(title: "RL Infrastructure Test")
314 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:314:38: error: extra arguments at positions #1, #2, #3 in call
312 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
313 |         let testAcquisition = createTestAcquisition(title: "RL Infrastructure Test")
314 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
315 | 
316 |         _ = try await adaptiveFormService.populateForm(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:314:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
312 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
313 |         let testAcquisition = createTestAcquisition(title: "RL Infrastructure Test")
314 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
315 | 
316 |         _ = try await adaptiveFormService.populateForm(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:352:62: error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
350 |                              "Should have high confidence for coordination")
351 | 
352 |         let coordinatedDecisions = await agenticOrchestrator.getCoordinatedDecisions()
    |                                                              `- error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
353 |         let adaptiveDecision = coordinatedDecisions.first {
354 |             $0.agentId == "adaptive_form_population" && $0.confidence > 0.6

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:369:57: error: cannot infer contextual base in reference to member 'informationTechnology'
367 |         }
368 |         // Given: Learning scenario
369 |         let testContext = createTestAcquisitionContext(.informationTechnology)
    |                                                         `- error: cannot infer contextual base in reference to member 'informationTechnology'
370 | 
371 |         // When: Track modification for learning

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:372:35: error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
370 | 
371 |         // When: Track modification for learning
372 |         await adaptiveFormService.trackModification(
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
373 |             fieldId: "paymentTerms",
374 |             originalValue: "NET-15",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:381:49: error: value of type 'LearningLoop' has no member 'getRecentEvents'
379 | 
380 |         // Then: Learning event should be shared via LearningLoop
381 |         let learningEvents = await learningLoop.getRecentEvents()
    |                                                 `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
382 |         let adaptiveEvents = learningEvents.filter {
383 |             $0.context.workflowState == "adaptive_form_population"

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:407:35: error: value of type 'AdaptiveFormPopulationService' has no member 'updateLearningState'
405 |         let testAction = createTestQLearningAction(value: "Sync Test", confidence: 0.8)
406 | 
407 |         await adaptiveFormService.updateLearningState(state: testState, action: testAction, reward: 0.7)
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'updateLearningState'
408 | 
409 |         // When: Synchronize state with orchestrator

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:410:35: error: value of type 'AdaptiveFormPopulationService' has no member 'synchronizeStateWithOrchestrator'
408 | 
409 |         // When: Synchronize state with orchestrator
410 |         await adaptiveFormService.synchronizeStateWithOrchestrator()
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'synchronizeStateWithOrchestrator'
411 | 
412 |         // Then: States should be synchronized

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:413:59: error: value of type 'AgenticOrchestrator' has no member 'getAgentState'
411 | 
412 |         // Then: States should be synchronized
413 |         let orchestratorState = await agenticOrchestrator.getAgentState(agentId: "adaptive_form_population")
    |                                                           `- error: value of type 'AgenticOrchestrator' has no member 'getAgentState'
414 | 
415 |         XCTAssertNotNil(orchestratorState, "Orchestrator should have agent state")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:416:63: error: cannot convert value of type 'TimeInterval?' (aka 'Optional<Double>') to expected argument type 'TimeInterval' (aka 'Double')
414 | 
415 |         XCTAssertNotNil(orchestratorState, "Orchestrator should have agent state")
416 |         XCTAssertEqual(orchestratorState?.lastUpdateTimestamp.timeIntervalSince1970,
    |                                                               `- error: cannot convert value of type 'TimeInterval?' (aka 'Optional<Double>') to expected argument type 'TimeInterval' (aka 'Double')
417 |                        Date().timeIntervalSince1970, accuracy: 10.0,
418 |                        "State should be recently synchronized")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:430:35: error: value of type 'AgenticOrchestrator' has no member 'simulateFailure'
428 |         }
429 |         // Given: Orchestrator in failure simulation mode
430 |         await agenticOrchestrator.simulateFailure(duration: 5.0)
    |                                   `- error: value of type 'AgenticOrchestrator' has no member 'simulateFailure'
431 | 
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:432:104: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
430 |         await agenticOrchestrator.simulateFailure(duration: 5.0)
431 | 
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
    |                                                                                                        `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
433 |         let testAcquisition = createTestAcquisition(title: "Failure Recovery Test")
434 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:434:38: error: extra arguments at positions #1, #2, #3 in call
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
433 |         let testAcquisition = createTestAcquisition(title: "Failure Recovery Test")
434 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
435 | 
436 |         // When: Attempt form population during orchestrator failure

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:434:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
432 |         let testFormData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: [:], metadata: [:])
433 |         let testAcquisition = createTestAcquisition(title: "Failure Recovery Test")
434 |         let testProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
435 | 
436 |         // When: Attempt form population during orchestrator failure

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:450:53: error: value of type 'AgenticOrchestrator' has no member 'isOperational'
448 | 
449 |         // Verify recovery
450 |         let isRecovered = await agenticOrchestrator.isOperational()
    |                                                     `- error: value of type 'AgenticOrchestrator' has no member 'isOperational'
451 |         XCTAssertTrue(isRecovered, "Orchestrator should recover from failure")
452 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:474:114: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
472 |         }
473 |         // Given: Complete form workflow
474 |         let formData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: ["testField": ""], metadata: [:])
    |                                                                                                                  `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
475 |         let acquisition = createTestAcquisition(title: "Event Capture Test")
476 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:476:38: error: extra arguments at positions #1, #2, #3 in call
474 |         let formData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: ["testField": ""], metadata: [:])
475 |         let acquisition = createTestAcquisition(title: "Event Capture Test")
476 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
477 | 
478 |         // When: Execute complete workflow

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:476:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
474 |         let formData = FormData(formNumber: "SF-1449", revision: "2024-01", fields: ["testField": ""], metadata: [:])
475 |         let acquisition = createTestAcquisition(title: "Event Capture Test")
476 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
477 | 
478 |         // When: Execute complete workflow

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:487:35: error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
485 | 
486 |         // 2. User modification
487 |         await adaptiveFormService.trackModification(
    |                                   `- error: value of type 'AdaptiveFormPopulationService' has no member 'trackModification'
488 |             fieldId: "testField",
489 |             originalValue: "original",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:492:52: error: cannot infer contextual base in reference to member 'informationTechnology'
490 |             newValue: "modified",
491 |             formType: "SF-1449",
492 |             context: createTestAcquisitionContext(.informationTechnology)
    |                                                    `- error: cannot infer contextual base in reference to member 'informationTechnology'
493 |         )
494 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:496:39: error: value of type 'AdaptiveFormPopulationService' has no member 'getFieldExplanation'
494 | 
495 |         // 3. Explanation request
496 |         _ = await adaptiveFormService.getFieldExplanation(
    |                                       `- error: value of type 'AdaptiveFormPopulationService' has no member 'getFieldExplanation'
497 |             fieldId: "testField",
498 |             suggestedValue: "modified",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:499:52: error: cannot infer contextual base in reference to member 'informationTechnology'
497 |             fieldId: "testField",
498 |             suggestedValue: "modified",
499 |             context: createTestAcquisitionContext(.informationTechnology)
    |                                                    `- error: cannot infer contextual base in reference to member 'informationTechnology'
500 |         )
501 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:503:44: error: value of type 'LearningLoop' has no member 'getRecentEvents'
501 | 
502 |         // Then: All events should be captured
503 |         let allEvents = await learningLoop.getRecentEvents()
    |                                            `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
504 |         let adaptiveEvents = allEvents.filter { $0.context.workflowState == "adaptive_form_population" }
505 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:510:49: error: cannot infer key path type from context; consider explicitly specifying a root type
508 |                                     "Should capture all workflow events")
509 | 
510 |         let eventTypes = Set(adaptiveEvents.map(\.eventType))
    |                                                 `- error: cannot infer key path type from context; consider explicitly specifying a root type
511 |         XCTAssertTrue(eventTypes.contains(.documentGenerated), "Should capture form population event")
512 |         XCTAssertTrue(eventTypes.contains(.documentEdited), "Should capture modification event")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:511:44: error: cannot infer contextual base in reference to member 'documentGenerated'
509 | 
510 |         let eventTypes = Set(adaptiveEvents.map(\.eventType))
511 |         XCTAssertTrue(eventTypes.contains(.documentGenerated), "Should capture form population event")
    |                                            `- error: cannot infer contextual base in reference to member 'documentGenerated'
512 |         XCTAssertTrue(eventTypes.contains(.documentEdited), "Should capture modification event")
513 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:512:44: error: cannot infer contextual base in reference to member 'documentEdited'
510 |         let eventTypes = Set(adaptiveEvents.map(\.eventType))
511 |         XCTAssertTrue(eventTypes.contains(.documentGenerated), "Should capture form population event")
512 |         XCTAssertTrue(eventTypes.contains(.documentEdited), "Should capture modification event")
    |                                            `- error: cannot infer contextual base in reference to member 'documentEdited'
513 |     }
514 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:532:35: error: cannot find 'AdaptiveFormEventType' in scope
530 |         // When: Record each event type
531 |         for scenario in eventScenarios {
532 |             guard let eventType = AdaptiveFormEventType(rawValue: scenario.action) else {
    |                                   `- error: cannot find 'AdaptiveFormEventType' in scope
533 |                 XCTFail("Invalid event type: \(scenario.action)")
534 |                 continue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:536:32: error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
534 |                 continue
535 |             }
536 |             await LearningLoop.recordAdaptiveFormEvent(
    |                                `- error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
537 |                 eventType,
538 |                 formType: "SF-1449",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:540:56: error: cannot infer contextual base in reference to member 'informationTechnology'
538 |                 formType: "SF-1449",
539 |                 fieldId: "testField",
540 |                 context: createTestAcquisitionContext(.informationTechnology)
    |                                                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
541 |             )
542 |         }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:545:49: error: value of type 'LearningLoop' has no member 'getRecentEvents'
543 | 
544 |         // Then: Event types should be correctly classified
545 |         let recordedEvents = await learningLoop.getRecentEvents()
    |                                                 `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
546 |         let adaptiveEvents = recordedEvents.filter { $0.context.workflowState == "adaptive_form_population" }
547 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:576:23: error: cannot find 'ContextFeatures' in scope
574 |             category: .informationTechnology,
575 |             confidence: 0.85,
576 |             features: ContextFeatures(
    |                       `- error: cannot find 'ContextFeatures' in scope
577 |                 estimatedValue: 200_000,
578 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:573:41: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
571 |         ]
572 | 
573 |         let context = AcquisitionContext(
    |                                         `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
574 |             category: .informationTechnology,
575 |             confidence: 0.85,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:574:13: error: missing argument for parameter 'from' in call
572 | 
573 |         let context = AcquisitionContext(
574 |             category: .informationTechnology,
    |             `- error: missing argument for parameter 'from' in call
575 |             confidence: 0.85,
576 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:574:24: error: cannot infer contextual base in reference to member 'informationTechnology'
572 | 
573 |         let context = AcquisitionContext(
574 |             category: .informationTechnology,
    |                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
575 |             confidence: 0.85,
576 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:584:23: error: cannot infer contextual base in reference to member 'normal'
582 |             ),
583 |             acquisitionValue: 200_000,
584 |             urgency: .normal,
    |                       `- error: cannot infer contextual base in reference to member 'normal'
585 |             complexity: .high,
586 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:585:26: error: cannot infer contextual base in reference to member 'high'
583 |             acquisitionValue: 200_000,
584 |             urgency: .normal,
585 |             complexity: .high,
    |                          `- error: cannot infer contextual base in reference to member 'high'
586 |             acquisitionId: UUID()
587 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:590:28: error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
588 | 
589 |         // When: Record event with metadata
590 |         await LearningLoop.recordAdaptiveFormEvent(
    |                            `- error: type 'LearningLoop' has no member 'recordAdaptiveFormEvent'
591 |             .suggestionAccepted,
592 |             formType: "SF-1449",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:591:14: error: cannot infer contextual base in reference to member 'suggestionAccepted'
589 |         // When: Record event with metadata
590 |         await LearningLoop.recordAdaptiveFormEvent(
591 |             .suggestionAccepted,
    |              `- error: cannot infer contextual base in reference to member 'suggestionAccepted'
592 |             formType: "SF-1449",
593 |             fieldId: "paymentTerms",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:599:41: error: value of type 'LearningLoop' has no member 'getRecentEvents'
597 | 
598 |         // Then: Metadata should be preserved accurately
599 |         let events = await learningLoop.getRecentEvents()
    |                                         `- error: value of type 'LearningLoop' has no member 'getRecentEvents'
600 |         let targetEvent = events.first { $0.eventType == .suggestionAccepted }
601 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:600:59: error: cannot infer contextual base in reference to member 'suggestionAccepted'
598 |         // Then: Metadata should be preserved accurately
599 |         let events = await learningLoop.getRecentEvents()
600 |         let targetEvent = events.first { $0.eventType == .suggestionAccepted }
    |                                                           `- error: cannot infer contextual base in reference to member 'suggestionAccepted'
601 | 
602 |         XCTAssertNotNil(targetEvent, "Should record suggestion accepted event")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:605:60: error: type of expression is ambiguous without a type annotation
603 | 
604 |         for (key, expectedValue) in richMetadata {
605 |             let actualValue = targetEvent?.context.userData[key]
    |                                                            `- error: type of expression is ambiguous without a type annotation
606 |             XCTAssertEqual(actualValue, expectedValue,
607 |                            "Should preserve metadata: \(key) = \(expectedValue)")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:613:19: warning: value 'learningLoop' was defined but never used; consider replacing with boolean test
611 |     /// Test event ordering and timestamps
612 |     func testEventOrderingAndTimestamps() async throws {
613 |         guard let learningLoop else {
    |                   `- warning: value 'learningLoop' was defined but never used; consider replacing with boolean test
614 |             XCTFail("LearningLoop should be initialized")
615 |             return

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormIntegrationTests.swift:816:62: error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
814 | 
815 |         // 3. Agent should be coordinated with orchestrator
816 |         let coordinatedDecisions = await agenticOrchestrator.getCoordinatedDecisions()
    |                                                              `- error: value of type 'AgenticOrchestrator' has no member 'getCoordinatedDecisions'
817 |         let adaptiveDecisions = coordinatedDecisions.filter { $0.agentId == "adaptive_form_population" }
818 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:12:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
  10 |     // MARK: - Test Infrastructure
  11 | 
  12 |     var adaptiveService: AdaptiveFormPopulationService?
     |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
  13 |     var qLearningAgent: FormFieldQLearningAgent?
  14 |     var contextClassifier: AcquisitionContextClassifier?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:13:25: error: cannot find type 'FormFieldQLearningAgent' in scope
  11 | 
  12 |     var adaptiveService: AdaptiveFormPopulationService?
  13 |     var qLearningAgent: FormFieldQLearningAgent?
     |                         `- error: cannot find type 'FormFieldQLearningAgent' in scope
  14 |     var contextClassifier: AcquisitionContextClassifier?
  15 |     var mockCoreDataActor: MockCoreDataActor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:14:28: error: cannot find type 'AcquisitionContextClassifier' in scope
  12 |     var adaptiveService: AdaptiveFormPopulationService?
  13 |     var qLearningAgent: FormFieldQLearningAgent?
  14 |     var contextClassifier: AcquisitionContextClassifier?
     |                            `- error: cannot find type 'AcquisitionContextClassifier' in scope
  15 |     var mockCoreDataActor: MockCoreDataActor?
  16 |     var performanceMonitor: PerformanceMonitor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:16:29: error: 'PerformanceMonitor' is ambiguous for type lookup in this context
  14 |     var contextClassifier: AcquisitionContextClassifier?
  15 |     var mockCoreDataActor: MockCoreDataActor?
  16 |     var performanceMonitor: PerformanceMonitor?
     |                             `- error: 'PerformanceMonitor' is ambiguous for type lookup in this context
  17 |     var mlxBenchmarker: MLXPerformanceBenchmarker?
  18 | 
     :
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- note: found this candidate
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:470:7: note: found this candidate
468 | // MARK: - Performance Support Classes
469 | 
470 | class PerformanceMonitor {
    |       `- note: found this candidate
471 |     func currentMemoryUsage() -> UInt64 {
472 |         // RED PHASE: Not implemented

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:94: error: cannot find type 'QLearningState' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                                                              `- error: cannot find type 'QLearningState' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:54: error: cannot find type 'FieldType' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                      `- error: cannot find type 'FieldType' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:756:74: error: cannot find type 'ContextCategory' in scope
 754 |     }
 755 | 
 756 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
     |                                                                          `- error: cannot find type 'ContextCategory' in scope
 757 |         QLearningState(
 758 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:765:50: error: cannot find type 'QLearningState' in scope
 763 |     }
 764 | 
 765 |     private func createRandomQLearningState() -> QLearningState {
     |                                                  `- error: cannot find type 'QLearningState' in scope
 766 |         QLearningState(
 767 |             fieldType: FieldType.allCases.randomElement() ?? .textField,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:778:51: error: cannot find type 'QLearningAction' in scope
 776 |     }
 777 | 
 778 |     private func createRandomQLearningAction() -> QLearningAction {
     |                                                   `- error: cannot find type 'QLearningAction' in scope
 779 |         let values = ["Test Value", "Sample Text", "Default Option", "Custom Entry"]
 780 |         return QLearningAction(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:786:51: error: cannot find type 'QLearningState' in scope
 784 |     }
 785 | 
 786 |     private func createComplexQLearningState() -> QLearningState {
     |                                                   `- error: cannot find type 'QLearningState' in scope
 787 |         QLearningState(
 788 |             fieldType: .dropdownField,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:929:64: error: cannot find type 'QLearningState' in scope
 927 |     }
 928 | 
 929 |     private func createUniqueQLearningState(iteration: Int) -> QLearningState {
     |                                                                `- error: cannot find type 'QLearningState' in scope
 930 |         QLearningState(
 931 |             fieldType: FieldType.allCases[iteration % FieldType.allCases.count],

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:975:16: error: cannot find type 'QLearningState' in scope
 973 | 
 974 | struct FieldSuggestionScenario {
 975 |     let state: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
 976 |     let expectedComplexity: ComplexityLevel
 977 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:986:16: error: cannot find type 'QLearningState' in scope
 984 | 
 985 | struct QNetworkUpdateScenario {
 986 |     let state: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
 987 |     let action: QLearningAction
 988 |     let reward: Double

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:987:17: error: cannot find type 'QLearningAction' in scope
 985 | struct QNetworkUpdateScenario {
 986 |     let state: QLearningState
 987 |     let action: QLearningAction
     |                 `- error: cannot find type 'QLearningAction' in scope
 988 |     let reward: Double
 989 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1019:16: error: cannot find type 'QLearningState' in scope
1017 | 
1018 | struct QuantizationTestCase {
1019 |     let input: QLearningState
     |                `- error: cannot find type 'QLearningState' in scope
1020 |     let expectedOutput: QLearningAction
1021 |     let tolerance: Double

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1020:25: error: cannot find type 'QLearningAction' in scope
1018 | struct QuantizationTestCase {
1019 |     let input: QLearningState
1020 |     let expectedOutput: QLearningAction
     |                         `- error: cannot find type 'QLearningAction' in scope
1021 |     let tolerance: Double
1022 | }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1024:8: error: invalid redeclaration of 'PerformanceMetrics'
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- error: invalid redeclaration of 'PerformanceMetrics'
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1032:13: error: invalid redeclaration of 'PerformanceMonitor'
1030 | 
1031 | /// Performance monitoring for benchmarking
1032 | final class PerformanceMonitor {
     |             `- error: invalid redeclaration of 'PerformanceMonitor'
1033 |     private var measurements: [String: [TimeInterval]] = [:]
1034 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1071:36: error: cannot find type 'QLearningState' in scope
1069 |     }
1070 | 
1071 |     func benchmarkWithGPU(state _: QLearningState, iterations _: Int) async -> MLXBenchmarkResults {
     |                                    `- error: cannot find type 'QLearningState' in scope
1072 |         MLXBenchmarkResults(
1073 |             averageLatency: Double.random(in: 0.01 ... 0.03),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1078:36: error: cannot find type 'QLearningState' in scope
1076 |     }
1077 | 
1078 |     func benchmarkWithCPU(state _: QLearningState, iterations _: Int) async -> MLXBenchmarkResults {
     |                                    `- error: cannot find type 'QLearningState' in scope
1079 |         MLXBenchmarkResults(
1080 |             averageLatency: Double.random(in: 0.03 ... 0.08),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1294:44: error: cannot find type 'ThermalState' in scope
1292 |     }
1293 | 
1294 |     func getCurrentThermalState() async -> ThermalState {
     |                                            `- error: cannot find type 'ThermalState' in scope
1295 |         // Simulate thermal state
1296 |         let states: [ThermalState] = [.nominal, .fair, .serious]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1300:47: error: cannot find type 'ThermalState' in scope
1298 |     }
1299 | 
1300 |     func calculateThermalImpact(from initial: ThermalState, to final: ThermalState) -> Double {
     |                                               `- error: cannot find type 'ThermalState' in scope
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1300:71: error: cannot find type 'ThermalState' in scope
1298 |     }
1299 | 
1300 |     func calculateThermalImpact(from initial: ThermalState, to final: ThermalState) -> Double {
     |                                                                       `- error: cannot find type 'ThermalState' in scope
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1315:13: error: type 'PerformanceMockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
1313 | 
1314 | /// Mock orchestrator for testing
1315 | final class PerformanceMockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             |- error: type 'PerformanceMockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
     |             `- note: add stubs for conformance
1316 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1317 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1324:52: error: type 'UrgencyLevel' has no member 'urgent'
1322 | 
1323 | extension UrgencyLevel: CaseIterable {
1324 |     public static let allCases: [UrgencyLevel] = [.urgent, .moderate, .normal]
     |                                                    `- error: type 'UrgencyLevel' has no member 'urgent'
1325 | }
1326 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1324:61: error: type 'UrgencyLevel' has no member 'moderate'
1322 | 
1323 | extension UrgencyLevel: CaseIterable {
1324 |     public static let allCases: [UrgencyLevel] = [.urgent, .moderate, .normal]
     |                                                             `- error: type 'UrgencyLevel' has no member 'moderate'
1325 | }
1326 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1327:28: warning: conformance of 'ComplexityLevel' to protocol 'CaseIterable' was already stated in the type's module 'AIKO'
1325 | }
1326 | 
1327 | extension ComplexityLevel: CaseIterable {
     |                            `- warning: conformance of 'ComplexityLevel' to protocol 'CaseIterable' was already stated in the type's module 'AIKO'
1328 |     public static let allCases: [ComplexityLevel] = [.high, .medium, .low]
     |                       `- note: static property 'allCases' will not be used to satisfy the conformance to 'CaseIterable'
1329 | }
1330 | 

/Users/J/aiko/Sources/Models/DocumentChain.swift:149:13: note: 'ComplexityLevel' declares conformance to protocol 'CaseIterable' here
147 | 
148 | /// Complexity level of the acquisition
149 | public enum ComplexityLevel: String, Codable, CaseIterable, Sendable {
    |             `- note: 'ComplexityLevel' declares conformance to protocol 'CaseIterable' here
150 |     case low = "Low"
151 |     case medium = "Medium"

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:28:26: error: cannot find 'FormFieldQLearningAgent' in scope
  26 | 
  27 |         // Initialize system components
  28 |         qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
     |                          `- error: cannot find 'FormFieldQLearningAgent' in scope
  29 |         contextClassifier = AcquisitionContextClassifier()
  30 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:29:29: error: cannot find 'AcquisitionContextClassifier' in scope
  27 |         // Initialize system components
  28 |         qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         contextClassifier = AcquisitionContextClassifier()
     |                             `- error: cannot find 'AcquisitionContextClassifier' in scope
  30 | 
  31 |         adaptiveService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:31:27: error: cannot find 'AdaptiveFormPopulationService' in scope
  29 |         contextClassifier = AcquisitionContextClassifier()
  30 | 
  31 |         adaptiveService = AdaptiveFormPopulationService(
     |                           `- error: cannot find 'AdaptiveFormPopulationService' in scope
  32 |             contextClassifier: contextClassifier,
  33 |             qLearningAgent: qLearningAgent,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:34:34: error: cannot find 'FormModificationTracker' in scope
  32 |             contextClassifier: contextClassifier,
  33 |             qLearningAgent: qLearningAgent,
  34 |             modificationTracker: FormModificationTracker(coreDataActor: mockCoreDataActor),
     |                                  `- error: cannot find 'FormModificationTracker' in scope
  35 |             explanationEngine: ValueExplanationEngine(),
  36 |             metricsCollector: AdaptiveFormMetricsCollector(),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:35:32: error: cannot find 'ValueExplanationEngine' in scope
  33 |             qLearningAgent: qLearningAgent,
  34 |             modificationTracker: FormModificationTracker(coreDataActor: mockCoreDataActor),
  35 |             explanationEngine: ValueExplanationEngine(),
     |                                `- error: cannot find 'ValueExplanationEngine' in scope
  36 |             metricsCollector: AdaptiveFormMetricsCollector(),
  37 |             agenticOrchestrator: PerformanceMockAgenticOrchestrator()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:36:31: error: cannot find 'AdaptiveFormMetricsCollector' in scope
  34 |             modificationTracker: FormModificationTracker(coreDataActor: mockCoreDataActor),
  35 |             explanationEngine: ValueExplanationEngine(),
  36 |             metricsCollector: AdaptiveFormMetricsCollector(),
     |                               `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
  37 |             agenticOrchestrator: PerformanceMockAgenticOrchestrator()
  38 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:41:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'warmUp' of wrapped base type 'MLXPerformanceBenchmarker'
  39 | 
  40 |         // Warm up MLX Swift framework
  41 |         await mlxBenchmarker.warmUp()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'warmUp' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'warmUp' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
  42 |     }
  43 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:180:19: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'simulateDeviceConfig' of wrapped base type 'MLXPerformanceBenchmarker'
 178 |         // When: Test MLX inference performance on each configuration
 179 |         for config in deviceConfigs {
 180 |             await mlxBenchmarker.simulateDeviceConfig(config)
     |                   |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'simulateDeviceConfig' of wrapped base type 'MLXPerformanceBenchmarker'
     |                   |- note: chain the optional using '?' to access member 'simulateDeviceConfig' only for non-'nil' base values
     |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 181 | 
 182 |             let inferenceResults = await mlxBenchmarker.benchmarkQLearningInference(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:182:42: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQLearningInference' of wrapped base type 'MLXPerformanceBenchmarker'
 180 |             await mlxBenchmarker.simulateDeviceConfig(config)
 181 | 
 182 |             let inferenceResults = await mlxBenchmarker.benchmarkQLearningInference(
     |                                          |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQLearningInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                          |- note: chain the optional using '?' to access member 'benchmarkQLearningInference' only for non-'nil' base values
     |                                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 183 |                 iterations: 100,
 184 |                 stateSpaceSize: 1000

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:245:42: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQuantizedModel' of wrapped base type 'MLXPerformanceBenchmarker'
 243 |         // When: Test each quantization level
 244 |         for level in quantizationLevels {
 245 |             let quantizedResults = await mlxBenchmarker.benchmarkQuantizedModel(
     |                                          |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'benchmarkQuantizedModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                          |- note: chain the optional using '?' to access member 'benchmarkQuantizedModel' only for non-'nil' base values
     |                                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 246 |                 quantization: level,
 247 |                 testCases: createQuantizationTestCases(count: 100)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:292:44: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
 290 |         // When: Perform various MLX operations
 291 |         let operations = [
 292 |             ("Model Loading", { await self.mlxBenchmarker.loadQLearningModel() }),
     |                                            |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                            |- note: chain the optional using '?' to access member 'loadQLearningModel' only for non-'nil' base values
     |                                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:293:40: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performInference' of wrapped base type 'MLXPerformanceBenchmarker'
 291 |         let operations = [
 292 |             ("Model Loading", { await self.mlxBenchmarker.loadQLearningModel() }),
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
     |                                        |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                        |- note: chain the optional using '?' to access member 'performInference' only for non-'nil' base values
     |                                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),
 295 |             ("Model Unloading", { await self.mlxBenchmarker.unloadModel() }),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:295:46: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),
 295 |             ("Model Unloading", { await self.mlxBenchmarker.unloadModel() }),
     |                                              |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                              |- note: chain the optional using '?' to access member 'unloadModel' only for non-'nil' base values
     |                                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 296 |         ]
 297 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:294:39: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performTraining' of wrapped base type 'MLXPerformanceBenchmarker'
 292 |             ("Model Loading", { await self.mlxBenchmarker.loadQLearningModel() }),
 293 |             ("Inference", { await self.mlxBenchmarker.performInference(iterations: 50) }),
 294 |             ("Training", { await self.mlxBenchmarker.performTraining(epochs: 10) }),
     |                                       |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performTraining' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                       |- note: chain the optional using '?' to access member 'performTraining' only for non-'nil' base values
     |                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 295 |             ("Model Unloading", { await self.mlxBenchmarker.unloadModel() }),
 296 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:343:32: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performConcurrentInference' of wrapped base type 'MLXPerformanceBenchmarker'
 341 |             for i in 1 ... 5 {
 342 |                 group.addTask {
 343 |                     await self.mlxBenchmarker.performConcurrentInference(id: i)
     |                                |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performConcurrentInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                                |- note: chain the optional using '?' to access member 'performConcurrentInference' only for non-'nil' base values
     |                                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 344 |                 }
 345 |             }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:368:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'clearModelCache' of wrapped base type 'MLXPerformanceBenchmarker'
 366 |     func testMLXModelCompilationAndCaching() async throws {
 367 |         // Given: Clean state with no cached models
 368 |         await mlxBenchmarker.clearModelCache()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'clearModelCache' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'clearModelCache' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 369 | 
 370 |         // When: Compile model for first time

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:372:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'compileQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
 370 |         // When: Compile model for first time
 371 |         let firstCompilationStart = CFAbsoluteTimeGetCurrent()
 372 |         await mlxBenchmarker.compileQLearningModel()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'compileQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'compileQLearningModel' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 373 |         let firstCompilationTime = CFAbsoluteTimeGetCurrent() - firstCompilationStart
 374 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:376:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
 374 | 
 375 |         // Clear model from memory but keep cache
 376 |         await mlxBenchmarker.unloadModel()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'unloadModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'unloadModel' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 377 | 
 378 |         // Load model again (should use cache)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:380:15: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
 378 |         // Load model again (should use cache)
 379 |         let cachedLoadStart = CFAbsoluteTimeGetCurrent()
 380 |         await mlxBenchmarker.loadQLearningModel()
     |               |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'loadQLearningModel' of wrapped base type 'MLXPerformanceBenchmarker'
     |               |- note: chain the optional using '?' to access member 'loadQLearningModel' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 381 |         let cachedLoadTime = CFAbsoluteTimeGetCurrent() - cachedLoadStart
 382 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:405:37: error: extra arguments at positions #1, #2, #3 in call
 403 |             createLargeFormData(),
 404 |             acquisition: createComplexAcquisition(),
 405 |             userProfile: UserProfile(id: UUID(), name: "Memory Test User", email: "test@example.com")
     |                                     `- error: extra arguments at positions #1, #2, #3 in call
 406 |         )
 407 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:405:37: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 403 |             createLargeFormData(),
 404 |             acquisition: createComplexAcquisition(),
 405 |             userProfile: UserProfile(id: UUID(), name: "Memory Test User", email: "test@example.com")
     |                                     `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 406 |         )
 407 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:483:42: error: extra arguments at positions #1, #2, #3 in call
 481 |             let formData = createVariedFormData(index: i)
 482 |             let acquisition = createVariedAcquisition(index: i)
 483 |             let userProfile = UserProfile(id: UUID(), name: "CPU Test User \(i)", email: "test\(i)@example.com")
     |                                          `- error: extra arguments at positions #1, #2, #3 in call
 484 | 
 485 |             _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:483:42: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 481 |             let formData = createVariedFormData(index: i)
 482 |             let acquisition = createVariedAcquisition(index: i)
 483 |             let userProfile = UserProfile(id: UUID(), name: "CPU Test User \(i)", email: "test\(i)@example.com")
     |                                          `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 484 | 
 485 |             _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:566:19: error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performContinuousInference' of wrapped base type 'MLXPerformanceBenchmarker'
 564 |         while CFAbsoluteTimeGetCurrent() - startTime < operationDuration {
 565 |             // Continuous MLX inference operations
 566 |             await mlxBenchmarker.performContinuousInference(duration: 10) // 10 second bursts
     |                   |- error: value of optional type 'MLXPerformanceBenchmarker?' must be unwrapped to refer to member 'performContinuousInference' of wrapped base type 'MLXPerformanceBenchmarker'
     |                   |- note: chain the optional using '?' to access member 'performContinuousInference' only for non-'nil' base values
     |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 567 | 
 568 |             // Check for thermal throttling

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:581:47: error: type 'Equatable' has no member 'critical'
 579 | 
 580 |         // Then: Should not cause excessive thermal issues
 581 |         XCTAssertNotEqual(finalThermalState, .critical,
     |                                               `- error: type 'Equatable' has no member 'critical'
 582 |                           "Extended MLX operations should not cause critical thermal state")
 583 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:607:46: error: extra arguments at positions #1, #2, #3 in call
 605 |                 let formData = createVariedFormData(index: i)
 606 |                 let acquisition = createVariedAcquisition(index: i)
 607 |                 let userProfile = UserProfile(id: UUID(), name: "Load Test User", email: "loadtest@example.com")
     |                                              `- error: extra arguments at positions #1, #2, #3 in call
 608 | 
 609 |                 _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:607:46: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 605 |                 let formData = createVariedFormData(index: i)
 606 |                 let acquisition = createVariedAcquisition(index: i)
 607 |                 let userProfile = UserProfile(id: UUID(), name: "Load Test User", email: "loadtest@example.com")
     |                                              `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 608 | 
 609 |                 _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:630:39: error: 'PerformanceMetrics' is ambiguous for type lookup in this context
 628 |         // Given: Progressively larger Q-table sizes
 629 |         let dataSizes = [1000, 5000, 10000, 25000, 50000]
 630 |         var performanceMetrics: [Int: PerformanceMetrics] = [:]
     |                                       `- error: 'PerformanceMetrics' is ambiguous for type lookup in this context
 631 | 
 632 |         // When: Test performance at each data size
     :
1022 | }
1023 | 
1024 | struct PerformanceMetrics {
     |        `- note: found this candidate
1025 |     let lookupTime: TimeInterval
1026 |     let updateTime: TimeInterval

/Users/J/aiko/Tests/AgenticSuggestionUI/PerformanceTests.swift:495:8: note: found this candidate
493 | }
494 | 
495 | struct PerformanceMetrics {
    |        `- note: found this candidate
496 |     let average: TimeInterval
497 |     let p95: TimeInterval

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:655:62: error: incorrect argument labels in call (have 'lookupTime:updateTime:', expected 'average:p95:')
 653 |             let updateTime = CFAbsoluteTimeGetCurrent() - updateStart
 654 | 
 655 |             performanceMetrics[dataSize] = PerformanceMetrics(
     |                                                              `- error: incorrect argument labels in call (have 'lookupTime:updateTime:', expected 'average:p95:')
 656 |                 lookupTime: lookupTime / 1000, // Average per lookup
 657 |                 updateTime: updateTime / 1000 // Average per update

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:686:61: error: cannot infer contextual base in reference to member 'textField'
 684 |         [
 685 |             FieldSuggestionScenario(
 686 |                 state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
     |                                                             `- error: cannot infer contextual base in reference to member 'textField'
 687 |                 expectedComplexity: .medium
 688 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:686:82: error: cannot infer contextual base in reference to member 'informationTechnology'
 684 |         [
 685 |             FieldSuggestionScenario(
 686 |                 state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
     |                                                                                  `- error: cannot infer contextual base in reference to member 'informationTechnology'
 687 |                 expectedComplexity: .medium
 688 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:687:38: error: cannot infer contextual base in reference to member 'medium'
 685 |             FieldSuggestionScenario(
 686 |                 state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
 687 |                 expectedComplexity: .medium
     |                                      `- error: cannot infer contextual base in reference to member 'medium'
 688 |             ),
 689 |             FieldSuggestionScenario(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:690:61: error: cannot infer contextual base in reference to member 'dropdownField'
 688 |             ),
 689 |             FieldSuggestionScenario(
 690 |                 state: createTestQLearningState(fieldType: .dropdownField, context: .construction),
     |                                                             `- error: cannot infer contextual base in reference to member 'dropdownField'
 691 |                 expectedComplexity: .high
 692 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:690:86: error: cannot infer contextual base in reference to member 'construction'
 688 |             ),
 689 |             FieldSuggestionScenario(
 690 |                 state: createTestQLearningState(fieldType: .dropdownField, context: .construction),
     |                                                                                      `- error: cannot infer contextual base in reference to member 'construction'
 691 |                 expectedComplexity: .high
 692 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:691:38: error: cannot infer contextual base in reference to member 'high'
 689 |             FieldSuggestionScenario(
 690 |                 state: createTestQLearningState(fieldType: .dropdownField, context: .construction),
 691 |                 expectedComplexity: .high
     |                                      `- error: cannot infer contextual base in reference to member 'high'
 692 |             ),
 693 |             FieldSuggestionScenario(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:694:61: error: cannot infer contextual base in reference to member 'numberField'
 692 |             ),
 693 |             FieldSuggestionScenario(
 694 |                 state: createTestQLearningState(fieldType: .numberField, context: .professionalServices),
     |                                                             `- error: cannot infer contextual base in reference to member 'numberField'
 695 |                 expectedComplexity: .low
 696 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:694:84: error: cannot infer contextual base in reference to member 'professionalServices'
 692 |             ),
 693 |             FieldSuggestionScenario(
 694 |                 state: createTestQLearningState(fieldType: .numberField, context: .professionalServices),
     |                                                                                    `- error: cannot infer contextual base in reference to member 'professionalServices'
 695 |                 expectedComplexity: .low
 696 |             ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:695:38: error: cannot infer contextual base in reference to member 'low'
 693 |             FieldSuggestionScenario(
 694 |                 state: createTestQLearningState(fieldType: .numberField, context: .professionalServices),
 695 |                 expectedComplexity: .low
     |                                      `- error: cannot infer contextual base in reference to member 'low'
 696 |             ),
 697 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:705:41: error: extra arguments at positions #1, #2, #3 in call
 703 |                 formData: createSimpleFormData(),
 704 |                 acquisition: createSimpleAcquisition(),
 705 |                 userProfile: UserProfile(id: UUID(), name: "Simple User", email: "simple@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 706 |             ),
 707 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:705:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 703 |                 formData: createSimpleFormData(),
 704 |                 acquisition: createSimpleAcquisition(),
 705 |                 userProfile: UserProfile(id: UUID(), name: "Simple User", email: "simple@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 706 |             ),
 707 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:710:41: error: extra arguments at positions #1, #2, #3 in call
 708 |                 formData: createComplexFormData(),
 709 |                 acquisition: createComplexAcquisition(),
 710 |                 userProfile: UserProfile(id: UUID(), name: "Complex User", email: "complex@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 711 |             ),
 712 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:710:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 708 |                 formData: createComplexFormData(),
 709 |                 acquisition: createComplexAcquisition(),
 710 |                 userProfile: UserProfile(id: UUID(), name: "Complex User", email: "complex@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 711 |             ),
 712 |             FormPopulationTestCase(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:715:41: error: extra arguments at positions #1, #2, #3 in call
 713 |                 formData: createLargeFormData(),
 714 |                 acquisition: createLargeAcquisition(),
 715 |                 userProfile: UserProfile(id: UUID(), name: "Large User", email: "large@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 716 |             ),
 717 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:715:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 713 |                 formData: createLargeFormData(),
 714 |                 acquisition: createLargeAcquisition(),
 715 |                 userProfile: UserProfile(id: UUID(), name: "Large User", email: "large@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 716 |             ),
 717 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:722:33: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 720 |     private func createContextClassificationTestData() -> [AcquisitionAggregate] {
 721 |         [
 722 |             AcquisitionAggregate(
     |                                 `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 723 |                 id: UUID(),
 724 |                 title: "Software Development Services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:723:17: error: missing argument for parameter 'managedObject' in call
 721 |         [
 722 |             AcquisitionAggregate(
 723 |                 id: UUID(),
     |                 `- error: missing argument for parameter 'managedObject' in call
 724 |                 title: "Software Development Services",
 725 |                 requirements: "Need cloud computing and database management",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:731:33: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 729 |                 isRecurring: false
 730 |             ),
 731 |             AcquisitionAggregate(
     |                                 `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 732 |                 id: UUID(),
 733 |                 title: "Building Construction Project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:732:17: error: missing argument for parameter 'managedObject' in call
 730 |             ),
 731 |             AcquisitionAggregate(
 732 |                 id: UUID(),
     |                 `- error: missing argument for parameter 'managedObject' in call
 733 |                 title: "Building Construction Project",
 734 |                 requirements: "Construction services and building materials",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:747:32: error: cannot find 'FieldType' in scope
 745 |             QNetworkUpdateScenario(
 746 |                 state: createTestQLearningState(
 747 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
     |                                `- error: cannot find 'FieldType' in scope
 748 |                     context: ContextCategory.allCases.randomElement() ?? .general
 749 |                 ),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:748:30: error: cannot find 'ContextCategory' in scope
 746 |                 state: createTestQLearningState(
 747 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
 748 |                     context: ContextCategory.allCases.randomElement() ?? .general
     |                              `- error: cannot find 'ContextCategory' in scope
 749 |                 ),
 750 |                 action: createRandomQLearningAction(),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:810:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 808 |             revision: "2024-01",
 809 |             fields: ["simpleField": ""],
 810 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 811 |         )
 812 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:827:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 825 |                 "performancePeriod": "",
 826 |             ],
 827 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 828 |         )
 829 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:841:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 839 |             revision: "2024-01",
 840 |             fields: fields,
 841 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 842 |         )
 843 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:854:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
 852 |                 "dynamicField\(index)": "",
 853 |             ],
 854 |             metadata: ["index": "\(index)"]
     |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
 855 |         )
 856 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:859:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 857 | 
 858 |     private func createSimpleAcquisition() -> AcquisitionAggregate {
 859 |         AcquisitionAggregate(
     |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 860 |             id: UUID(),
 861 |             title: "Simple Acquisition",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:860:13: error: missing argument for parameter 'managedObject' in call
 858 |     private func createSimpleAcquisition() -> AcquisitionAggregate {
 859 |         AcquisitionAggregate(
 860 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 861 |             title: "Simple Acquisition",
 862 |             requirements: "Basic requirements",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:871:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 869 | 
 870 |     private func createComplexAcquisition() -> AcquisitionAggregate {
 871 |         AcquisitionAggregate(
     |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 872 |             id: UUID(),
 873 |             title: "Complex IT Infrastructure Project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:872:13: error: missing argument for parameter 'managedObject' in call
 870 |     private func createComplexAcquisition() -> AcquisitionAggregate {
 871 |         AcquisitionAggregate(
 872 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 873 |             title: "Complex IT Infrastructure Project",
 874 |             requirements: "Comprehensive software development with cloud computing, database design, network security, and cybersecurity implementation for enterprise IT infrastructure.",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:885:36: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 883 |         let largeRequirements = String(repeating: "Complex requirements involving multiple stakeholders, extensive documentation, comprehensive testing, quality assurance, and ongoing support services. ", count: 20)
 884 | 
 885 |         return AcquisitionAggregate(
     |                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 886 |             id: UUID(),
 887 |             title: "Large Scale Enterprise Transformation",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:886:13: error: missing argument for parameter 'managedObject' in call
 884 | 
 885 |         return AcquisitionAggregate(
 886 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 887 |             title: "Large Scale Enterprise Transformation",
 888 |             requirements: largeRequirements,

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:900:36: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 898 |         let context = contexts[index % contexts.count]
 899 | 
 900 |         return AcquisitionAggregate(
     |                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 901 |             id: UUID(),
 902 |             title: "\(context) Project \(index)",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:901:13: error: missing argument for parameter 'managedObject' in call
 899 | 
 900 |         return AcquisitionAggregate(
 901 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 902 |             title: "\(context) Project \(index)",
 903 |             requirements: "Requirements for \(context.lowercased()) project \(index)",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:913:23: error: cannot find 'ContextCategory' in scope
 911 |     private func createRandomAcquisitionContext() -> AcquisitionContext {
 912 |         AcquisitionContext(
 913 |             category: ContextCategory.allCases.randomElement() ?? .general,
     |                       `- error: cannot find 'ContextCategory' in scope
 914 |             confidence: Double.random(in: 0.5 ... 1.0),
 915 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:915:23: error: cannot find 'ContextFeatures' in scope
 913 |             category: ContextCategory.allCases.randomElement() ?? .general,
 914 |             confidence: Double.random(in: 0.5 ... 1.0),
 915 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
 916 |                 estimatedValue: Double.random(in: 10000 ... 1_000_000),
 917 |                 hasUrgentDeadline: Bool.random(),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:912:9: error: no exact matches in call to initializer 
 910 | 
 911 |     private func createRandomAcquisitionContext() -> AcquisitionContext {
 912 |         AcquisitionContext(
     |         |- error: no exact matches in call to initializer 
     |         `- note: candidate has partially matching parameter list (from: any Decoder)
 913 |             category: ContextCategory.allCases.randomElement() ?? .general,
 914 |             confidence: Double.random(in: 0.5 ... 1.0),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:542:12: note: candidate has partially matching parameter list (acquisitionId: UUID, documentType: TestDocumentType, acquisitionValue: Double, complexity: TestComplexityLevel, timeConstraints: TestTimeConstraints, regulatoryRequirements: Set<TestFARClause>, historicalSuccess: Double, userProfile: TestUserProfile, workflowProgress: Double, completedDocuments: [String])
540 |     }
541 | 
542 |     public init(acquisitionId: UUID, documentType: TestDocumentType, acquisitionValue: Double, complexity: TestComplexityLevel, timeConstraints: TestTimeConstraints, regulatoryRequirements: Set<TestFARClause>, historicalSuccess: Double, userProfile: TestUserProfile, workflowProgress: Double, completedDocuments: [String]) {
    |            `- note: candidate has partially matching parameter list (acquisitionId: UUID, documentType: TestDocumentType, acquisitionValue: Double, complexity: TestComplexityLevel, timeConstraints: TestTimeConstraints, regulatoryRequirements: Set<TestFARClause>, historicalSuccess: Double, userProfile: TestUserProfile, workflowProgress: Double, completedDocuments: [String])
543 |         self.acquisitionId = acquisitionId
544 |         self.documentType = documentType

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1296:22: error: cannot find type 'ThermalState' in scope
1294 |     func getCurrentThermalState() async -> ThermalState {
1295 |         // Simulate thermal state
1296 |         let states: [ThermalState] = [.nominal, .fair, .serious]
     |                      `- error: cannot find type 'ThermalState' in scope
1297 |         return states.randomElement() ?? .nominal
1298 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPerformanceTests.swift:1303:16: error: no exact matches in call to initializer 
1301 |         let initialValue = initial.rawValue
1302 |         let finalValue = final.rawValue
1303 |         return Double(finalValue - initialValue) / 3.0 // Normalized 0-1
     |                `- error: no exact matches in call to initializer 
1304 |     }
1305 | }

Swift.Double.init:2:8: note: candidate expects value of type 'Builtin.FPIEEE64' for parameter #1 (got 'Duration')
1 | struct Double {
2 | public init(_ _value: Builtin.FPIEEE64)}
  |        `- note: candidate expects value of type 'Builtin.FPIEEE64' for parameter #1 (got 'Duration')
3 | 

Swift.Double.init:2:8: note: candidate expects value of type 'Int' for parameter #1 (got 'Duration')
1 | struct Double {
2 | public init(_ v: Int)}
  |        `- note: candidate expects value of type 'Int' for parameter #1 (got 'Duration')
3 | 

Swift.Double.init:3:21: note: candidate expects value of type 'Float16' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
3 |   @inlinable public init(_ other: Float16)}
  |                     `- note: candidate expects value of type 'Float16' for parameter #1 (got 'Duration')
4 | 

Swift.Double.init:2:19: note: candidate expects value of type 'Float' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @inlinable public init(_ other: Float)}
  |                   `- note: candidate expects value of type 'Float' for parameter #1 (got 'Duration')
3 | 

Swift.Double.init:2:19: note: candidate expects value of type 'Double' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @inlinable public init(_ other: Double)}
  |                   `- note: candidate expects value of type 'Double' for parameter #1 (got 'Duration')
3 | 

CoreFoundation.Double.init:2:8: note: candidate expects value of type 'CGFloat' for parameter #1 (got 'Duration')
1 | struct Double {
2 | public init(_ value: CGFloat)}
  |        `- note: candidate expects value of type 'CGFloat' for parameter #1 (got 'Duration')
3 | 

Foundation.Double.init:3:10: note: candidate expects value of type 'NSNumber' for parameter #1 (got 'Duration')
1 | struct Double {
2 | @available(swift, deprecated: 4, renamed: "init(truncating:)")
3 |   public init(_ number: __shared NSNumber)}
  |          `- note: candidate expects value of type 'NSNumber' for parameter #1 (got 'Duration')
4 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:12:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
 10 |     // MARK: - Test Infrastructure
 11 | 
 12 |     var adaptiveService: AdaptiveFormPopulationService?
    |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
 13 |     var qLearningAgent: FormFieldQLearningAgent?
 14 |     var modificationTracker: FormModificationTracker?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:13:25: error: cannot find type 'FormFieldQLearningAgent' in scope
 11 | 
 12 |     var adaptiveService: AdaptiveFormPopulationService?
 13 |     var qLearningAgent: FormFieldQLearningAgent?
    |                         `- error: cannot find type 'FormFieldQLearningAgent' in scope
 14 |     var modificationTracker: FormModificationTracker?
 15 |     var mockCoreDataActor: MockCoreDataActor?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:14:30: error: cannot find type 'FormModificationTracker' in scope
 12 |     var adaptiveService: AdaptiveFormPopulationService?
 13 |     var qLearningAgent: FormFieldQLearningAgent?
 14 |     var modificationTracker: FormModificationTracker?
    |                              `- error: cannot find type 'FormModificationTracker' in scope
 15 |     var mockCoreDataActor: MockCoreDataActor?
 16 |     var privacyValidator: PrivacyComplianceValidator?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:607:48: error: cannot find type 'ContextCategory' in scope
605 |     // MARK: - Test Helper Methods
606 | 
607 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
    |                                                `- error: cannot find type 'ContextCategory' in scope
608 |         AcquisitionContext(
609 |             category: category,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:94: error: cannot find type 'QLearningState' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                                                              `- error: cannot find type 'QLearningState' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:54: error: cannot find type 'FieldType' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                      `- error: cannot find type 'FieldType' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:649:74: error: cannot find type 'ContextCategory' in scope
647 |     }
648 | 
649 |     private func createTestQLearningState(fieldType: FieldType, context: ContextCategory) -> QLearningState {
    |                                                                          `- error: cannot find type 'ContextCategory' in scope
650 |         QLearningState(
651 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:658:82: error: cannot find type 'QLearningAction' in scope
656 |     }
657 | 
658 |     private func createTestQLearningAction(value: String, confidence: Double) -> QLearningAction {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
659 |         QLearningAction(suggestedValue: value, confidence: confidence)
660 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:662:60: error: cannot find type 'QLearningState' in scope
660 |     }
661 | 
662 |     private func createExtensiveLearningData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                            `- error: cannot find type 'QLearningState' in scope
663 |         (1 ... 100).map { i in
664 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:662:84: error: cannot find type 'QLearningAction' in scope
660 |     }
661 | 
662 |     private func createExtensiveLearningData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                    `- error: cannot find type 'QLearningAction' in scope
663 |         (1 ... 100).map { i in
664 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:675:59: error: cannot find type 'QLearningState' in scope
673 |     }
674 | 
675 |     private func createSensitivePatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                           `- error: cannot find type 'QLearningState' in scope
676 |         [
677 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:675:83: error: cannot find type 'QLearningAction' in scope
673 |     }
674 | 
675 |     private func createSensitivePatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                   `- error: cannot find type 'QLearningAction' in scope
676 |         [
677 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:690:55: error: cannot find type 'QLearningState' in scope
688 |     }
689 | 
690 |     private func createSimplePatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                       `- error: cannot find type 'QLearningState' in scope
691 |         (
692 |             state: createTestQLearningState(fieldType: .textField, context: .general),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:690:79: error: cannot find type 'QLearningAction' in scope
688 |     }
689 | 
690 |     private func createSimplePatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                                               `- error: cannot find type 'QLearningAction' in scope
691 |         (
692 |             state: createTestQLearningState(fieldType: .textField, context: .general),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:697:56: error: cannot find type 'QLearningState' in scope
695 |     }
696 | 
697 |     private func createComplexPatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                        `- error: cannot find type 'QLearningState' in scope
698 |         (
699 |             state: createTestQLearningState(fieldType: .dropdownField, context: .informationTechnology),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:697:80: error: cannot find type 'QLearningAction' in scope
695 |     }
696 | 
697 |     private func createComplexPatternData() -> (state: QLearningState, action: QLearningAction) {
    |                                                                                `- error: cannot find type 'QLearningAction' in scope
698 |         (
699 |             state: createTestQLearningState(fieldType: .dropdownField, context: .informationTechnology),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:704:59: error: cannot find type 'QLearningState' in scope
702 |     }
703 | 
704 |     private func createKnownTrainingDataSet() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                           `- error: cannot find type 'QLearningState' in scope
705 |         (1 ... 50).map { i in
706 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:704:83: error: cannot find type 'QLearningAction' in scope
702 |     }
703 | 
704 |     private func createKnownTrainingDataSet() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                   `- error: cannot find type 'QLearningAction' in scope
705 |         (1 ... 50).map { i in
706 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:717:57: error: cannot find type 'QLearningState' in scope
715 |     }
716 | 
717 |     private func createRegularPatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                         `- error: cannot find type 'QLearningState' in scope
718 |         [
719 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:717:81: error: cannot find type 'QLearningAction' in scope
715 |     }
716 | 
717 |     private func createRegularPatternData() -> [(state: QLearningState, action: QLearningAction, reward: Double)] {
    |                                                                                 `- error: cannot find type 'QLearningAction' in scope
718 |         [
719 |             (

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:60: error: cannot find type 'QLearningState' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                            `- error: cannot find type 'QLearningState' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:84: error: cannot find type 'QLearningAction' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                                                    `- error: cannot find type 'QLearningAction' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:755:131: error: cannot find type 'AdaptiveFormMetricsCollector' in scope
753 |     }
754 | 
755 |     private func processFormWithMetrics(pattern _: (state: QLearningState, action: QLearningAction, reward: Double), collector _: AdaptiveFormMetricsCollector) async {
    |                                                                                                                                   `- error: cannot find type 'AdaptiveFormMetricsCollector' in scope
756 |         // Mock implementation for form processing with metrics
757 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             |- error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
    |             `- note: add stubs for conformance
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: error: invalid redeclaration of 'MockAgenticOrchestrator'
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- error: invalid redeclaration of 'MockAgenticOrchestrator'
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:29:22: error: cannot find 'FormFieldQLearningAgent' in scope
 27 | 
 28 |         // Initialize system components
 29 |         let qAgent = FormFieldQLearningAgent(coreDataActor: mockActor)
    |                      `- error: cannot find 'FormFieldQLearningAgent' in scope
 30 |         qLearningAgent = qAgent
 31 |         let modTracker = FormModificationTracker(coreDataActor: mockActor)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:31:26: error: cannot find 'FormModificationTracker' in scope
 29 |         let qAgent = FormFieldQLearningAgent(coreDataActor: mockActor)
 30 |         qLearningAgent = qAgent
 31 |         let modTracker = FormModificationTracker(coreDataActor: mockActor)
    |                          `- error: cannot find 'FormModificationTracker' in scope
 32 |         modificationTracker = modTracker
 33 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:34:27: error: cannot find 'AdaptiveFormPopulationService' in scope
 32 |         modificationTracker = modTracker
 33 | 
 34 |         adaptiveService = AdaptiveFormPopulationService(
    |                           `- error: cannot find 'AdaptiveFormPopulationService' in scope
 35 |             contextClassifier: AcquisitionContextClassifier(),
 36 |             qLearningAgent: qAgent,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:35:32: error: cannot find 'AcquisitionContextClassifier' in scope
 33 | 
 34 |         adaptiveService = AdaptiveFormPopulationService(
 35 |             contextClassifier: AcquisitionContextClassifier(),
    |                                `- error: cannot find 'AcquisitionContextClassifier' in scope
 36 |             qLearningAgent: qAgent,
 37 |             modificationTracker: modTracker,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:38:32: error: cannot find 'ValueExplanationEngine' in scope
 36 |             qLearningAgent: qAgent,
 37 |             modificationTracker: modTracker,
 38 |             explanationEngine: ValueExplanationEngine(),
    |                                `- error: cannot find 'ValueExplanationEngine' in scope
 39 |             metricsCollector: AdaptiveFormMetricsCollector(),
 40 |             agenticOrchestrator: MockAgenticOrchestrator()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:39:31: error: cannot find 'AdaptiveFormMetricsCollector' in scope
 37 |             modificationTracker: modTracker,
 38 |             explanationEngine: ValueExplanationEngine(),
 39 |             metricsCollector: AdaptiveFormMetricsCollector(),
    |                               `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
 40 |             agenticOrchestrator: MockAgenticOrchestrator()
 41 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:77:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 75 |                 "paymentAmount": "$50,000.00",
 76 |             ],
 77 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 78 |         )
 79 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:82:27: error: extra argument 'requirements' in call
 80 |         let acquisition = createTestAcquisition(
 81 |             title: "Personal Services Contract",
 82 |             requirements: "Need consulting services from John Smith at john.smith@personalservices.com"
    |                           `- error: extra argument 'requirements' in call
 83 |         )
 84 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:85:38: error: extra arguments at positions #1, #2, #3 in call
 83 |         )
 84 | 
 85 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
 86 | 
 87 |         // When: Process form with PII data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:85:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 83 |         )
 84 | 
 85 |         let userProfile = UserProfile(id: UUID(), name: "Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 86 | 
 87 |         // When: Process form with PII data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:99:27: error: cannot find 'ContextFeatures' in scope
 97 |                 category: .professionalServices,
 98 |                 confidence: 0.8,
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),
    |                           `- error: cannot find 'ContextFeatures' in scope
100 |                 acquisitionValue: 50000,
101 |                 urgency: .normal,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:96:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 94 |             newValue: "John Smith Personal Services LLC",
 95 |             formType: "SF-1449",
 96 |             context: AcquisitionContext(
    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 97 |                 category: .professionalServices,
 98 |                 confidence: 0.8,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:97:17: error: missing argument for parameter 'from' in call
 95 |             formType: "SF-1449",
 96 |             context: AcquisitionContext(
 97 |                 category: .professionalServices,
    |                 `- error: missing argument for parameter 'from' in call
 98 |                 confidence: 0.8,
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:97:28: error: cannot infer contextual base in reference to member 'professionalServices'
 95 |             formType: "SF-1449",
 96 |             context: AcquisitionContext(
 97 |                 category: .professionalServices,
    |                            `- error: cannot infer contextual base in reference to member 'professionalServices'
 98 |                 confidence: 0.8,
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:101:27: error: cannot infer contextual base in reference to member 'normal'
 99 |                 features: ContextFeatures(estimatedValue: 50000, hasUrgentDeadline: false, requiresSpecializedSkills: true, isRecurringPurchase: false, involvesSecurity: false),
100 |                 acquisitionValue: 50000,
101 |                 urgency: .normal,
    |                           `- error: cannot infer contextual base in reference to member 'normal'
102 |                 complexity: .medium,
103 |                 acquisitionId: acquisition.id

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:102:30: error: cannot infer contextual base in reference to member 'medium'
100 |                 acquisitionValue: 50000,
101 |                 urgency: .normal,
102 |                 complexity: .medium,
    |                              `- error: cannot infer contextual base in reference to member 'medium'
103 |                 acquisitionId: acquisition.id
104 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:132:13: error: cannot find 'FieldModification' in scope
130 |         // Given: Form interactions with various field types
131 |         let testModifications = [
132 |             FieldModification(
    |             `- error: cannot find 'FieldModification' in scope
133 |                 fieldId: "paymentTerms",
134 |                 originalValue: "NET-15",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:140:13: error: cannot find 'FieldModification' in scope
138 |                 context: createTestContext(.informationTechnology)
139 |             ),
140 |             FieldModification(
    |             `- error: cannot find 'FieldModification' in scope
141 |                 fieldId: "evaluationCriteria",
142 |                 originalValue: "Price Only",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:138:45: error: cannot infer contextual base in reference to member 'informationTechnology'
136 |                 timestamp: Date(),
137 |                 formType: "SF-1449",
138 |                 context: createTestContext(.informationTechnology)
    |                                             `- error: cannot infer contextual base in reference to member 'informationTechnology'
139 |             ),
140 |             FieldModification(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:146:45: error: cannot infer contextual base in reference to member 'informationTechnology'
144 |                 timestamp: Date(),
145 |                 formType: "SF-1449",
146 |                 context: createTestContext(.informationTechnology)
    |                                             `- error: cannot infer contextual base in reference to member 'informationTechnology'
147 |             ),
148 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:198:50: error: value of type 'MockCoreDataActor' has no member 'getMemoryDump'
196 | 
197 |         // Verify secure deletion (memory should be overwritten)
198 |         let memoryDump = await mockCoreDataActor.getMemoryDump()
    |                                                  `- error: value of type 'MockCoreDataActor' has no member 'getMemoryDump'
199 |         let sensitiveDataFound = memoryDump.contains { dump in
200 |             dump.contains("fieldType:") || dump.contains("context:") || dump.contains("qValue:")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:215:50: error: cannot infer contextual base in reference to member 'textField'
213 |         // Given: System with learning data
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                  `- error: cannot infer contextual base in reference to member 'textField'
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
217 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:215:71: error: cannot infer contextual base in reference to member 'informationTechnology'
213 |         // Given: System with learning data
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                                       `- error: cannot infer contextual base in reference to member 'informationTechnology'
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
217 |         ]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:216:50: error: cannot infer contextual base in reference to member 'dropdownField'
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
    |                                                  `- error: cannot infer contextual base in reference to member 'dropdownField'
217 |         ]
218 |         let testActions = [

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:216:75: error: cannot infer contextual base in reference to member 'construction'
214 |         let testStates = [
215 |             createTestQLearningState(fieldType: .textField, context: .informationTechnology),
216 |             createTestQLearningState(fieldType: .dropdownField, context: .construction),
    |                                                                           `- error: cannot infer contextual base in reference to member 'construction'
217 |         ]
218 |         let testActions = [

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:329:58: error: cannot infer contextual base in reference to member 'textField'
327 |         // Given: Private user patterns in Q-learning model
328 |         let privatePatterns = [
329 |             (state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                          `- error: cannot infer contextual base in reference to member 'textField'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:329:79: error: cannot infer contextual base in reference to member 'informationTechnology'
327 |         // Given: Private user patterns in Q-learning model
328 |         let privatePatterns = [
329 |             (state: createTestQLearningState(fieldType: .textField, context: .informationTechnology),
    |                                                                               `- error: cannot infer contextual base in reference to member 'informationTechnology'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:332:58: error: cannot infer contextual base in reference to member 'textField'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),
332 |             (state: createTestQLearningState(fieldType: .textField, context: .construction),
    |                                                          `- error: cannot infer contextual base in reference to member 'textField'
333 |              action: createTestQLearningAction(value: "Private Construction Value", confidence: 0.8),
334 |              reward: 0.8),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:332:79: error: cannot infer contextual base in reference to member 'construction'
330 |              action: createTestQLearningAction(value: "Private IT Value", confidence: 0.9),
331 |              reward: 1.0),
332 |             (state: createTestQLearningState(fieldType: .textField, context: .construction),
    |                                                                               `- error: cannot infer contextual base in reference to member 'construction'
333 |              action: createTestQLearningAction(value: "Private Construction Value", confidence: 0.8),
334 |              reward: 0.8),

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:369:62: error: cannot infer contextual base in reference to member 'textField'
367 |         await adaptiveService.enableDifferentialPrivacy(epsilon: 1.0) // Standard privacy parameter
368 | 
369 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                              `- error: cannot infer contextual base in reference to member 'textField'
370 |         let testAction = createTestQLearningAction(value: "DP Test", confidence: 0.8)
371 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:369:83: error: cannot infer contextual base in reference to member 'informationTechnology'
367 |         await adaptiveService.enableDifferentialPrivacy(epsilon: 1.0) // Standard privacy parameter
368 | 
369 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'informationTechnology'
370 |         let testAction = createTestQLearningAction(value: "DP Test", confidence: 0.8)
371 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:373:27: error: cannot find type 'ValuePrediction' in scope
371 | 
372 |         // When: Make multiple queries for the same state-action pair
373 |         var predictions: [ValuePrediction] = []
    |                           `- error: cannot find type 'ValuePrediction' in scope
374 |         for _ in 1 ... 100 {
375 |             let prediction = await qLearningAgent.predictFieldValue(state: testState)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:380:48: error: cannot infer key path type from context; consider explicitly specifying a root type
378 | 
379 |         // Then: Predictions should have appropriate noise for privacy
380 |         let confidenceValues = predictions.map(\.confidence)
    |                                                `- error: cannot infer key path type from context; consider explicitly specifying a root type
381 |         let confidenceVariance = calculateVariance(confidenceValues)
382 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:440:37: error: value of optional type 'AdversarialAttackTester?' must be unwrapped to refer to member 'attemptModelInversionAttack' of wrapped base type 'AdversarialAttackTester'
438 | 
439 |         // When: Attempt model inversion attack
440 |         let inversionResult = await adversarialTester.attemptModelInversionAttack(
    |                                     |- error: value of optional type 'AdversarialAttackTester?' must be unwrapped to refer to member 'attemptModelInversionAttack' of wrapped base type 'AdversarialAttackTester'
    |                                     |- note: chain the optional using '?' to access member 'attemptModelInversionAttack' only for non-'nil' base values
    |                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
441 |             target: qLearningAgent,
442 |             knownTrainingData: knownTrainingData

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:462:32: error: cannot find 'AdaptiveFormMetricsCollector' in scope
460 | 
461 |         // Given: System collecting performance metrics
462 |         let metricsCollector = AdaptiveFormMetricsCollector()
    |                                `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
463 | 
464 |         // Process forms with different privacy-sensitive patterns

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:500:38: error: extra arguments at positions #1, #2, #3 in call
498 |         let formData = createTestFormData()
499 |         let acquisition = createTestAcquisition(title: "Network Test Acquisition")
500 |         let userProfile = UserProfile(id: UUID(), name: "Network Test User", email: "test@example.com")
    |                                      `- error: extra arguments at positions #1, #2, #3 in call
501 | 
502 |         _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:500:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
498 |         let formData = createTestFormData()
499 |         let acquisition = createTestAcquisition(title: "Network Test Acquisition")
500 |         let userProfile = UserProfile(id: UUID(), name: "Network Test User", email: "test@example.com")
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
501 | 
502 |         _ = try await adaptiveService.populateForm(formData, acquisition: acquisition, userProfile: userProfile)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:510:41: error: cannot infer contextual base in reference to member 'informationTechnology'
508 |             newValue: "modified",
509 |             formType: "SF-1449",
510 |             context: createTestContext(.informationTechnology)
    |                                         `- error: cannot infer contextual base in reference to member 'informationTechnology'
511 |         )
512 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:517:41: error: cannot infer contextual base in reference to member 'informationTechnology'
515 |             fieldId: "testField",
516 |             suggestedValue: "test value",
517 |             context: createTestContext(.informationTechnology)
    |                                         `- error: cannot infer contextual base in reference to member 'informationTechnology'
518 |         )
519 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:550:62: error: cannot infer contextual base in reference to member 'textField'
548 | 
549 |         // When: Perform ML operations
550 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                              `- error: cannot infer contextual base in reference to member 'textField'
551 |         _ = await qLearningAgent.predictFieldValue(state: testState)
552 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:550:83: error: cannot infer contextual base in reference to member 'informationTechnology'
548 | 
549 |         // When: Perform ML operations
550 |         let testState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'informationTechnology'
551 |         _ = await qLearningAgent.predictFieldValue(state: testState)
552 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:554:33: error: cannot find 'AcquisitionContextClassifier' in scope
552 | 
553 |         let testAcquisition = createTestAcquisition(title: "MLX Test")
554 |         let contextClassifier = AcquisitionContextClassifier()
    |                                 `- error: cannot find 'AcquisitionContextClassifier' in scope
555 |         _ = try await contextClassifier.classifyAcquisition(testAcquisition)
556 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:571:19: warning: value 'mockCoreDataActor' was defined but never used; consider replacing with boolean test
569 |     /// Test encrypted Core Data storage with key rotation
570 |     func testEncryptedCoreDataStorageWithKeyRotation() async throws {
571 |         guard let mockCoreDataActor else {
    |                   `- warning: value 'mockCoreDataActor' was defined but never used; consider replacing with boolean test
572 |             XCTFail("MockCoreDataActor should be initialized")
573 |             return

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:611:23: error: cannot find 'ContextFeatures' in scope
609 |             category: category,
610 |             confidence: 0.8,
611 |             features: ContextFeatures(
    |                       `- error: cannot find 'ContextFeatures' in scope
612 |                 estimatedValue: 100_000,
613 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:608:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
606 | 
607 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
608 |         AcquisitionContext(
    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
609 |             category: category,
610 |             confidence: 0.8,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:609:13: error: missing argument for parameter 'from' in call
607 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
608 |         AcquisitionContext(
609 |             category: category,
    |             `- error: missing argument for parameter 'from' in call
610 |             confidence: 0.8,
611 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:619:23: error: cannot infer contextual base in reference to member 'normal'
617 |             ),
618 |             acquisitionValue: 100_000,
619 |             urgency: .normal,
    |                       `- error: cannot infer contextual base in reference to member 'normal'
620 |             complexity: .medium,
621 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:620:26: error: cannot infer contextual base in reference to member 'medium'
618 |             acquisitionValue: 100_000,
619 |             urgency: .normal,
620 |             complexity: .medium,
    |                          `- error: cannot infer contextual base in reference to member 'medium'
621 |             acquisitionId: UUID()
622 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:626:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
624 | 
625 |     private func createTestAcquisition(title: String) -> AcquisitionAggregate {
626 |         AcquisitionAggregate(
    |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
627 |             id: UUID(),
628 |             title: title,

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:627:13: error: missing argument for parameter 'managedObject' in call
625 |     private func createTestAcquisition(title: String) -> AcquisitionAggregate {
626 |         AcquisitionAggregate(
627 |             id: UUID(),
    |             `- error: missing argument for parameter 'managedObject' in call
628 |             title: title,
629 |             requirements: "Test requirements",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:645:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
643 |                 "paymentTerms": "NET-30",
644 |             ],
645 |             metadata: [:]
    |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
646 |         )
647 |     }
[25/35] Compiling AIKOTests AIReasoningViewTests.swift
/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:12:31: error: 'DecisionResponse' is ambiguous for type lookup in this context
 10 |     // MARK: - Test Properties
 11 | 
 12 |     var testDecisionResponse: DecisionResponse?
    |                               `- error: 'DecisionResponse' is ambiguous for type lookup in this context
 13 |     var testComplianceContext: AIReasoningTestComplianceContext?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var testDecisionResponse: DecisionResponse?
 13 |     var testComplianceContext: AIReasoningTestComplianceContext?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 | 
 16 |     // MARK: - Setup & Teardown

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:330:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
328 |     // MARK: - Helper Methods
329 | 
330 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
331 |         DecisionResponse(
332 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:356:54: error: 'DecisionResponse' is ambiguous for type lookup in this context
354 |     }
355 | 
356 |     private func createDecisionResponseWithSHAP() -> DecisionResponse {
    |                                                      `- error: 'DecisionResponse' is ambiguous for type lookup in this context
357 |         var decision = createTestDecisionResponse()
358 |         decision.shapeExplanations = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:367:57: error: 'DecisionResponse' is ambiguous for type lookup in this context
365 |     }
366 | 
367 |     private func createDecisionResponseWithFactors() -> DecisionResponse {
    |                                                         `- error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |         var decision = createTestDecisionResponse()
369 |         decision.reasoningFactors = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:403:60: error: 'DecisionResponse' is ambiguous for type lookup in this context
401 |     }
402 | 
403 |     private func createDecisionResponseWithAuditTrail() -> DecisionResponse {
    |                                                            `- error: 'DecisionResponse' is ambiguous for type lookup in this context
404 |         var decision = createTestDecisionResponse()
405 |         decision.auditTrailId = "AUDIT-2025-001-\(UUID().uuidString.prefix(8))"

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:415:59: error: 'DecisionResponse' is ambiguous for type lookup in this context
413 |     }
414 | 
415 |     private func createDecisionResponseWithPrecedent() -> DecisionResponse {
    |                                                           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
416 |         var decision = createTestDecisionResponse()
417 |         decision.historicalPrecedents = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:434:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |     }
433 | 
434 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
435 |         var decision = createDecisionResponseWithSHAP()
436 |         decision = createDecisionResponseWithFactors()

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:452:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
450 |     }
451 | 
452 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
453 |         AcquisitionContext(
454 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:508:11: error: 'DecisionResponse' is ambiguous for type lookup in this context
506 | // MARK: - Extended DecisionResponse for Testing
507 | 
508 | extension DecisionResponse {
    |           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
509 |     var shapeExplanations: [String: String] {
510 |         get { [:] } // RED PHASE: Not implemented

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:24:33: error: cannot assign value of type 'ComplianceContext' to type 'AIReasoningTestComplianceContext'
 22 | 
 23 |         testDecisionResponse = createTestDecisionResponse()
 24 |         testComplianceContext = createTestComplianceContext()
    |                                 `- error: cannot assign value of type 'ComplianceContext' to type 'AIReasoningTestComplianceContext'
 25 |     }
 26 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:44:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
 42 |         let view = AIReasoningView(
 43 |             decisionResponse: testDecisionResponse,
 44 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
 45 |         )
 46 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:61:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
 59 |         let view = AIReasoningView(
 60 |             decisionResponse: testDecisionResponse,
 61 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
 62 |         )
 63 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:96:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
 94 |         let view = AIReasoningView(
 95 |             decisionResponse: decisionWithSHAP,
 96 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
 97 |         )
 98 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:114:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
112 |         let view = AIReasoningView(
113 |             decisionResponse: decisionWithFactors,
114 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
115 |         )
116 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:169:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
167 |         let view = AIReasoningView(
168 |             decisionResponse: testDecisionResponse,
169 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
170 |         )
171 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:188:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
186 |         let view = AIReasoningView(
187 |             decisionResponse: decisionWithAudit,
188 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
189 |         )
190 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:206:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
204 |         let view = AIReasoningView(
205 |             decisionResponse: decisionWithPrecedent,
206 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
207 |         )
208 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:225:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
223 |         let view = AIReasoningView(
224 |             decisionResponse: testDecisionResponse,
225 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
226 |         )
227 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:241:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
239 |         let view = AIReasoningView(
240 |             decisionResponse: testDecisionResponse,
241 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
242 |         )
243 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:259:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
257 |         let view = AIReasoningView(
258 |             decisionResponse: testDecisionResponse,
259 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
260 |         )
261 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:275:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
273 |         let view = AIReasoningView(
274 |             decisionResponse: testDecisionResponse,
275 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
276 |         )
277 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:294:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
292 |         let view = AIReasoningView(
293 |             decisionResponse: complexDecision,
294 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
295 |         )
296 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:317:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
315 |         let view = AIReasoningView(
316 |             decisionResponse: testDecisionResponse,
317 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
318 |         )
319 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:345:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
343 |         ComplianceContext(
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
347 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:346:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
347 |             ],
348 |             dfarsReferences: [

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:345:29: error: extra arguments at positions #2, #3 in call
343 |         ComplianceContext(
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
    |                             `- error: extra arguments at positions #2, #3 in call
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
347 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:345:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
343 |         ComplianceContext(
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
347 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:346:29: error: extra arguments at positions #2, #3 in call
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
    |                             `- error: extra arguments at positions #2, #3 in call
347 |             ],
348 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:346:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
347 |             ],
348 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:349:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
347 |             ],
348 |             dfarsReferences: [
349 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms", url: "https://example.com/dfars"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
350 |             ],
351 |             complianceScore: 0.94,

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:349:31: error: extra arguments at positions #2, #3 in call
347 |             ],
348 |             dfarsReferences: [
349 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms", url: "https://example.com/dfars"),
    |                               `- error: extra arguments at positions #2, #3 in call
350 |             ],
351 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:349:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
347 |             ],
348 |             dfarsReferences: [
349 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms", url: "https://example.com/dfars"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
350 |             ],
351 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:381:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
379 |         ComplianceContext(
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:383:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
384 |             ],
385 |             dfarsReferences: [],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:382:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
384 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:381:29: error: extra arguments at positions #2, #3 in call
379 |         ComplianceContext(
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: extra arguments at positions #2, #3 in call
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:381:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
379 |         ComplianceContext(
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:382:29: error: extra arguments at positions #2, #3 in call
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
    |                             `- error: extra arguments at positions #2, #3 in call
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
384 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:382:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
384 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:383:29: error: extra arguments at positions #2, #3 in call
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                             `- error: extra arguments at positions #2, #3 in call
384 |             ],
385 |             dfarsReferences: [],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:383:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
384 |             ],
385 |             dfarsReferences: [],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:395:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
393 |             farReferences: [],
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
397 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:396:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
397 |             ],
398 |             complianceScore: 0.88,

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:395:31: error: extra arguments at positions #2, #3 in call
393 |             farReferences: [],
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
    |                               `- error: extra arguments at positions #2, #3 in call
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
397 |             ],

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:395:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
393 |             farReferences: [],
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
397 |             ],

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:396:31: error: extra arguments at positions #2, #3 in call
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
    |                               `- error: extra arguments at positions #2, #3 in call
397 |             ],
398 |             complianceScore: 0.88,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:396:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
397 |             ],
398 |             complianceScore: 0.88,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: AccessibilityTestMockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var testContext: AcquisitionContext?
 16 | 
    :
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:15:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: AccessibilityTestMockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:333:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
331 |     // MARK: - Helper Methods
332 | 
333 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
334 |         AcquisitionContext(
335 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:348:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
346 |     }
347 | 
348 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
349 |         DecisionResponse(
350 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:362:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
360 |     }
361 | 
362 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
363 |         DecisionResponse(
364 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:396:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
394 |     }
395 | 
396 |     private func createMultipleSuggestions() -> [DecisionResponse] {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
397 |         [
398 |             createAutonomousSuggestion(),

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:404:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
402 |     }
403 | 
404 |     private func createAutonomousSuggestion() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
405 |         DecisionResponse(
406 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:416:48: error: 'DecisionResponse' is ambiguous for type lookup in this context
414 |     }
415 | 
416 |     private func createAssistedSuggestion() -> DecisionResponse {
    |                                                `- error: 'DecisionResponse' is ambiguous for type lookup in this context
417 |         DecisionResponse(
418 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:430:48: error: 'DecisionResponse' is ambiguous for type lookup in this context
428 |     }
429 | 
430 |     private func createDeferredSuggestion() -> DecisionResponse {
    |                                                `- error: 'DecisionResponse' is ambiguous for type lookup in this context
431 |         DecisionResponse(
432 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:444:49: error: 'DecisionResponse' is ambiguous for type lookup in this context
442 |     }
443 | 
444 |     private func createUpdatedSuggestions() -> [DecisionResponse] {
    |                                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
445 |         createMultipleSuggestions().map { suggestion in
446 |             var updated = suggestion

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:482:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
480 | 
481 | class AccessibilityTestMockAgenticOrchestrator: Sendable {
482 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
483 |         DecisionResponse(
484 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:494:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
492 |     }
493 | 
494 |     func provideFeedback(for _: DecisionResponse, feedback _: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
495 |         // Mock implementation
496 |     }

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:481:7: error: non-final class 'AccessibilityTestMockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
479 | // MARK: - Mock Types for Accessibility Testing
480 | 
481 | class AccessibilityTestMockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'AccessibilityTestMockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
482 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
483 |         DecisionResponse(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:500:36: error: 'AcquisitionContext' is ambiguous for type lookup in this context
498 | 
499 | class MockComplianceGuardian: Sendable {
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
    |                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
501 |         ComplianceResult(
502 |             isCompliant: true,

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: error: invalid redeclaration of 'MockComplianceGuardian'
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- error: invalid redeclaration of 'MockComplianceGuardian'
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:26:27: error: argument type 'AccessibilityTestMockAgenticOrchestrator?' does not conform to expected type 'AgenticOrchestratorProtocol'
 24 | 
 25 |         viewModel = await SuggestionViewModel(
 26 |             orchestrator: mockOrchestrator,
    |                           `- error: argument type 'AccessibilityTestMockAgenticOrchestrator?' does not conform to expected type 'AgenticOrchestratorProtocol'
 27 |             complianceGuardian: mockComplianceGuardian
 28 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:46:9: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 44 |         // Given: AgenticSuggestionView with test data
 45 |         let suggestion = createTestDecisionResponse()
 46 |         viewModel.currentSuggestions = [suggestion]
    |         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |         |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 47 |         let view = AgenticSuggestionView(viewModel: viewModel)
 48 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:47:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
 45 |         let suggestion = createTestDecisionResponse()
 46 |         viewModel.currentSuggestions = [suggestion]
 47 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 48 | 
 49 |         // When: VoiceOver accesses the view

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:62:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
 60 |             trend: .improving
 61 |         )
 62 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
 63 | 
 64 |         // When: VoiceOver reads the confidence indicator

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:101:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
 99 |         let suggestions = createMultipleSuggestions()
100 |         viewModel.currentSuggestions = suggestions
101 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
102 | 
103 |         // When: Tab key navigation is used

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:116:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
114 |             trend: .stable
115 |         )
116 |         let indicator = ConfidenceIndicator(visualization: visualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
117 | 
118 |         // When: Keyboard navigation is used to access details

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:158:17: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
156 |                 trend: .stable
157 |             )
158 |             let indicator = ConfidenceIndicator(visualization: visualization)
    |                 `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
159 | 
160 |             // Then: Should meet WCAG 2.1 AA contrast requirements (4.5:1)

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:173:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
171 |         let suggestions = createMultipleSuggestions()
172 |         viewModel.currentSuggestions = suggestions
173 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
174 | 
175 |         // When: High contrast mode is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:186:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
184 |         let suggestions = createMultipleSuggestions()
185 |         viewModel.currentSuggestions = suggestions
186 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
187 | 
188 |         // When: Dynamic type size is changed

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:193:47: error: cannot infer key path type from context; consider explicitly specifying a root type
191 |         for size in testSizes {
192 |             // Then: Should scale text appropriately for each size
193 |             let scaledView = view.environment(\.sizeCategory, size)
    |                                               `- error: cannot infer key path type from context; consider explicitly specifying a root type
194 |             XCTAssertNotNil(scaledView, "Should handle dynamic type size: \(size)")
195 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:208:46: error: cannot infer key path type from context; consider explicitly specifying a root type
206 | 
207 |         // When: Large accessibility text size is used
208 |         let largeTextView = view.environment(\.sizeCategory, .accessibilityExtraExtraExtraLarge)
    |                                              `- error: cannot infer key path type from context; consider explicitly specifying a root type
209 | 
210 |         // Then: Should maintain readability and layout integrity

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:208:63: error: cannot infer contextual base in reference to member 'accessibilityExtraExtraExtraLarge'
206 | 
207 |         // When: Large accessibility text size is used
208 |         let largeTextView = view.environment(\.sizeCategory, .accessibilityExtraExtraExtraLarge)
    |                                                               `- error: cannot infer contextual base in reference to member 'accessibilityExtraExtraExtraLarge'
209 | 
210 |         // Then: Should maintain readability and layout integrity

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:220:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
218 |         let suggestions = createMultipleSuggestions()
219 |         viewModel.currentSuggestions = suggestions
220 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
221 | 
222 |         // When: View updates while element has focus

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:254:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
252 |             trend: .improving
253 |         )
254 |         let indicator = ConfidenceIndicator(visualization: visualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
255 | 
256 |         // When: Reduced motion accessibility setting is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:269:9: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
267 |         let deferredSuggestion = createDeferredSuggestion()
268 | 
269 |         viewModel.currentSuggestions = [autonomousSuggestion, assistedSuggestion, deferredSuggestion]
    |         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |         |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
270 |         let view = AgenticSuggestionView(viewModel: viewModel)
271 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:270:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
268 | 
269 |         viewModel.currentSuggestions = [autonomousSuggestion, assistedSuggestion, deferredSuggestion]
270 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
271 | 
272 |         // When: Screen reader accesses the suggestions

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:311:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
309 |         let suggestions = createMultipleSuggestions()
310 |         viewModel.currentSuggestions = suggestions
311 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
312 | 
313 |         // When: Simplified interface mode is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:385:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
383 |         ComplianceContext(
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
387 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:386:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
387 |             ],
388 |             dfarsReferences: [

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:385:29: error: extra arguments at positions #2, #3 in call
383 |         ComplianceContext(
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: extra arguments at positions #2, #3 in call
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
387 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:385:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
383 |         ComplianceContext(
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
387 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:386:29: error: extra arguments at positions #2, #3 in call
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
    |                             `- error: extra arguments at positions #2, #3 in call
387 |             ],
388 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:386:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
387 |             ],
388 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:389:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
387 |             ],
388 |             dfarsReferences: [
389 |                 DFARSReference(section: "252.239-7001", title: "Information Assurance", url: "https://acquisition.gov/dfars/252.239-7001"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
390 |             ],
391 |             complianceScore: 0.92,

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:389:31: error: extra arguments at positions #2, #3 in call
387 |             ],
388 |             dfarsReferences: [
389 |                 DFARSReference(section: "252.239-7001", title: "Information Assurance", url: "https://acquisition.gov/dfars/252.239-7001"),
    |                               `- error: extra arguments at positions #2, #3 in call
390 |             ],
391 |             complianceScore: 0.92,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:389:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
387 |             ],
388 |             dfarsReferences: [
389 |                 DFARSReference(section: "252.239-7001", title: "Information Assurance", url: "https://acquisition.gov/dfars/252.239-7001"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
390 |             ],
391 |             complianceScore: 0.92,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
    :
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
 16 |     var testContext: AcquisitionContext?
    :
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:16:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
 16 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 17 | 
 18 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:290:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
288 |     // MARK: - Helper Methods
289 | 
290 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
291 |         AcquisitionContext(
292 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:321:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
319 |     private var alternativeActions: [AlternativeAction] = []
320 | 
321 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
322 |         makeDecisionCallCount += 1
323 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:348:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
346 |     }
347 | 
348 |     func provideFeedback(for _: DecisionResponse, feedback: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
349 |         provideFeedbackCallCount += 1
350 |         lastFeedback = feedback

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:312:9: error: stored property 'makeDecisionCallCount' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
310 | 
311 | class MockAgenticOrchestrator: Sendable {
312 |     var makeDecisionCallCount = 0
    |         `- error: stored property 'makeDecisionCallCount' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
313 |     var provideFeedbackCallCount = 0
314 |     var lastFeedback: AgenticUserFeedback?

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: error: invalid redeclaration of 'MockAgenticOrchestrator'
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- error: invalid redeclaration of 'MockAgenticOrchestrator'
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:370:36: error: 'AcquisitionContext' is ambiguous for type lookup in this context
368 |     private var farReferences: [FARReference] = []
369 | 
370 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
    |                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
371 |         ComplianceResult(
372 |             isCompliant: true,

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:367:17: error: stored property 'shapExplanations' of 'Sendable'-conforming class 'MockComplianceGuardian' is mutable
365 | 
366 | class MockComplianceGuardian: Sendable {
367 |     private var shapExplanations: [String: String] = [:]
    |                 `- error: stored property 'shapExplanations' of 'Sendable'-conforming class 'MockComplianceGuardian' is mutable
368 |     private var farReferences: [FARReference] = []
369 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:388:7: error: non-final class 'MockLearningFeedbackLoop' cannot conform to 'Sendable'; use '@unchecked Sendable'
386 | }
387 | 
388 | class MockLearningFeedbackLoop: Sendable {
    |       `- error: non-final class 'MockLearningFeedbackLoop' cannot conform to 'Sendable'; use '@unchecked Sendable'
389 |     var eventRecorded = false
390 |     var lastEventType: LearningEventType?

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:389:9: error: stored property 'eventRecorded' of 'Sendable'-conforming class 'MockLearningFeedbackLoop' is mutable
387 | 
388 | class MockLearningFeedbackLoop: Sendable {
389 |     var eventRecorded = false
    |         `- error: stored property 'eventRecorded' of 'Sendable'-conforming class 'MockLearningFeedbackLoop' is mutable
390 |     var lastEventType: LearningEventType?
391 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:413:11: error: 'DecisionResponse' is ambiguous for type lookup in this context
411 | }
412 | 
413 | extension DecisionResponse {
    |           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
414 |     var complianceContext: ComplianceContext? {
415 |         get { nil } // RED PHASE: Not implemented

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:431:35: error: 'DecisionResponse' is ambiguous for type lookup in this context
429 |     }
430 | 
431 |     func processRealTimeUpdate(_: DecisionResponse) async throws {
    |                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |         // RED PHASE: Not implemented
433 |         throw IntegrationTestError.serviceUnavailable

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:49:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
 47 |         // Given: Complete integration setup
 48 |         // When: Suggestion generation is requested
 49 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 50 | 
 51 |         // Then: Should generate suggestions and display in UI

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:52:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 50 | 
 51 |         // Then: Should generate suggestions and display in UI
 52 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should have generated suggestions")
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 53 |         XCTAssertEqual(mockOrchestrator.makeDecisionCallCount, 1, "Should call makeDecision once")
 54 |         XCTFail("RED PHASE: End-to-end suggestion generation integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:62:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
 60 | 
 61 |         // When: Suggestions are generated with different modes
 62 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 63 | 
 64 |         // Then: Should display correct decision modes for each confidence level

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:65:27: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 63 | 
 64 |         // Then: Should display correct decision modes for each confidence level
 65 |         let suggestions = viewModel.currentSuggestions
    |                           |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                           |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:66:66: error: cannot infer contextual base in reference to member 'autonomous'
 64 |         // Then: Should display correct decision modes for each confidence level
 65 |         let suggestions = viewModel.currentSuggestions
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
    |                                                                  `- error: cannot infer contextual base in reference to member 'autonomous'
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")
 68 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .deferred }, "Should have deferred suggestion")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:67:66: error: cannot infer contextual base in reference to member 'assisted'
 65 |         let suggestions = viewModel.currentSuggestions
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")
    |                                                                  `- error: cannot infer contextual base in reference to member 'assisted'
 68 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .deferred }, "Should have deferred suggestion")
 69 |         XCTFail("RED PHASE: Decision mode display integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:68:66: error: cannot infer contextual base in reference to member 'deferred'
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")
 68 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .deferred }, "Should have deferred suggestion")
    |                                                                  `- error: cannot infer contextual base in reference to member 'deferred'
 69 |         XCTFail("RED PHASE: Decision mode display integration not implemented")
 70 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:81:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
 79 | 
 80 |         // When: Suggestions with alternatives are displayed
 81 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 82 | 
 83 |         // Then: Should display alternative actions in UI

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:84:27: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 82 | 
 83 |         // Then: Should display alternative actions in UI
 84 |         let suggestions = viewModel.currentSuggestions
    |                           |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                           |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 85 |         XCTAssertTrue(suggestions.first?.alternativeActions.count ?? 0 > 0, "Should have alternative actions")
 86 |         XCTFail("RED PHASE: Alternative actions display not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:106:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
104 | 
105 |         // When: Feedback is submitted through UI
106 |         try await viewModel.submitFeedback(feedback, for: suggestion)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'submitFeedback' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
107 | 
108 |         // Then: Should call orchestrator's provideFeedback method

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:129:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
127 | 
128 |         // When: Feedback is processed through complete loop
129 |         try await viewModel.submitFeedback(feedback, for: suggestion)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'submitFeedback' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
130 | 
131 |         // Then: Should update learning systems

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:132:23: error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'eventRecorded' of wrapped base type 'MockLearningFeedbackLoop'
130 | 
131 |         // Then: Should update learning systems
132 |         XCTAssertTrue(mockLearningLoop.eventRecorded, "Should record learning event")
    |                       |- error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'eventRecorded' of wrapped base type 'MockLearningFeedbackLoop'
    |                       |- note: chain the optional using '?' to access member 'eventRecorded' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
133 |         XCTAssertEqual(mockLearningLoop.lastEventType, .userFeedback, "Should record user feedback event")
134 |         XCTFail("RED PHASE: Learning loop integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:133:24: error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'lastEventType' of wrapped base type 'MockLearningFeedbackLoop'
131 |         // Then: Should update learning systems
132 |         XCTAssertTrue(mockLearningLoop.eventRecorded, "Should record learning event")
133 |         XCTAssertEqual(mockLearningLoop.lastEventType, .userFeedback, "Should record user feedback event")
    |                        |- error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'lastEventType' of wrapped base type 'MockLearningFeedbackLoop'
    |                        |- note: chain the optional using '?' to access member 'lastEventType' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
134 |         XCTFail("RED PHASE: Learning loop integration not implemented")
135 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:149:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
147 | 
148 |         // When: Suggestions with compliance context are generated
149 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
150 | 
151 |         // Then: Should display SHAP explanations in reasoning view

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:152:32: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
150 | 
151 |         // Then: Should display SHAP explanations in reasoning view
152 |         guard let suggestion = viewModel.currentSuggestions.first else {
    |                                |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                                |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
153 |             XCTFail("No suggestions available")
154 |             return

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:163:25: error: extra arguments at positions #2, #3 in call
161 |         // Given: Compliance context with FAR references
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                         `- error: extra arguments at positions #2, #3 in call
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
165 |         ]

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:163:25: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
161 |         // Given: Compliance context with FAR references
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                         `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
165 |         ]

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:164:25: error: extra arguments at positions #2, #3 in call
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                         `- error: extra arguments at positions #2, #3 in call
165 |         ]
166 |         mockComplianceGuardian.configureFARReferences(farReferences)

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:164:25: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                         `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
165 |         ]
166 |         mockComplianceGuardian.configureFARReferences(farReferences)

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:169:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
167 | 
168 |         // When: Compliance context is displayed
169 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
170 | 
171 |         // Then: Should display FAR references with proper links

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:172:27: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
170 | 
171 |         // Then: Should display FAR references with proper links
172 |         let suggestions = viewModel.currentSuggestions
    |                           |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                           |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
173 |         XCTAssertTrue(suggestions.allSatisfy { $0.complianceContext != nil }, "All suggestions should have compliance context")
174 |         XCTFail("RED PHASE: FAR references display not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:181:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
179 |     func testAgenticOrchestrator_RealTimeUpdates_PropagateToUI() async throws {
180 |         // Given: Initial suggestions loaded
181 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
182 |         let initialCount = viewModel.currentSuggestions.count
183 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:182:28: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
180 |         // Given: Initial suggestions loaded
181 |         try await viewModel.loadSuggestions(for: testContext)
182 |         let initialCount = viewModel.currentSuggestions.count
    |                            |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                            |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
183 | 
184 |         // When: Real-time confidence update occurs

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:195:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'processRealTimeUpdate' of wrapped base type 'SuggestionViewModel'
193 |         )
194 | 
195 |         try await viewModel.processRealTimeUpdate(updatedSuggestion)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'processRealTimeUpdate' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'processRealTimeUpdate' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
196 | 
197 |         // Then: Should update UI with new confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:198:37: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
196 | 
197 |         // Then: Should update UI with new confidence
198 |         XCTAssertGreaterThanOrEqual(viewModel.currentSuggestions.count, initialCount, "Should maintain or increase suggestions")
    |                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                                     |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
199 |         XCTFail("RED PHASE: Real-time updates integration not implemented")
200 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:210:23: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
208 |         // When: Attempting to load suggestions with error
209 |         do {
210 |             try await viewModel.loadSuggestions(for: testContext)
    |                       |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                       |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
211 |             XCTFail("Should have thrown network error")
212 |         } catch {

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:214:29: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'errorState' of wrapped base type 'SuggestionViewModel'
212 |         } catch {
213 |             // Then: Should handle error gracefully in UI
214 |             XCTAssertNotNil(viewModel.errorState, "Should set error state in view model")
    |                             |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'errorState' of wrapped base type 'SuggestionViewModel'
    |                             |- note: chain the optional using '?' to access member 'errorState' only for non-'nil' base values
    |                             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
215 |             XCTAssertFalse(viewModel.isProcessing, "Should stop processing on error")
216 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:215:28: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isProcessing' of wrapped base type 'SuggestionViewModel'
213 |             // Then: Should handle error gracefully in UI
214 |             XCTAssertNotNil(viewModel.errorState, "Should set error state in view model")
215 |             XCTAssertFalse(viewModel.isProcessing, "Should stop processing on error")
    |                            |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isProcessing' of wrapped base type 'SuggestionViewModel'
    |                            |- note: chain the optional using '?' to access member 'isProcessing' only for non-'nil' base values
    |                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
216 |         }
217 |         XCTFail("RED PHASE: Network error handling integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:225:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
223 | 
224 |         // When: Loading suggestions under degraded conditions
225 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
226 | 
227 |         // Then: Should show fallback UI with reduced functionality

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:228:23: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isDegraded' of wrapped base type 'SuggestionViewModel'
226 | 
227 |         // Then: Should show fallback UI with reduced functionality
228 |         XCTAssertTrue(viewModel.isDegraded, "Should indicate degraded service state")
    |                       |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isDegraded' of wrapped base type 'SuggestionViewModel'
    |                       |- note: chain the optional using '?' to access member 'isDegraded' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
229 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should still provide basic suggestions")
230 |         XCTFail("RED PHASE: Service degradation handling not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:229:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
227 |         // Then: Should show fallback UI with reduced functionality
228 |         XCTAssertTrue(viewModel.isDegraded, "Should indicate degraded service state")
229 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should still provide basic suggestions")
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
230 |         XCTFail("RED PHASE: Service degradation handling not implemented")
231 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:240:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
238 | 
239 |         // When: Complete suggestion generation flow
240 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
241 | 
242 |         let totalTime = Date().timeIntervalSince(startTime)

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:263:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
261 | 
262 |         // Then: Should handle concurrent requests without conflicts
263 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should have processed concurrent requests")
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
264 |         XCTFail("RED PHASE: Concurrent request handling not implemented")
265 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:280:9: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
278 |         // When: Data flows through complete system
279 |         let decisionResponse = try await mockOrchestrator.makeDecision(decisionRequest)
280 |         viewModel.currentSuggestions = [decisionResponse]
    |         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |         |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
281 | 
282 |         // Then: Should maintain data consistency throughout flow

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:283:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
281 | 
282 |         // Then: Should maintain data consistency throughout flow
283 |         XCTAssertEqual(viewModel.currentSuggestions.first?.context.acquisitionId, testContext.acquisitionId)
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
284 |         XCTAssertEqual(viewModel.currentSuggestions.first?.selectedAction.id, WorkflowAction.placeholder.id)
285 |         XCTFail("RED PHASE: Data flow consistency not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:284:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
282 |         // Then: Should maintain data consistency throughout flow
283 |         XCTAssertEqual(viewModel.currentSuggestions.first?.context.acquisitionId, testContext.acquisitionId)
284 |         XCTAssertEqual(viewModel.currentSuggestions.first?.selectedAction.id, WorkflowAction.placeholder.id)
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
285 |         XCTFail("RED PHASE: Data flow consistency not implemented")
286 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:407:14: error: 'let' property 'isCompliant' may not be initialized directly; use "self.init(...)" or "self = ..." instead
405 | extension ComplianceResult {
406 |     init(isCompliant: Bool, warnings: [String], shapeExplanations: [String: String], farReferences _: [FARReference]) {
407 |         self.isCompliant = isCompliant
    |              `- error: 'let' property 'isCompliant' may not be initialized directly; use "self.init(...)" or "self = ..." instead
408 |         self.warnings = warnings
409 |         self.shapeExplanations = shapeExplanations

/Users/J/aiko/Sources/Services/FARCompliance.swift:70:16: note: 'isCompliant' declared here
 68 | 
 69 | public struct ComplianceResult {
 70 |     public let isCompliant: Bool
    |                `- note: 'isCompliant' declared here
 71 |     public let score: Double // 0.0 to 1.0
 72 |     public let issues: [ComplianceIssue]

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:408:14: error: value of type 'ComplianceResult' has no member 'warnings'
406 |     init(isCompliant: Bool, warnings: [String], shapeExplanations: [String: String], farReferences _: [FARReference]) {
407 |         self.isCompliant = isCompliant
408 |         self.warnings = warnings
    |              `- error: value of type 'ComplianceResult' has no member 'warnings'
409 |         self.shapeExplanations = shapeExplanations
410 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:409:14: error: value of type 'ComplianceResult' has no member 'shapeExplanations'
407 |         self.isCompliant = isCompliant
408 |         self.warnings = warnings
409 |         self.shapeExplanations = shapeExplanations
    |              `- error: value of type 'ComplianceResult' has no member 'shapeExplanations'
410 |     }
411 | }
[26/35] Compiling AIKOTests AccessibilityTests.swift
/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:12:31: error: 'DecisionResponse' is ambiguous for type lookup in this context
 10 |     // MARK: - Test Properties
 11 | 
 12 |     var testDecisionResponse: DecisionResponse?
    |                               `- error: 'DecisionResponse' is ambiguous for type lookup in this context
 13 |     var testComplianceContext: AIReasoningTestComplianceContext?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var testDecisionResponse: DecisionResponse?
 13 |     var testComplianceContext: AIReasoningTestComplianceContext?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 | 
 16 |     // MARK: - Setup & Teardown

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:330:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
328 |     // MARK: - Helper Methods
329 | 
330 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
331 |         DecisionResponse(
332 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:356:54: error: 'DecisionResponse' is ambiguous for type lookup in this context
354 |     }
355 | 
356 |     private func createDecisionResponseWithSHAP() -> DecisionResponse {
    |                                                      `- error: 'DecisionResponse' is ambiguous for type lookup in this context
357 |         var decision = createTestDecisionResponse()
358 |         decision.shapeExplanations = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:367:57: error: 'DecisionResponse' is ambiguous for type lookup in this context
365 |     }
366 | 
367 |     private func createDecisionResponseWithFactors() -> DecisionResponse {
    |                                                         `- error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |         var decision = createTestDecisionResponse()
369 |         decision.reasoningFactors = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:403:60: error: 'DecisionResponse' is ambiguous for type lookup in this context
401 |     }
402 | 
403 |     private func createDecisionResponseWithAuditTrail() -> DecisionResponse {
    |                                                            `- error: 'DecisionResponse' is ambiguous for type lookup in this context
404 |         var decision = createTestDecisionResponse()
405 |         decision.auditTrailId = "AUDIT-2025-001-\(UUID().uuidString.prefix(8))"

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:415:59: error: 'DecisionResponse' is ambiguous for type lookup in this context
413 |     }
414 | 
415 |     private func createDecisionResponseWithPrecedent() -> DecisionResponse {
    |                                                           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
416 |         var decision = createTestDecisionResponse()
417 |         decision.historicalPrecedents = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:434:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |     }
433 | 
434 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
435 |         var decision = createDecisionResponseWithSHAP()
436 |         decision = createDecisionResponseWithFactors()

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:452:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
450 |     }
451 | 
452 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
453 |         AcquisitionContext(
454 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:508:11: error: 'DecisionResponse' is ambiguous for type lookup in this context
506 | // MARK: - Extended DecisionResponse for Testing
507 | 
508 | extension DecisionResponse {
    |           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
509 |     var shapeExplanations: [String: String] {
510 |         get { [:] } // RED PHASE: Not implemented

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:24:33: error: cannot assign value of type 'ComplianceContext' to type 'AIReasoningTestComplianceContext'
 22 | 
 23 |         testDecisionResponse = createTestDecisionResponse()
 24 |         testComplianceContext = createTestComplianceContext()
    |                                 `- error: cannot assign value of type 'ComplianceContext' to type 'AIReasoningTestComplianceContext'
 25 |     }
 26 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:44:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
 42 |         let view = AIReasoningView(
 43 |             decisionResponse: testDecisionResponse,
 44 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
 45 |         )
 46 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:61:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
 59 |         let view = AIReasoningView(
 60 |             decisionResponse: testDecisionResponse,
 61 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
 62 |         )
 63 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:96:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
 94 |         let view = AIReasoningView(
 95 |             decisionResponse: decisionWithSHAP,
 96 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
 97 |         )
 98 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:114:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
112 |         let view = AIReasoningView(
113 |             decisionResponse: decisionWithFactors,
114 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
115 |         )
116 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:169:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
167 |         let view = AIReasoningView(
168 |             decisionResponse: testDecisionResponse,
169 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
170 |         )
171 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:188:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
186 |         let view = AIReasoningView(
187 |             decisionResponse: decisionWithAudit,
188 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
189 |         )
190 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:206:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
204 |         let view = AIReasoningView(
205 |             decisionResponse: decisionWithPrecedent,
206 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
207 |         )
208 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:225:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
223 |         let view = AIReasoningView(
224 |             decisionResponse: testDecisionResponse,
225 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
226 |         )
227 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:241:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
239 |         let view = AIReasoningView(
240 |             decisionResponse: testDecisionResponse,
241 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
242 |         )
243 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:259:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
257 |         let view = AIReasoningView(
258 |             decisionResponse: testDecisionResponse,
259 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
260 |         )
261 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:275:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
273 |         let view = AIReasoningView(
274 |             decisionResponse: testDecisionResponse,
275 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
276 |         )
277 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:294:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
292 |         let view = AIReasoningView(
293 |             decisionResponse: complexDecision,
294 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
295 |         )
296 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:317:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
315 |         let view = AIReasoningView(
316 |             decisionResponse: testDecisionResponse,
317 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
318 |         )
319 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:345:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
343 |         ComplianceContext(
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
347 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:346:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
347 |             ],
348 |             dfarsReferences: [

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:345:29: error: extra arguments at positions #2, #3 in call
343 |         ComplianceContext(
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
    |                             `- error: extra arguments at positions #2, #3 in call
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
347 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:345:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
343 |         ComplianceContext(
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
347 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:346:29: error: extra arguments at positions #2, #3 in call
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
    |                             `- error: extra arguments at positions #2, #3 in call
347 |             ],
348 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:346:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
347 |             ],
348 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:349:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
347 |             ],
348 |             dfarsReferences: [
349 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms", url: "https://example.com/dfars"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
350 |             ],
351 |             complianceScore: 0.94,

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:349:31: error: extra arguments at positions #2, #3 in call
347 |             ],
348 |             dfarsReferences: [
349 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms", url: "https://example.com/dfars"),
    |                               `- error: extra arguments at positions #2, #3 in call
350 |             ],
351 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:349:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
347 |             ],
348 |             dfarsReferences: [
349 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms", url: "https://example.com/dfars"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
350 |             ],
351 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:381:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
379 |         ComplianceContext(
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:383:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
384 |             ],
385 |             dfarsReferences: [],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:382:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
384 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:381:29: error: extra arguments at positions #2, #3 in call
379 |         ComplianceContext(
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: extra arguments at positions #2, #3 in call
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:381:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
379 |         ComplianceContext(
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:382:29: error: extra arguments at positions #2, #3 in call
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
    |                             `- error: extra arguments at positions #2, #3 in call
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
384 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:382:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
384 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:383:29: error: extra arguments at positions #2, #3 in call
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                             `- error: extra arguments at positions #2, #3 in call
384 |             ],
385 |             dfarsReferences: [],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:383:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
384 |             ],
385 |             dfarsReferences: [],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:395:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
393 |             farReferences: [],
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
397 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:396:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
397 |             ],
398 |             complianceScore: 0.88,

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:395:31: error: extra arguments at positions #2, #3 in call
393 |             farReferences: [],
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
    |                               `- error: extra arguments at positions #2, #3 in call
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
397 |             ],

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:395:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
393 |             farReferences: [],
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
397 |             ],

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:396:31: error: extra arguments at positions #2, #3 in call
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
    |                               `- error: extra arguments at positions #2, #3 in call
397 |             ],
398 |             complianceScore: 0.88,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:396:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
397 |             ],
398 |             complianceScore: 0.88,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: AccessibilityTestMockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var testContext: AcquisitionContext?
 16 | 
    :
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:15:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: AccessibilityTestMockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:333:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
331 |     // MARK: - Helper Methods
332 | 
333 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
334 |         AcquisitionContext(
335 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:348:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
346 |     }
347 | 
348 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
349 |         DecisionResponse(
350 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:362:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
360 |     }
361 | 
362 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
363 |         DecisionResponse(
364 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:396:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
394 |     }
395 | 
396 |     private func createMultipleSuggestions() -> [DecisionResponse] {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
397 |         [
398 |             createAutonomousSuggestion(),

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:404:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
402 |     }
403 | 
404 |     private func createAutonomousSuggestion() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
405 |         DecisionResponse(
406 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:416:48: error: 'DecisionResponse' is ambiguous for type lookup in this context
414 |     }
415 | 
416 |     private func createAssistedSuggestion() -> DecisionResponse {
    |                                                `- error: 'DecisionResponse' is ambiguous for type lookup in this context
417 |         DecisionResponse(
418 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:430:48: error: 'DecisionResponse' is ambiguous for type lookup in this context
428 |     }
429 | 
430 |     private func createDeferredSuggestion() -> DecisionResponse {
    |                                                `- error: 'DecisionResponse' is ambiguous for type lookup in this context
431 |         DecisionResponse(
432 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:444:49: error: 'DecisionResponse' is ambiguous for type lookup in this context
442 |     }
443 | 
444 |     private func createUpdatedSuggestions() -> [DecisionResponse] {
    |                                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
445 |         createMultipleSuggestions().map { suggestion in
446 |             var updated = suggestion

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:482:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
480 | 
481 | class AccessibilityTestMockAgenticOrchestrator: Sendable {
482 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
483 |         DecisionResponse(
484 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:494:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
492 |     }
493 | 
494 |     func provideFeedback(for _: DecisionResponse, feedback _: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
495 |         // Mock implementation
496 |     }

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:481:7: error: non-final class 'AccessibilityTestMockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
479 | // MARK: - Mock Types for Accessibility Testing
480 | 
481 | class AccessibilityTestMockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'AccessibilityTestMockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
482 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
483 |         DecisionResponse(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:500:36: error: 'AcquisitionContext' is ambiguous for type lookup in this context
498 | 
499 | class MockComplianceGuardian: Sendable {
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
    |                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
501 |         ComplianceResult(
502 |             isCompliant: true,

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: error: invalid redeclaration of 'MockComplianceGuardian'
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- error: invalid redeclaration of 'MockComplianceGuardian'
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:26:27: error: argument type 'AccessibilityTestMockAgenticOrchestrator?' does not conform to expected type 'AgenticOrchestratorProtocol'
 24 | 
 25 |         viewModel = await SuggestionViewModel(
 26 |             orchestrator: mockOrchestrator,
    |                           `- error: argument type 'AccessibilityTestMockAgenticOrchestrator?' does not conform to expected type 'AgenticOrchestratorProtocol'
 27 |             complianceGuardian: mockComplianceGuardian
 28 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:46:9: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 44 |         // Given: AgenticSuggestionView with test data
 45 |         let suggestion = createTestDecisionResponse()
 46 |         viewModel.currentSuggestions = [suggestion]
    |         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |         |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 47 |         let view = AgenticSuggestionView(viewModel: viewModel)
 48 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:47:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
 45 |         let suggestion = createTestDecisionResponse()
 46 |         viewModel.currentSuggestions = [suggestion]
 47 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 48 | 
 49 |         // When: VoiceOver accesses the view

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:62:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
 60 |             trend: .improving
 61 |         )
 62 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
 63 | 
 64 |         // When: VoiceOver reads the confidence indicator

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:101:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
 99 |         let suggestions = createMultipleSuggestions()
100 |         viewModel.currentSuggestions = suggestions
101 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
102 | 
103 |         // When: Tab key navigation is used

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:116:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
114 |             trend: .stable
115 |         )
116 |         let indicator = ConfidenceIndicator(visualization: visualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
117 | 
118 |         // When: Keyboard navigation is used to access details

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:158:17: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
156 |                 trend: .stable
157 |             )
158 |             let indicator = ConfidenceIndicator(visualization: visualization)
    |                 `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
159 | 
160 |             // Then: Should meet WCAG 2.1 AA contrast requirements (4.5:1)

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:173:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
171 |         let suggestions = createMultipleSuggestions()
172 |         viewModel.currentSuggestions = suggestions
173 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
174 | 
175 |         // When: High contrast mode is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:186:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
184 |         let suggestions = createMultipleSuggestions()
185 |         viewModel.currentSuggestions = suggestions
186 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
187 | 
188 |         // When: Dynamic type size is changed

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:193:47: error: cannot infer key path type from context; consider explicitly specifying a root type
191 |         for size in testSizes {
192 |             // Then: Should scale text appropriately for each size
193 |             let scaledView = view.environment(\.sizeCategory, size)
    |                                               `- error: cannot infer key path type from context; consider explicitly specifying a root type
194 |             XCTAssertNotNil(scaledView, "Should handle dynamic type size: \(size)")
195 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:208:46: error: cannot infer key path type from context; consider explicitly specifying a root type
206 | 
207 |         // When: Large accessibility text size is used
208 |         let largeTextView = view.environment(\.sizeCategory, .accessibilityExtraExtraExtraLarge)
    |                                              `- error: cannot infer key path type from context; consider explicitly specifying a root type
209 | 
210 |         // Then: Should maintain readability and layout integrity

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:208:63: error: cannot infer contextual base in reference to member 'accessibilityExtraExtraExtraLarge'
206 | 
207 |         // When: Large accessibility text size is used
208 |         let largeTextView = view.environment(\.sizeCategory, .accessibilityExtraExtraExtraLarge)
    |                                                               `- error: cannot infer contextual base in reference to member 'accessibilityExtraExtraExtraLarge'
209 | 
210 |         // Then: Should maintain readability and layout integrity

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:220:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
218 |         let suggestions = createMultipleSuggestions()
219 |         viewModel.currentSuggestions = suggestions
220 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
221 | 
222 |         // When: View updates while element has focus

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:254:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
252 |             trend: .improving
253 |         )
254 |         let indicator = ConfidenceIndicator(visualization: visualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
255 | 
256 |         // When: Reduced motion accessibility setting is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:269:9: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
267 |         let deferredSuggestion = createDeferredSuggestion()
268 | 
269 |         viewModel.currentSuggestions = [autonomousSuggestion, assistedSuggestion, deferredSuggestion]
    |         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |         |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
270 |         let view = AgenticSuggestionView(viewModel: viewModel)
271 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:270:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
268 | 
269 |         viewModel.currentSuggestions = [autonomousSuggestion, assistedSuggestion, deferredSuggestion]
270 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
271 | 
272 |         // When: Screen reader accesses the suggestions

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:311:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
309 |         let suggestions = createMultipleSuggestions()
310 |         viewModel.currentSuggestions = suggestions
311 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
312 | 
313 |         // When: Simplified interface mode is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:385:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
383 |         ComplianceContext(
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
387 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:386:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
387 |             ],
388 |             dfarsReferences: [

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:385:29: error: extra arguments at positions #2, #3 in call
383 |         ComplianceContext(
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: extra arguments at positions #2, #3 in call
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
387 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:385:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
383 |         ComplianceContext(
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
387 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:386:29: error: extra arguments at positions #2, #3 in call
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
    |                             `- error: extra arguments at positions #2, #3 in call
387 |             ],
388 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:386:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
387 |             ],
388 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:389:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
387 |             ],
388 |             dfarsReferences: [
389 |                 DFARSReference(section: "252.239-7001", title: "Information Assurance", url: "https://acquisition.gov/dfars/252.239-7001"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
390 |             ],
391 |             complianceScore: 0.92,

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:389:31: error: extra arguments at positions #2, #3 in call
387 |             ],
388 |             dfarsReferences: [
389 |                 DFARSReference(section: "252.239-7001", title: "Information Assurance", url: "https://acquisition.gov/dfars/252.239-7001"),
    |                               `- error: extra arguments at positions #2, #3 in call
390 |             ],
391 |             complianceScore: 0.92,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:389:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
387 |             ],
388 |             dfarsReferences: [
389 |                 DFARSReference(section: "252.239-7001", title: "Information Assurance", url: "https://acquisition.gov/dfars/252.239-7001"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
390 |             ],
391 |             complianceScore: 0.92,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
    :
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
 16 |     var testContext: AcquisitionContext?
    :
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:16:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
 16 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 17 | 
 18 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:290:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
288 |     // MARK: - Helper Methods
289 | 
290 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
291 |         AcquisitionContext(
292 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:321:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
319 |     private var alternativeActions: [AlternativeAction] = []
320 | 
321 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
322 |         makeDecisionCallCount += 1
323 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:348:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
346 |     }
347 | 
348 |     func provideFeedback(for _: DecisionResponse, feedback: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
349 |         provideFeedbackCallCount += 1
350 |         lastFeedback = feedback

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:312:9: error: stored property 'makeDecisionCallCount' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
310 | 
311 | class MockAgenticOrchestrator: Sendable {
312 |     var makeDecisionCallCount = 0
    |         `- error: stored property 'makeDecisionCallCount' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
313 |     var provideFeedbackCallCount = 0
314 |     var lastFeedback: AgenticUserFeedback?

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: error: invalid redeclaration of 'MockAgenticOrchestrator'
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- error: invalid redeclaration of 'MockAgenticOrchestrator'
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:370:36: error: 'AcquisitionContext' is ambiguous for type lookup in this context
368 |     private var farReferences: [FARReference] = []
369 | 
370 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
    |                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
371 |         ComplianceResult(
372 |             isCompliant: true,

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:367:17: error: stored property 'shapExplanations' of 'Sendable'-conforming class 'MockComplianceGuardian' is mutable
365 | 
366 | class MockComplianceGuardian: Sendable {
367 |     private var shapExplanations: [String: String] = [:]
    |                 `- error: stored property 'shapExplanations' of 'Sendable'-conforming class 'MockComplianceGuardian' is mutable
368 |     private var farReferences: [FARReference] = []
369 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:388:7: error: non-final class 'MockLearningFeedbackLoop' cannot conform to 'Sendable'; use '@unchecked Sendable'
386 | }
387 | 
388 | class MockLearningFeedbackLoop: Sendable {
    |       `- error: non-final class 'MockLearningFeedbackLoop' cannot conform to 'Sendable'; use '@unchecked Sendable'
389 |     var eventRecorded = false
390 |     var lastEventType: LearningEventType?

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:389:9: error: stored property 'eventRecorded' of 'Sendable'-conforming class 'MockLearningFeedbackLoop' is mutable
387 | 
388 | class MockLearningFeedbackLoop: Sendable {
389 |     var eventRecorded = false
    |         `- error: stored property 'eventRecorded' of 'Sendable'-conforming class 'MockLearningFeedbackLoop' is mutable
390 |     var lastEventType: LearningEventType?
391 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:413:11: error: 'DecisionResponse' is ambiguous for type lookup in this context
411 | }
412 | 
413 | extension DecisionResponse {
    |           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
414 |     var complianceContext: ComplianceContext? {
415 |         get { nil } // RED PHASE: Not implemented

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:431:35: error: 'DecisionResponse' is ambiguous for type lookup in this context
429 |     }
430 | 
431 |     func processRealTimeUpdate(_: DecisionResponse) async throws {
    |                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |         // RED PHASE: Not implemented
433 |         throw IntegrationTestError.serviceUnavailable

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:49:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
 47 |         // Given: Complete integration setup
 48 |         // When: Suggestion generation is requested
 49 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 50 | 
 51 |         // Then: Should generate suggestions and display in UI

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:52:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 50 | 
 51 |         // Then: Should generate suggestions and display in UI
 52 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should have generated suggestions")
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 53 |         XCTAssertEqual(mockOrchestrator.makeDecisionCallCount, 1, "Should call makeDecision once")
 54 |         XCTFail("RED PHASE: End-to-end suggestion generation integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:62:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
 60 | 
 61 |         // When: Suggestions are generated with different modes
 62 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 63 | 
 64 |         // Then: Should display correct decision modes for each confidence level

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:65:27: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 63 | 
 64 |         // Then: Should display correct decision modes for each confidence level
 65 |         let suggestions = viewModel.currentSuggestions
    |                           |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                           |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:66:66: error: cannot infer contextual base in reference to member 'autonomous'
 64 |         // Then: Should display correct decision modes for each confidence level
 65 |         let suggestions = viewModel.currentSuggestions
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
    |                                                                  `- error: cannot infer contextual base in reference to member 'autonomous'
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")
 68 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .deferred }, "Should have deferred suggestion")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:67:66: error: cannot infer contextual base in reference to member 'assisted'
 65 |         let suggestions = viewModel.currentSuggestions
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")
    |                                                                  `- error: cannot infer contextual base in reference to member 'assisted'
 68 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .deferred }, "Should have deferred suggestion")
 69 |         XCTFail("RED PHASE: Decision mode display integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:68:66: error: cannot infer contextual base in reference to member 'deferred'
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")
 68 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .deferred }, "Should have deferred suggestion")
    |                                                                  `- error: cannot infer contextual base in reference to member 'deferred'
 69 |         XCTFail("RED PHASE: Decision mode display integration not implemented")
 70 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:81:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
 79 | 
 80 |         // When: Suggestions with alternatives are displayed
 81 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 82 | 
 83 |         // Then: Should display alternative actions in UI

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:84:27: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 82 | 
 83 |         // Then: Should display alternative actions in UI
 84 |         let suggestions = viewModel.currentSuggestions
    |                           |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                           |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 85 |         XCTAssertTrue(suggestions.first?.alternativeActions.count ?? 0 > 0, "Should have alternative actions")
 86 |         XCTFail("RED PHASE: Alternative actions display not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:106:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
104 | 
105 |         // When: Feedback is submitted through UI
106 |         try await viewModel.submitFeedback(feedback, for: suggestion)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'submitFeedback' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
107 | 
108 |         // Then: Should call orchestrator's provideFeedback method

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:129:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
127 | 
128 |         // When: Feedback is processed through complete loop
129 |         try await viewModel.submitFeedback(feedback, for: suggestion)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'submitFeedback' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
130 | 
131 |         // Then: Should update learning systems

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:132:23: error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'eventRecorded' of wrapped base type 'MockLearningFeedbackLoop'
130 | 
131 |         // Then: Should update learning systems
132 |         XCTAssertTrue(mockLearningLoop.eventRecorded, "Should record learning event")
    |                       |- error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'eventRecorded' of wrapped base type 'MockLearningFeedbackLoop'
    |                       |- note: chain the optional using '?' to access member 'eventRecorded' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
133 |         XCTAssertEqual(mockLearningLoop.lastEventType, .userFeedback, "Should record user feedback event")
134 |         XCTFail("RED PHASE: Learning loop integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:133:24: error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'lastEventType' of wrapped base type 'MockLearningFeedbackLoop'
131 |         // Then: Should update learning systems
132 |         XCTAssertTrue(mockLearningLoop.eventRecorded, "Should record learning event")
133 |         XCTAssertEqual(mockLearningLoop.lastEventType, .userFeedback, "Should record user feedback event")
    |                        |- error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'lastEventType' of wrapped base type 'MockLearningFeedbackLoop'
    |                        |- note: chain the optional using '?' to access member 'lastEventType' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
134 |         XCTFail("RED PHASE: Learning loop integration not implemented")
135 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:149:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
147 | 
148 |         // When: Suggestions with compliance context are generated
149 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
150 | 
151 |         // Then: Should display SHAP explanations in reasoning view

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:152:32: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
150 | 
151 |         // Then: Should display SHAP explanations in reasoning view
152 |         guard let suggestion = viewModel.currentSuggestions.first else {
    |                                |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                                |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
153 |             XCTFail("No suggestions available")
154 |             return

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:163:25: error: extra arguments at positions #2, #3 in call
161 |         // Given: Compliance context with FAR references
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                         `- error: extra arguments at positions #2, #3 in call
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
165 |         ]

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:163:25: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
161 |         // Given: Compliance context with FAR references
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                         `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
165 |         ]

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:164:25: error: extra arguments at positions #2, #3 in call
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                         `- error: extra arguments at positions #2, #3 in call
165 |         ]
166 |         mockComplianceGuardian.configureFARReferences(farReferences)

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:164:25: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                         `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
165 |         ]
166 |         mockComplianceGuardian.configureFARReferences(farReferences)

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:169:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
167 | 
168 |         // When: Compliance context is displayed
169 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
170 | 
171 |         // Then: Should display FAR references with proper links

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:172:27: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
170 | 
171 |         // Then: Should display FAR references with proper links
172 |         let suggestions = viewModel.currentSuggestions
    |                           |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                           |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
173 |         XCTAssertTrue(suggestions.allSatisfy { $0.complianceContext != nil }, "All suggestions should have compliance context")
174 |         XCTFail("RED PHASE: FAR references display not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:181:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
179 |     func testAgenticOrchestrator_RealTimeUpdates_PropagateToUI() async throws {
180 |         // Given: Initial suggestions loaded
181 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
182 |         let initialCount = viewModel.currentSuggestions.count
183 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:182:28: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
180 |         // Given: Initial suggestions loaded
181 |         try await viewModel.loadSuggestions(for: testContext)
182 |         let initialCount = viewModel.currentSuggestions.count
    |                            |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                            |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
183 | 
184 |         // When: Real-time confidence update occurs

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:195:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'processRealTimeUpdate' of wrapped base type 'SuggestionViewModel'
193 |         )
194 | 
195 |         try await viewModel.processRealTimeUpdate(updatedSuggestion)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'processRealTimeUpdate' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'processRealTimeUpdate' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
196 | 
197 |         // Then: Should update UI with new confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:198:37: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
196 | 
197 |         // Then: Should update UI with new confidence
198 |         XCTAssertGreaterThanOrEqual(viewModel.currentSuggestions.count, initialCount, "Should maintain or increase suggestions")
    |                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                                     |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
199 |         XCTFail("RED PHASE: Real-time updates integration not implemented")
200 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:210:23: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
208 |         // When: Attempting to load suggestions with error
209 |         do {
210 |             try await viewModel.loadSuggestions(for: testContext)
    |                       |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                       |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
211 |             XCTFail("Should have thrown network error")
212 |         } catch {

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:214:29: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'errorState' of wrapped base type 'SuggestionViewModel'
212 |         } catch {
213 |             // Then: Should handle error gracefully in UI
214 |             XCTAssertNotNil(viewModel.errorState, "Should set error state in view model")
    |                             |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'errorState' of wrapped base type 'SuggestionViewModel'
    |                             |- note: chain the optional using '?' to access member 'errorState' only for non-'nil' base values
    |                             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
215 |             XCTAssertFalse(viewModel.isProcessing, "Should stop processing on error")
216 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:215:28: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isProcessing' of wrapped base type 'SuggestionViewModel'
213 |             // Then: Should handle error gracefully in UI
214 |             XCTAssertNotNil(viewModel.errorState, "Should set error state in view model")
215 |             XCTAssertFalse(viewModel.isProcessing, "Should stop processing on error")
    |                            |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isProcessing' of wrapped base type 'SuggestionViewModel'
    |                            |- note: chain the optional using '?' to access member 'isProcessing' only for non-'nil' base values
    |                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
216 |         }
217 |         XCTFail("RED PHASE: Network error handling integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:225:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
223 | 
224 |         // When: Loading suggestions under degraded conditions
225 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
226 | 
227 |         // Then: Should show fallback UI with reduced functionality

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:228:23: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isDegraded' of wrapped base type 'SuggestionViewModel'
226 | 
227 |         // Then: Should show fallback UI with reduced functionality
228 |         XCTAssertTrue(viewModel.isDegraded, "Should indicate degraded service state")
    |                       |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isDegraded' of wrapped base type 'SuggestionViewModel'
    |                       |- note: chain the optional using '?' to access member 'isDegraded' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
229 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should still provide basic suggestions")
230 |         XCTFail("RED PHASE: Service degradation handling not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:229:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
227 |         // Then: Should show fallback UI with reduced functionality
228 |         XCTAssertTrue(viewModel.isDegraded, "Should indicate degraded service state")
229 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should still provide basic suggestions")
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
230 |         XCTFail("RED PHASE: Service degradation handling not implemented")
231 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:240:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
238 | 
239 |         // When: Complete suggestion generation flow
240 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
241 | 
242 |         let totalTime = Date().timeIntervalSince(startTime)

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:263:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
261 | 
262 |         // Then: Should handle concurrent requests without conflicts
263 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should have processed concurrent requests")
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
264 |         XCTFail("RED PHASE: Concurrent request handling not implemented")
265 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:280:9: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
278 |         // When: Data flows through complete system
279 |         let decisionResponse = try await mockOrchestrator.makeDecision(decisionRequest)
280 |         viewModel.currentSuggestions = [decisionResponse]
    |         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |         |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
281 | 
282 |         // Then: Should maintain data consistency throughout flow

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:283:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
281 | 
282 |         // Then: Should maintain data consistency throughout flow
283 |         XCTAssertEqual(viewModel.currentSuggestions.first?.context.acquisitionId, testContext.acquisitionId)
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
284 |         XCTAssertEqual(viewModel.currentSuggestions.first?.selectedAction.id, WorkflowAction.placeholder.id)
285 |         XCTFail("RED PHASE: Data flow consistency not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:284:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
282 |         // Then: Should maintain data consistency throughout flow
283 |         XCTAssertEqual(viewModel.currentSuggestions.first?.context.acquisitionId, testContext.acquisitionId)
284 |         XCTAssertEqual(viewModel.currentSuggestions.first?.selectedAction.id, WorkflowAction.placeholder.id)
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
285 |         XCTFail("RED PHASE: Data flow consistency not implemented")
286 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:407:14: error: 'let' property 'isCompliant' may not be initialized directly; use "self.init(...)" or "self = ..." instead
405 | extension ComplianceResult {
406 |     init(isCompliant: Bool, warnings: [String], shapeExplanations: [String: String], farReferences _: [FARReference]) {
407 |         self.isCompliant = isCompliant
    |              `- error: 'let' property 'isCompliant' may not be initialized directly; use "self.init(...)" or "self = ..." instead
408 |         self.warnings = warnings
409 |         self.shapeExplanations = shapeExplanations

/Users/J/aiko/Sources/Services/FARCompliance.swift:70:16: note: 'isCompliant' declared here
 68 | 
 69 | public struct ComplianceResult {
 70 |     public let isCompliant: Bool
    |                `- note: 'isCompliant' declared here
 71 |     public let score: Double // 0.0 to 1.0
 72 |     public let issues: [ComplianceIssue]

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:408:14: error: value of type 'ComplianceResult' has no member 'warnings'
406 |     init(isCompliant: Bool, warnings: [String], shapeExplanations: [String: String], farReferences _: [FARReference]) {
407 |         self.isCompliant = isCompliant
408 |         self.warnings = warnings
    |              `- error: value of type 'ComplianceResult' has no member 'warnings'
409 |         self.shapeExplanations = shapeExplanations
410 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:409:14: error: value of type 'ComplianceResult' has no member 'shapeExplanations'
407 |         self.isCompliant = isCompliant
408 |         self.warnings = warnings
409 |         self.shapeExplanations = shapeExplanations
    |              `- error: value of type 'ComplianceResult' has no member 'shapeExplanations'
410 |     }
411 | }
[27/35] Compiling AIKOTests AgenticOrchestratorIntegrationTests.swift
/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:12:31: error: 'DecisionResponse' is ambiguous for type lookup in this context
 10 |     // MARK: - Test Properties
 11 | 
 12 |     var testDecisionResponse: DecisionResponse?
    |                               `- error: 'DecisionResponse' is ambiguous for type lookup in this context
 13 |     var testComplianceContext: AIReasoningTestComplianceContext?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var testDecisionResponse: DecisionResponse?
 13 |     var testComplianceContext: AIReasoningTestComplianceContext?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 | 
 16 |     // MARK: - Setup & Teardown

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:330:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
328 |     // MARK: - Helper Methods
329 | 
330 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
331 |         DecisionResponse(
332 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:356:54: error: 'DecisionResponse' is ambiguous for type lookup in this context
354 |     }
355 | 
356 |     private func createDecisionResponseWithSHAP() -> DecisionResponse {
    |                                                      `- error: 'DecisionResponse' is ambiguous for type lookup in this context
357 |         var decision = createTestDecisionResponse()
358 |         decision.shapeExplanations = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:367:57: error: 'DecisionResponse' is ambiguous for type lookup in this context
365 |     }
366 | 
367 |     private func createDecisionResponseWithFactors() -> DecisionResponse {
    |                                                         `- error: 'DecisionResponse' is ambiguous for type lookup in this context
368 |         var decision = createTestDecisionResponse()
369 |         decision.reasoningFactors = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:403:60: error: 'DecisionResponse' is ambiguous for type lookup in this context
401 |     }
402 | 
403 |     private func createDecisionResponseWithAuditTrail() -> DecisionResponse {
    |                                                            `- error: 'DecisionResponse' is ambiguous for type lookup in this context
404 |         var decision = createTestDecisionResponse()
405 |         decision.auditTrailId = "AUDIT-2025-001-\(UUID().uuidString.prefix(8))"

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:415:59: error: 'DecisionResponse' is ambiguous for type lookup in this context
413 |     }
414 | 
415 |     private func createDecisionResponseWithPrecedent() -> DecisionResponse {
    |                                                           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
416 |         var decision = createTestDecisionResponse()
417 |         decision.historicalPrecedents = [

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:434:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |     }
433 | 
434 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
435 |         var decision = createDecisionResponseWithSHAP()
436 |         decision = createDecisionResponseWithFactors()

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:452:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
450 |     }
451 | 
452 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
453 |         AcquisitionContext(
454 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:508:11: error: 'DecisionResponse' is ambiguous for type lookup in this context
506 | // MARK: - Extended DecisionResponse for Testing
507 | 
508 | extension DecisionResponse {
    |           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
509 |     var shapeExplanations: [String: String] {
510 |         get { [:] } // RED PHASE: Not implemented

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:24:33: error: cannot assign value of type 'ComplianceContext' to type 'AIReasoningTestComplianceContext'
 22 | 
 23 |         testDecisionResponse = createTestDecisionResponse()
 24 |         testComplianceContext = createTestComplianceContext()
    |                                 `- error: cannot assign value of type 'ComplianceContext' to type 'AIReasoningTestComplianceContext'
 25 |     }
 26 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:44:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
 42 |         let view = AIReasoningView(
 43 |             decisionResponse: testDecisionResponse,
 44 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
 45 |         )
 46 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:61:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
 59 |         let view = AIReasoningView(
 60 |             decisionResponse: testDecisionResponse,
 61 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
 62 |         )
 63 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:96:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
 94 |         let view = AIReasoningView(
 95 |             decisionResponse: decisionWithSHAP,
 96 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
 97 |         )
 98 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:114:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
112 |         let view = AIReasoningView(
113 |             decisionResponse: decisionWithFactors,
114 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
115 |         )
116 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:169:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
167 |         let view = AIReasoningView(
168 |             decisionResponse: testDecisionResponse,
169 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
170 |         )
171 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:188:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
186 |         let view = AIReasoningView(
187 |             decisionResponse: decisionWithAudit,
188 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
189 |         )
190 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:206:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
204 |         let view = AIReasoningView(
205 |             decisionResponse: decisionWithPrecedent,
206 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
207 |         )
208 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:225:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
223 |         let view = AIReasoningView(
224 |             decisionResponse: testDecisionResponse,
225 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
226 |         )
227 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:241:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
239 |         let view = AIReasoningView(
240 |             decisionResponse: testDecisionResponse,
241 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
242 |         )
243 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:259:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
257 |         let view = AIReasoningView(
258 |             decisionResponse: testDecisionResponse,
259 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
260 |         )
261 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:275:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
273 |         let view = AIReasoningView(
274 |             decisionResponse: testDecisionResponse,
275 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
276 |         )
277 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:294:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
292 |         let view = AIReasoningView(
293 |             decisionResponse: complexDecision,
294 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
295 |         )
296 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:317:54: error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
315 |         let view = AIReasoningView(
316 |             decisionResponse: testDecisionResponse,
317 |             complianceContext: testComplianceContext as AIKO.ComplianceContext?
    |                                                      |- error: 'AIReasoningTestComplianceContext' is not convertible to 'ComplianceContext?'
    |                                                      `- note: did you mean to use 'as!' to force downcast?
318 |         )
319 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:345:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
343 |         ComplianceContext(
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
347 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:346:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
347 |             ],
348 |             dfarsReferences: [

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:345:29: error: extra arguments at positions #2, #3 in call
343 |         ComplianceContext(
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
    |                             `- error: extra arguments at positions #2, #3 in call
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
347 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:345:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
343 |         ComplianceContext(
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
347 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:346:29: error: extra arguments at positions #2, #3 in call
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
    |                             `- error: extra arguments at positions #2, #3 in call
347 |             ],
348 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:346:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
344 |             farReferences: [
345 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://example.com/far"),
346 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://example.com/far"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
347 |             ],
348 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:349:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
347 |             ],
348 |             dfarsReferences: [
349 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms", url: "https://example.com/dfars"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
350 |             ],
351 |             complianceScore: 0.94,

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:349:31: error: extra arguments at positions #2, #3 in call
347 |             ],
348 |             dfarsReferences: [
349 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms", url: "https://example.com/dfars"),
    |                               `- error: extra arguments at positions #2, #3 in call
350 |             ],
351 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:349:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
347 |             ],
348 |             dfarsReferences: [
349 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms", url: "https://example.com/dfars"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
350 |             ],
351 |             complianceScore: 0.94,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:381:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
379 |         ComplianceContext(
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:383:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
384 |             ],
385 |             dfarsReferences: [],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:382:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
384 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:381:29: error: extra arguments at positions #2, #3 in call
379 |         ComplianceContext(
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: extra arguments at positions #2, #3 in call
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:381:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
379 |         ComplianceContext(
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:382:29: error: extra arguments at positions #2, #3 in call
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
    |                             `- error: extra arguments at positions #2, #3 in call
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
384 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:382:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
380 |             farReferences: [
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
384 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:383:29: error: extra arguments at positions #2, #3 in call
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                             `- error: extra arguments at positions #2, #3 in call
384 |             ],
385 |             dfarsReferences: [],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:383:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
381 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
382 |                 FARReference(section: "52.212-3", title: "Offeror Representations", url: "https://acquisition.gov/far/52.212-3"),
383 |                 FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
384 |             ],
385 |             dfarsReferences: [],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:395:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
393 |             farReferences: [],
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
397 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:396:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
397 |             ],
398 |             complianceScore: 0.88,

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:395:31: error: extra arguments at positions #2, #3 in call
393 |             farReferences: [],
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
    |                               `- error: extra arguments at positions #2, #3 in call
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
397 |             ],

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:395:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
393 |             farReferences: [],
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
397 |             ],

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:396:31: error: extra arguments at positions #2, #3 in call
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
    |                               `- error: extra arguments at positions #2, #3 in call
397 |             ],
398 |             complianceScore: 0.88,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AIReasoningViewTests.swift:396:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
394 |             dfarsReferences: [
395 |                 DFARSReference(section: "252.212-7001", title: "Contract Terms and Conditions", url: "https://acquisition.gov/dfars/252.212-7001"),
396 |                 DFARSReference(section: "252.225-7012", title: "Preference for Domestic Specialty Metals", url: "https://acquisition.gov/dfars/252.225-7012"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
397 |             ],
398 |             complianceScore: 0.88,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: AccessibilityTestMockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var testContext: AcquisitionContext?
 16 | 
    :
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: note: found this candidate
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:15:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 13 |     var mockOrchestrator: AccessibilityTestMockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 16 | 
 17 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:333:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
331 |     // MARK: - Helper Methods
332 | 
333 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
334 |         AcquisitionContext(
335 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:348:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
346 |     }
347 | 
348 |     private func createTestDecisionResponse() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
349 |         DecisionResponse(
350 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:362:53: error: 'DecisionResponse' is ambiguous for type lookup in this context
360 |     }
361 | 
362 |     private func createComplexDecisionResponse() -> DecisionResponse {
    |                                                     `- error: 'DecisionResponse' is ambiguous for type lookup in this context
363 |         DecisionResponse(
364 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:396:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
394 |     }
395 | 
396 |     private func createMultipleSuggestions() -> [DecisionResponse] {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
397 |         [
398 |             createAutonomousSuggestion(),

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:404:50: error: 'DecisionResponse' is ambiguous for type lookup in this context
402 |     }
403 | 
404 |     private func createAutonomousSuggestion() -> DecisionResponse {
    |                                                  `- error: 'DecisionResponse' is ambiguous for type lookup in this context
405 |         DecisionResponse(
406 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:416:48: error: 'DecisionResponse' is ambiguous for type lookup in this context
414 |     }
415 | 
416 |     private func createAssistedSuggestion() -> DecisionResponse {
    |                                                `- error: 'DecisionResponse' is ambiguous for type lookup in this context
417 |         DecisionResponse(
418 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:430:48: error: 'DecisionResponse' is ambiguous for type lookup in this context
428 |     }
429 | 
430 |     private func createDeferredSuggestion() -> DecisionResponse {
    |                                                `- error: 'DecisionResponse' is ambiguous for type lookup in this context
431 |         DecisionResponse(
432 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:444:49: error: 'DecisionResponse' is ambiguous for type lookup in this context
442 |     }
443 | 
444 |     private func createUpdatedSuggestions() -> [DecisionResponse] {
    |                                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
445 |         createMultipleSuggestions().map { suggestion in
446 |             var updated = suggestion

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:482:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
480 | 
481 | class AccessibilityTestMockAgenticOrchestrator: Sendable {
482 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
483 |         DecisionResponse(
484 |             selectedAction: WorkflowAction.placeholder,

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:494:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
492 |     }
493 | 
494 |     func provideFeedback(for _: DecisionResponse, feedback _: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
495 |         // Mock implementation
496 |     }

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:481:7: error: non-final class 'AccessibilityTestMockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
479 | // MARK: - Mock Types for Accessibility Testing
480 | 
481 | class AccessibilityTestMockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'AccessibilityTestMockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
482 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
483 |         DecisionResponse(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:500:36: error: 'AcquisitionContext' is ambiguous for type lookup in this context
498 | 
499 | class MockComplianceGuardian: Sendable {
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
    |                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
501 |         ComplianceResult(
502 |             isCompliant: true,

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: error: invalid redeclaration of 'MockComplianceGuardian'
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- error: invalid redeclaration of 'MockComplianceGuardian'
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:26:27: error: argument type 'AccessibilityTestMockAgenticOrchestrator?' does not conform to expected type 'AgenticOrchestratorProtocol'
 24 | 
 25 |         viewModel = await SuggestionViewModel(
 26 |             orchestrator: mockOrchestrator,
    |                           `- error: argument type 'AccessibilityTestMockAgenticOrchestrator?' does not conform to expected type 'AgenticOrchestratorProtocol'
 27 |             complianceGuardian: mockComplianceGuardian
 28 |         )

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:46:9: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 44 |         // Given: AgenticSuggestionView with test data
 45 |         let suggestion = createTestDecisionResponse()
 46 |         viewModel.currentSuggestions = [suggestion]
    |         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |         |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 47 |         let view = AgenticSuggestionView(viewModel: viewModel)
 48 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:47:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
 45 |         let suggestion = createTestDecisionResponse()
 46 |         viewModel.currentSuggestions = [suggestion]
 47 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 48 | 
 49 |         // When: VoiceOver accesses the view

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:62:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
 60 |             trend: .improving
 61 |         )
 62 |         let indicator = ConfidenceIndicator(visualization: highConfidenceVisualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
 63 | 
 64 |         // When: VoiceOver reads the confidence indicator

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:101:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
 99 |         let suggestions = createMultipleSuggestions()
100 |         viewModel.currentSuggestions = suggestions
101 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
102 | 
103 |         // When: Tab key navigation is used

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:116:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
114 |             trend: .stable
115 |         )
116 |         let indicator = ConfidenceIndicator(visualization: visualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
117 | 
118 |         // When: Keyboard navigation is used to access details

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:158:17: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
156 |                 trend: .stable
157 |             )
158 |             let indicator = ConfidenceIndicator(visualization: visualization)
    |                 `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
159 | 
160 |             // Then: Should meet WCAG 2.1 AA contrast requirements (4.5:1)

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:173:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
171 |         let suggestions = createMultipleSuggestions()
172 |         viewModel.currentSuggestions = suggestions
173 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
174 | 
175 |         // When: High contrast mode is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:186:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
184 |         let suggestions = createMultipleSuggestions()
185 |         viewModel.currentSuggestions = suggestions
186 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
187 | 
188 |         // When: Dynamic type size is changed

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:193:47: error: cannot infer key path type from context; consider explicitly specifying a root type
191 |         for size in testSizes {
192 |             // Then: Should scale text appropriately for each size
193 |             let scaledView = view.environment(\.sizeCategory, size)
    |                                               `- error: cannot infer key path type from context; consider explicitly specifying a root type
194 |             XCTAssertNotNil(scaledView, "Should handle dynamic type size: \(size)")
195 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:208:46: error: cannot infer key path type from context; consider explicitly specifying a root type
206 | 
207 |         // When: Large accessibility text size is used
208 |         let largeTextView = view.environment(\.sizeCategory, .accessibilityExtraExtraExtraLarge)
    |                                              `- error: cannot infer key path type from context; consider explicitly specifying a root type
209 | 
210 |         // Then: Should maintain readability and layout integrity

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:208:63: error: cannot infer contextual base in reference to member 'accessibilityExtraExtraExtraLarge'
206 | 
207 |         // When: Large accessibility text size is used
208 |         let largeTextView = view.environment(\.sizeCategory, .accessibilityExtraExtraExtraLarge)
    |                                                               `- error: cannot infer contextual base in reference to member 'accessibilityExtraExtraExtraLarge'
209 | 
210 |         // Then: Should maintain readability and layout integrity

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:220:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
218 |         let suggestions = createMultipleSuggestions()
219 |         viewModel.currentSuggestions = suggestions
220 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
221 | 
222 |         // When: View updates while element has focus

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:254:13: warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
252 |             trend: .improving
253 |         )
254 |         let indicator = ConfidenceIndicator(visualization: visualization)
    |             `- warning: initialization of immutable value 'indicator' was never used; consider replacing with assignment to '_' or removing it
255 | 
256 |         // When: Reduced motion accessibility setting is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:269:9: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
267 |         let deferredSuggestion = createDeferredSuggestion()
268 | 
269 |         viewModel.currentSuggestions = [autonomousSuggestion, assistedSuggestion, deferredSuggestion]
    |         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |         |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
270 |         let view = AgenticSuggestionView(viewModel: viewModel)
271 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:270:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
268 | 
269 |         viewModel.currentSuggestions = [autonomousSuggestion, assistedSuggestion, deferredSuggestion]
270 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
271 | 
272 |         // When: Screen reader accesses the suggestions

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:311:53: error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
309 |         let suggestions = createMultipleSuggestions()
310 |         viewModel.currentSuggestions = suggestions
311 |         let view = AgenticSuggestionView(viewModel: viewModel)
    |                                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to a value of type 'SuggestionViewModel'
    |                                                     |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
312 | 
313 |         // When: Simplified interface mode is enabled

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:385:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
383 |         ComplianceContext(
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
387 |             ],

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:386:17: error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
    |                 `- error: cannot convert value of type 'FARReference' to expected element type 'Array<AgenticFARReference>.ArrayLiteralElement' (aka 'AgenticFARReference')
387 |             ],
388 |             dfarsReferences: [

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:385:29: error: extra arguments at positions #2, #3 in call
383 |         ComplianceContext(
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: extra arguments at positions #2, #3 in call
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
387 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:385:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
383 |         ComplianceContext(
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
387 |             ],

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:386:29: error: extra arguments at positions #2, #3 in call
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
    |                             `- error: extra arguments at positions #2, #3 in call
387 |             ],
388 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:386:29: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
384 |             farReferences: [
385 |                 FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
386 |                 FARReference(section: "39.101", title: "Section 508 Accessibility", url: "https://acquisition.gov/far/39.101"),
    |                             `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
387 |             ],
388 |             dfarsReferences: [

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:389:17: error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
387 |             ],
388 |             dfarsReferences: [
389 |                 DFARSReference(section: "252.239-7001", title: "Information Assurance", url: "https://acquisition.gov/dfars/252.239-7001"),
    |                 `- error: cannot convert value of type 'DFARSReference' to expected element type 'Array<AgenticDFARSReference>.ArrayLiteralElement' (aka 'AgenticDFARSReference')
390 |             ],
391 |             complianceScore: 0.92,

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:389:31: error: extra arguments at positions #2, #3 in call
387 |             ],
388 |             dfarsReferences: [
389 |                 DFARSReference(section: "252.239-7001", title: "Information Assurance", url: "https://acquisition.gov/dfars/252.239-7001"),
    |                               `- error: extra arguments at positions #2, #3 in call
390 |             ],
391 |             complianceScore: 0.92,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:389:31: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
387 |             ],
388 |             dfarsReferences: [
389 |                 DFARSReference(section: "252.239-7001", title: "Information Assurance", url: "https://acquisition.gov/dfars/252.239-7001"),
    |                               `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
390 |             ],
391 |             complianceScore: 0.92,

AIKO.DFARSReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct DFARSReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:13:27: error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 11 | 
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
    |                           `- error: 'MockAgenticOrchestrator' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
    :
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: note: found this candidate
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- note: found this candidate
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:14:33: error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 12 |     var viewModel: SuggestionViewModel?
 13 |     var mockOrchestrator: MockAgenticOrchestrator?
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
    |                                 `- error: 'MockComplianceGuardian' is ambiguous for type lookup in this context
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
 16 |     var testContext: AcquisitionContext?
    :
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AccessibilityTests.swift:499:7: note: found this candidate
497 | }
498 | 
499 | class MockComplianceGuardian: Sendable {
    |       `- note: found this candidate
500 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
501 |         ComplianceResult(

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:16:22: error: 'AcquisitionContext' is ambiguous for type lookup in this context
 14 |     var mockComplianceGuardian: MockComplianceGuardian?
 15 |     var mockLearningLoop: MockLearningFeedbackLoop?
 16 |     var testContext: AcquisitionContext?
    |                      `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
 17 | 
 18 |     // MARK: - Setup & Teardown

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:290:52: error: 'AcquisitionContext' is ambiguous for type lookup in this context
288 |     // MARK: - Helper Methods
289 | 
290 |     private func createTestAcquisitionContext() -> AcquisitionContext {
    |                                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
291 |         AcquisitionContext(
292 |             acquisitionId: UUID(),

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:321:67: error: 'DecisionResponse' is ambiguous for type lookup in this context
319 |     private var alternativeActions: [AlternativeAction] = []
320 | 
321 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse {
    |                                                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
322 |         makeDecisionCallCount += 1
323 | 

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:348:33: error: 'DecisionResponse' is ambiguous for type lookup in this context
346 |     }
347 | 
348 |     func provideFeedback(for _: DecisionResponse, feedback: AgenticUserFeedback) async throws {
    |                                 `- error: 'DecisionResponse' is ambiguous for type lookup in this context
349 |         provideFeedbackCallCount += 1
350 |         lastFeedback = feedback

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- error: non-final class 'MockAgenticOrchestrator' cannot conform to 'Sendable'; use '@unchecked Sendable'
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:312:9: error: stored property 'makeDecisionCallCount' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
310 | 
311 | class MockAgenticOrchestrator: Sendable {
312 |     var makeDecisionCallCount = 0
    |         `- error: stored property 'makeDecisionCallCount' of 'Sendable'-conforming class 'MockAgenticOrchestrator' is mutable
313 |     var provideFeedbackCallCount = 0
314 |     var lastFeedback: AgenticUserFeedback?

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: error: invalid redeclaration of 'MockAgenticOrchestrator'
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- error: invalid redeclaration of 'MockAgenticOrchestrator'
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:370:36: error: 'AcquisitionContext' is ambiguous for type lookup in this context
368 |     private var farReferences: [FARReference] = []
369 | 
370 |     func validateCompliance(for _: AcquisitionContext) async throws -> ComplianceResult {
    |                                    `- error: 'AcquisitionContext' is ambiguous for type lookup in this context
371 |         ComplianceResult(
372 |             isCompliant: true,

/Users/J/aiko/Sources/Services/Supporting/AgenticOrchestratorTypes.swift:522:15: note: found this candidate
520 | // MARK: - Test Context Creation
521 | 
522 | public struct AcquisitionContext: Sendable, Codable {
    |               `- note: found this candidate
523 |     public let acquisitionId: UUID
524 |     public let documentType: TestDocumentType

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:231:15: note: found this candidate
229 | // MARK: - Supporting Types
230 | 
231 | public struct AcquisitionContext: Sendable {
    |               `- note: found this candidate
232 |     public let type: ContextCategory
233 |     public let confidence: ContextConfidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:366:7: error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
364 | }
365 | 
366 | class MockComplianceGuardian: Sendable {
    |       `- error: non-final class 'MockComplianceGuardian' cannot conform to 'Sendable'; use '@unchecked Sendable'
367 |     private var shapExplanations: [String: String] = [:]
368 |     private var farReferences: [FARReference] = []

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:367:17: error: stored property 'shapExplanations' of 'Sendable'-conforming class 'MockComplianceGuardian' is mutable
365 | 
366 | class MockComplianceGuardian: Sendable {
367 |     private var shapExplanations: [String: String] = [:]
    |                 `- error: stored property 'shapExplanations' of 'Sendable'-conforming class 'MockComplianceGuardian' is mutable
368 |     private var farReferences: [FARReference] = []
369 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:388:7: error: non-final class 'MockLearningFeedbackLoop' cannot conform to 'Sendable'; use '@unchecked Sendable'
386 | }
387 | 
388 | class MockLearningFeedbackLoop: Sendable {
    |       `- error: non-final class 'MockLearningFeedbackLoop' cannot conform to 'Sendable'; use '@unchecked Sendable'
389 |     var eventRecorded = false
390 |     var lastEventType: LearningEventType?

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:389:9: error: stored property 'eventRecorded' of 'Sendable'-conforming class 'MockLearningFeedbackLoop' is mutable
387 | 
388 | class MockLearningFeedbackLoop: Sendable {
389 |     var eventRecorded = false
    |         `- error: stored property 'eventRecorded' of 'Sendable'-conforming class 'MockLearningFeedbackLoop' is mutable
390 |     var lastEventType: LearningEventType?
391 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:413:11: error: 'DecisionResponse' is ambiguous for type lookup in this context
411 | }
412 | 
413 | extension DecisionResponse {
    |           `- error: 'DecisionResponse' is ambiguous for type lookup in this context
414 |     var complianceContext: ComplianceContext? {
415 |         get { nil } // RED PHASE: Not implemented

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:431:35: error: 'DecisionResponse' is ambiguous for type lookup in this context
429 |     }
430 | 
431 |     func processRealTimeUpdate(_: DecisionResponse) async throws {
    |                                   `- error: 'DecisionResponse' is ambiguous for type lookup in this context
432 |         // RED PHASE: Not implemented
433 |         throw IntegrationTestError.serviceUnavailable

/Users/J/aiko/Sources/Services/AgenticOrchestrator.swift:238:15: note: found this candidate
236 | }
237 | 
238 | public struct DecisionResponse: Sendable, Identifiable {
    |               `- note: found this candidate
239 |     public let id = UUID()
240 |     public let selectedAction: WorkflowAction

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/FormDataTypes.swift:124:15: note: found this candidate
122 | 
123 | /// Decision response for reward calculation
124 | public struct DecisionResponse: Sendable {
    |               `- note: found this candidate
125 |     public let selectedAction: RLAction
126 |     public let confidence: Double

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:49:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
 47 |         // Given: Complete integration setup
 48 |         // When: Suggestion generation is requested
 49 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 50 | 
 51 |         // Then: Should generate suggestions and display in UI

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:52:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 50 | 
 51 |         // Then: Should generate suggestions and display in UI
 52 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should have generated suggestions")
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 53 |         XCTAssertEqual(mockOrchestrator.makeDecisionCallCount, 1, "Should call makeDecision once")
 54 |         XCTFail("RED PHASE: End-to-end suggestion generation integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:62:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
 60 | 
 61 |         // When: Suggestions are generated with different modes
 62 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 63 | 
 64 |         // Then: Should display correct decision modes for each confidence level

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:65:27: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 63 | 
 64 |         // Then: Should display correct decision modes for each confidence level
 65 |         let suggestions = viewModel.currentSuggestions
    |                           |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                           |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:66:66: error: cannot infer contextual base in reference to member 'autonomous'
 64 |         // Then: Should display correct decision modes for each confidence level
 65 |         let suggestions = viewModel.currentSuggestions
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
    |                                                                  `- error: cannot infer contextual base in reference to member 'autonomous'
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")
 68 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .deferred }, "Should have deferred suggestion")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:67:66: error: cannot infer contextual base in reference to member 'assisted'
 65 |         let suggestions = viewModel.currentSuggestions
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")
    |                                                                  `- error: cannot infer contextual base in reference to member 'assisted'
 68 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .deferred }, "Should have deferred suggestion")
 69 |         XCTFail("RED PHASE: Decision mode display integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:68:66: error: cannot infer contextual base in reference to member 'deferred'
 66 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .autonomous }, "Should have autonomous suggestion")
 67 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .assisted }, "Should have assisted suggestion")
 68 |         XCTAssertTrue(suggestions.contains { $0.decisionMode == .deferred }, "Should have deferred suggestion")
    |                                                                  `- error: cannot infer contextual base in reference to member 'deferred'
 69 |         XCTFail("RED PHASE: Decision mode display integration not implemented")
 70 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:81:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
 79 | 
 80 |         // When: Suggestions with alternatives are displayed
 81 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 82 | 
 83 |         // Then: Should display alternative actions in UI

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:84:27: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
 82 | 
 83 |         // Then: Should display alternative actions in UI
 84 |         let suggestions = viewModel.currentSuggestions
    |                           |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                           |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 85 |         XCTAssertTrue(suggestions.first?.alternativeActions.count ?? 0 > 0, "Should have alternative actions")
 86 |         XCTFail("RED PHASE: Alternative actions display not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:106:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
104 | 
105 |         // When: Feedback is submitted through UI
106 |         try await viewModel.submitFeedback(feedback, for: suggestion)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'submitFeedback' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
107 | 
108 |         // Then: Should call orchestrator's provideFeedback method

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:129:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
127 | 
128 |         // When: Feedback is processed through complete loop
129 |         try await viewModel.submitFeedback(feedback, for: suggestion)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'submitFeedback' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'submitFeedback' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
130 | 
131 |         // Then: Should update learning systems

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:132:23: error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'eventRecorded' of wrapped base type 'MockLearningFeedbackLoop'
130 | 
131 |         // Then: Should update learning systems
132 |         XCTAssertTrue(mockLearningLoop.eventRecorded, "Should record learning event")
    |                       |- error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'eventRecorded' of wrapped base type 'MockLearningFeedbackLoop'
    |                       |- note: chain the optional using '?' to access member 'eventRecorded' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
133 |         XCTAssertEqual(mockLearningLoop.lastEventType, .userFeedback, "Should record user feedback event")
134 |         XCTFail("RED PHASE: Learning loop integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:133:24: error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'lastEventType' of wrapped base type 'MockLearningFeedbackLoop'
131 |         // Then: Should update learning systems
132 |         XCTAssertTrue(mockLearningLoop.eventRecorded, "Should record learning event")
133 |         XCTAssertEqual(mockLearningLoop.lastEventType, .userFeedback, "Should record user feedback event")
    |                        |- error: value of optional type 'MockLearningFeedbackLoop?' must be unwrapped to refer to member 'lastEventType' of wrapped base type 'MockLearningFeedbackLoop'
    |                        |- note: chain the optional using '?' to access member 'lastEventType' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
134 |         XCTFail("RED PHASE: Learning loop integration not implemented")
135 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:149:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
147 | 
148 |         // When: Suggestions with compliance context are generated
149 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
150 | 
151 |         // Then: Should display SHAP explanations in reasoning view

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:152:32: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
150 | 
151 |         // Then: Should display SHAP explanations in reasoning view
152 |         guard let suggestion = viewModel.currentSuggestions.first else {
    |                                |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                                |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
153 |             XCTFail("No suggestions available")
154 |             return

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:163:25: error: extra arguments at positions #2, #3 in call
161 |         // Given: Compliance context with FAR references
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                         `- error: extra arguments at positions #2, #3 in call
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
165 |         ]

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:163:25: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
161 |         // Given: Compliance context with FAR references
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
    |                         `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
165 |         ]

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:164:25: error: extra arguments at positions #2, #3 in call
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                         `- error: extra arguments at positions #2, #3 in call
165 |         ]
166 |         mockComplianceGuardian.configureFARReferences(farReferences)

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:164:25: error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
162 |         let farReferences = [
163 |             FARReference(section: "52.212-1", title: "Instructions to Offerors", url: "https://acquisition.gov/far/52.212-1"),
164 |             FARReference(section: "52.215-1", title: "Proposal Preparation", url: "https://acquisition.gov/far/52.215-1"),
    |                         `- error: missing arguments for parameters 'part', 'subpart', 'paragraph' in call
165 |         ]
166 |         mockComplianceGuardian.configureFARReferences(farReferences)

AIKO.FARReference.init:2:10: note: 'init(part:subpart:section:paragraph:)' declared here
1 | struct FARReference {
2 | internal init(part: String, subpart: String?, section: String?, paragraph: String?)}
  |          `- note: 'init(part:subpart:section:paragraph:)' declared here
3 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:169:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
167 | 
168 |         // When: Compliance context is displayed
169 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
170 | 
171 |         // Then: Should display FAR references with proper links

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:172:27: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
170 | 
171 |         // Then: Should display FAR references with proper links
172 |         let suggestions = viewModel.currentSuggestions
    |                           |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                           |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
173 |         XCTAssertTrue(suggestions.allSatisfy { $0.complianceContext != nil }, "All suggestions should have compliance context")
174 |         XCTFail("RED PHASE: FAR references display not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:181:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
179 |     func testAgenticOrchestrator_RealTimeUpdates_PropagateToUI() async throws {
180 |         // Given: Initial suggestions loaded
181 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
182 |         let initialCount = viewModel.currentSuggestions.count
183 | 

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:182:28: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
180 |         // Given: Initial suggestions loaded
181 |         try await viewModel.loadSuggestions(for: testContext)
182 |         let initialCount = viewModel.currentSuggestions.count
    |                            |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                            |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
183 | 
184 |         // When: Real-time confidence update occurs

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:195:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'processRealTimeUpdate' of wrapped base type 'SuggestionViewModel'
193 |         )
194 | 
195 |         try await viewModel.processRealTimeUpdate(updatedSuggestion)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'processRealTimeUpdate' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'processRealTimeUpdate' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
196 | 
197 |         // Then: Should update UI with new confidence

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:198:37: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
196 | 
197 |         // Then: Should update UI with new confidence
198 |         XCTAssertGreaterThanOrEqual(viewModel.currentSuggestions.count, initialCount, "Should maintain or increase suggestions")
    |                                     |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                                     |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
199 |         XCTFail("RED PHASE: Real-time updates integration not implemented")
200 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:210:23: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
208 |         // When: Attempting to load suggestions with error
209 |         do {
210 |             try await viewModel.loadSuggestions(for: testContext)
    |                       |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                       |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
211 |             XCTFail("Should have thrown network error")
212 |         } catch {

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:214:29: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'errorState' of wrapped base type 'SuggestionViewModel'
212 |         } catch {
213 |             // Then: Should handle error gracefully in UI
214 |             XCTAssertNotNil(viewModel.errorState, "Should set error state in view model")
    |                             |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'errorState' of wrapped base type 'SuggestionViewModel'
    |                             |- note: chain the optional using '?' to access member 'errorState' only for non-'nil' base values
    |                             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
215 |             XCTAssertFalse(viewModel.isProcessing, "Should stop processing on error")
216 |         }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:215:28: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isProcessing' of wrapped base type 'SuggestionViewModel'
213 |             // Then: Should handle error gracefully in UI
214 |             XCTAssertNotNil(viewModel.errorState, "Should set error state in view model")
215 |             XCTAssertFalse(viewModel.isProcessing, "Should stop processing on error")
    |                            |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isProcessing' of wrapped base type 'SuggestionViewModel'
    |                            |- note: chain the optional using '?' to access member 'isProcessing' only for non-'nil' base values
    |                            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
216 |         }
217 |         XCTFail("RED PHASE: Network error handling integration not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:225:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
223 | 
224 |         // When: Loading suggestions under degraded conditions
225 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
226 | 
227 |         // Then: Should show fallback UI with reduced functionality

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:228:23: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isDegraded' of wrapped base type 'SuggestionViewModel'
226 | 
227 |         // Then: Should show fallback UI with reduced functionality
228 |         XCTAssertTrue(viewModel.isDegraded, "Should indicate degraded service state")
    |                       |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'isDegraded' of wrapped base type 'SuggestionViewModel'
    |                       |- note: chain the optional using '?' to access member 'isDegraded' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
229 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should still provide basic suggestions")
230 |         XCTFail("RED PHASE: Service degradation handling not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:229:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
227 |         // Then: Should show fallback UI with reduced functionality
228 |         XCTAssertTrue(viewModel.isDegraded, "Should indicate degraded service state")
229 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should still provide basic suggestions")
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
230 |         XCTFail("RED PHASE: Service degradation handling not implemented")
231 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:240:19: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
238 | 
239 |         // When: Complete suggestion generation flow
240 |         try await viewModel.loadSuggestions(for: testContext)
    |                   |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'loadSuggestions' of wrapped base type 'SuggestionViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadSuggestions' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
241 | 
242 |         let totalTime = Date().timeIntervalSince(startTime)

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:263:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
261 | 
262 |         // Then: Should handle concurrent requests without conflicts
263 |         XCTAssertFalse(viewModel.currentSuggestions.isEmpty, "Should have processed concurrent requests")
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
264 |         XCTFail("RED PHASE: Concurrent request handling not implemented")
265 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:280:9: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
278 |         // When: Data flows through complete system
279 |         let decisionResponse = try await mockOrchestrator.makeDecision(decisionRequest)
280 |         viewModel.currentSuggestions = [decisionResponse]
    |         |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |         |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
281 | 
282 |         // Then: Should maintain data consistency throughout flow

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:283:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
281 | 
282 |         // Then: Should maintain data consistency throughout flow
283 |         XCTAssertEqual(viewModel.currentSuggestions.first?.context.acquisitionId, testContext.acquisitionId)
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
284 |         XCTAssertEqual(viewModel.currentSuggestions.first?.selectedAction.id, WorkflowAction.placeholder.id)
285 |         XCTFail("RED PHASE: Data flow consistency not implemented")

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:284:24: error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
282 |         // Then: Should maintain data consistency throughout flow
283 |         XCTAssertEqual(viewModel.currentSuggestions.first?.context.acquisitionId, testContext.acquisitionId)
284 |         XCTAssertEqual(viewModel.currentSuggestions.first?.selectedAction.id, WorkflowAction.placeholder.id)
    |                        |- error: value of optional type 'SuggestionViewModel?' must be unwrapped to refer to member 'currentSuggestions' of wrapped base type 'SuggestionViewModel'
    |                        |- note: chain the optional using '?' to access member 'currentSuggestions' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
285 |         XCTFail("RED PHASE: Data flow consistency not implemented")
286 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:407:14: error: 'let' property 'isCompliant' may not be initialized directly; use "self.init(...)" or "self = ..." instead
405 | extension ComplianceResult {
406 |     init(isCompliant: Bool, warnings: [String], shapeExplanations: [String: String], farReferences _: [FARReference]) {
407 |         self.isCompliant = isCompliant
    |              `- error: 'let' property 'isCompliant' may not be initialized directly; use "self.init(...)" or "self = ..." instead
408 |         self.warnings = warnings
409 |         self.shapeExplanations = shapeExplanations

/Users/J/aiko/Sources/Services/FARCompliance.swift:70:16: note: 'isCompliant' declared here
 68 | 
 69 | public struct ComplianceResult {
 70 |     public let isCompliant: Bool
    |                `- note: 'isCompliant' declared here
 71 |     public let score: Double // 0.0 to 1.0
 72 |     public let issues: [ComplianceIssue]

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:408:14: error: value of type 'ComplianceResult' has no member 'warnings'
406 |     init(isCompliant: Bool, warnings: [String], shapeExplanations: [String: String], farReferences _: [FARReference]) {
407 |         self.isCompliant = isCompliant
408 |         self.warnings = warnings
    |              `- error: value of type 'ComplianceResult' has no member 'warnings'
409 |         self.shapeExplanations = shapeExplanations
410 |     }

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:409:14: error: value of type 'ComplianceResult' has no member 'shapeExplanations'
407 |         self.isCompliant = isCompliant
408 |         self.warnings = warnings
409 |         self.shapeExplanations = shapeExplanations
    |              `- error: value of type 'ComplianceResult' has no member 'shapeExplanations'
410 |     }
411 | }
[28/35] Compiling AIKOTests AdaptiveFormUserExperienceTests.swift
/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:10:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
   8 |     // MARK: - Test Infrastructure
   9 | 
  10 |     var adaptiveService: AdaptiveFormPopulationService?
     |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
  11 |     var formIntelligenceAdapter: FormIntelligenceAdapter?
  12 |     var trustFramework: UserTrustFramework?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1158:51: error: cannot find type 'FormPopulationResult' in scope
1156 |     }
1157 | 
1158 |     private func simulateUserSatisfaction(result: FormPopulationResult) async -> Double {
     |                                                   `- error: cannot find type 'FormPopulationResult' in scope
1159 |         // Simulate user satisfaction based on result quality
1160 |         let baselineScore = 0.7

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1167:50: error: cannot find type 'FormPopulationResult' in scope
1165 |     }
1166 | 
1167 |     private func calculateFormAccuracy(result _: FormPopulationResult) async -> Double {
     |                                                  `- error: cannot find type 'FormPopulationResult' in scope
1168 |         // Simulate form accuracy calculation
1169 |         Double.random(in: 0.6 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1172:52: error: cannot find type 'FormPopulationResult' in scope
1170 |     }
1171 | 
1172 |     private func simulateUserModifications(result: FormPopulationResult) async -> Int {
     |                                                    `- error: cannot find type 'FormPopulationResult' in scope
1173 |         // Simulate number of user modifications based on confidence
1174 |         let modificationRate = 1.0 - result.overallConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1234:48: error: cannot find type 'ContextCategory' in scope
1232 |     }
1233 | 
1234 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
     |                                                `- error: cannot find type 'ContextCategory' in scope
1235 |         AcquisitionContext(
1236 |             category: category,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1430:147: error: cannot find type 'FormPopulationResult' in scope
1428 |     }
1429 | 
1430 |     func generateAdaptiveSuggestions(form: StandardizedTestForm, acquisition _: AcquisitionAggregate, userProfile _: UserProfile) async throws -> FormPopulationResult {
     |                                                                                                                                                   `- error: cannot find type 'FormPopulationResult' in scope
1431 |         // Generate adaptive suggestions in background
1432 |         FormPopulationResult(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1440:56: error: cannot find type 'FormPopulationResult' in scope
1438 |     }
1439 | 
1440 |     func compareWithUserChoices(adaptiveSuggestions _: FormPopulationResult, userChoices _: [String: String]) async -> ShadowModeResult {
     |                                                        `- error: cannot find type 'FormPopulationResult' in scope
1441 |         let accuracy = Double.random(in: 0.6 ... 0.9)
1442 |         let improvement = Double.random(in: 0.1 ... 0.3)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             |- error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
     |             `- note: add stubs for conformance
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: error: invalid redeclaration of 'MockAgenticOrchestrator'
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- error: invalid redeclaration of 'MockAgenticOrchestrator'
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1495:46: error: cannot find type 'FormPopulationResult' in scope
1493 | }
1494 | 
1495 | private func extractSuggestions(from result: FormPopulationResult) async -> [FormSuggestion] {
     |                                              `- error: cannot find type 'FormPopulationResult' in scope
1496 |     result.fields.compactMap { key, value in
1497 |         guard !value.isEmpty else { return nil }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1513:55: error: cannot find type 'FormPopulationResult' in scope
1511 | }
1512 | 
1513 | private func simulateUserFormCompletion(staticResult: FormPopulationResult) async -> [String: String] {
     |                                                       `- error: cannot find type 'FormPopulationResult' in scope
1514 |     // Simulate user completing form based on static suggestions
1515 |     var userChoices: [String: String] = [:]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1529:63: error: cannot find type 'FieldExplanation' in scope
1527 | }
1528 | 
1529 | private func simulateUserExplanationEvaluation(explanation _: FieldExplanation, userProfile _: UserProfile, expectedReasoning _: String) async -> Double {
     |                                                               `- error: cannot find type 'FieldExplanation' in scope
1530 |     // Simulate user rating explanation helpfulness
1531 |     Double.random(in: 0.6 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1534:57: error: cannot find type 'FieldExplanation' in scope
1532 | }
1533 | 
1534 | private func validateExplanationAccuracy(explanation _: FieldExplanation, actualReasoning _: String) async -> Double {
     |                                                         `- error: cannot find type 'FieldExplanation' in scope
1535 |     // Validate explanation matches actual system reasoning
1536 |     Double.random(in: 0.7 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:27:33: error: cannot find 'AcquisitionContextClassifier' in scope
  25 | 
  26 |         // Initialize system components
  27 |         let contextClassifier = AcquisitionContextClassifier()
     |                                 `- error: cannot find 'AcquisitionContextClassifier' in scope
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:28:30: error: cannot find 'FormFieldQLearningAgent' in scope
  26 |         // Initialize system components
  27 |         let contextClassifier = AcquisitionContextClassifier()
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
     |                              `- error: cannot find 'FormFieldQLearningAgent' in scope
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
  30 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:29:35: error: cannot find 'FormModificationTracker' in scope
  27 |         let contextClassifier = AcquisitionContextClassifier()
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
     |                                   `- error: cannot find 'FormModificationTracker' in scope
  30 |         let explanationEngine = ValueExplanationEngine()
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:30:33: error: cannot find 'ValueExplanationEngine' in scope
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
  30 |         let explanationEngine = ValueExplanationEngine()
     |                                 `- error: cannot find 'ValueExplanationEngine' in scope
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()
  32 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:31:32: error: cannot find 'AdaptiveFormMetricsCollector' in scope
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
  30 |         let explanationEngine = ValueExplanationEngine()
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()
     |                                `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
  32 | 
  33 |         adaptiveService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:33:27: error: cannot find 'AdaptiveFormPopulationService' in scope
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()
  32 | 
  33 |         adaptiveService = AdaptiveFormPopulationService(
     |                           `- error: cannot find 'AdaptiveFormPopulationService' in scope
  34 |             contextClassifier: contextClassifier,
  35 |             qLearningAgent: qLearningAgent,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:43:39: error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
  41 | 
  42 |         formIntelligenceAdapter = FormIntelligenceAdapter.liveValue
  43 |         await formIntelligenceAdapter.setAdaptiveService(adaptiveService)
     |                                       `- error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
  44 | 
  45 |         // Initialize trust framework

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:46:15: error: value of optional type 'UserTrustFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'UserTrustFramework'
  44 | 
  45 |         // Initialize trust framework
  46 |         await trustFramework.initialize()
     |               |- error: value of optional type 'UserTrustFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'UserTrustFramework'
     |               |- note: chain the optional using '?' to access member 'initialize' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
  47 |         await abTestingFramework.initialize()
  48 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:47:15: error: value of optional type 'ABTestingFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'ABTestingFramework'
  45 |         // Initialize trust framework
  46 |         await trustFramework.initialize()
  47 |         await abTestingFramework.initialize()
     |               |- error: value of optional type 'ABTestingFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'ABTestingFramework'
     |               |- note: chain the optional using '?' to access member 'initialize' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
  48 |     }
  49 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:78:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
  76 |                 "deliverySchedule": "",
  77 |             ],
  78 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
  79 |         )
  80 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:81:49: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
  79 |         )
  80 | 
  81 |         let itAcquisition = AcquisitionAggregate(
     |                                                 `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
  82 |             id: UUID(),
  83 |             title: "Enterprise Software Development Services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:82:13: error: missing argument for parameter 'managedObject' in call
  80 | 
  81 |         let itAcquisition = AcquisitionAggregate(
  82 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
  83 |             title: "Enterprise Software Development Services",
  84 |             requirements: "Comprehensive software development services including cloud computing, database design, network security, and cybersecurity implementation for IT infrastructure management.",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:133:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 131 |                 "performancePeriod": "",
 132 |             ],
 133 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 134 |         )
 135 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:136:52: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 134 |         )
 135 | 
 136 |         let mixedAcquisition = AcquisitionAggregate(
     |                                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 137 |             id: UUID(),
 138 |             title: "IT Services and Consulting",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:137:13: error: missing argument for parameter 'managedObject' in call
 135 | 
 136 |         let mixedAcquisition = AcquisitionAggregate(
 137 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 138 |             title: "IT Services and Consulting",
 139 |             requirements: "Need both software development and consulting services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:186:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 184 |                 "customTerms": "",
 185 |             ],
 186 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 187 |         )
 188 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:189:56: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 187 |         )
 188 | 
 189 |         let ambiguousAcquisition = AcquisitionAggregate(
     |                                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 190 |             id: UUID(),
 191 |             title: "General Services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:190:13: error: missing argument for parameter 'managedObject' in call
 188 | 
 189 |         let ambiguousAcquisition = AcquisitionAggregate(
 190 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 191 |             title: "General Services",
 192 |             requirements: "Various services needed",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:232:41: error: extra arguments at positions #1, #2, #3 in call
 230 |         }
 231 |         // Given: New user with no learning history
 232 |         let newUserProfile = UserProfile(id: UUID(), name: "New User", email: "new@example.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 233 | 
 234 |         let formData = FormData(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:232:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 230 |         }
 231 |         // Given: New user with no learning history
 232 |         let newUserProfile = UserProfile(id: UUID(), name: "New User", email: "new@example.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 233 | 
 234 |         let formData = FormData(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:241:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 239 |                 "evaluationMethod": "",
 240 |             ],
 241 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 242 |         )
 243 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:244:47: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 242 |         )
 243 | 
 244 |         let acquisition = AcquisitionAggregate(
     |                                               `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 245 |             id: UUID(),
 246 |             title: "IT Services Project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:245:13: error: missing argument for parameter 'managedObject' in call
 243 | 
 244 |         let acquisition = AcquisitionAggregate(
 245 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 246 |             title: "IT Services Project",
 247 |             requirements: "Software development services needed",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:298:83: error: value of type 'UserProfile' has no member 'id'
 296 |         // When: Run A/B test
 297 |         for user in testUsers {
 298 |             let isAdaptiveGroup = await abTestingFramework.assignUserToGroup(user.id)
     |                                                                                   `- error: value of type 'UserProfile' has no member 'id'
 299 | 
 300 |             for form in testForms {

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:306:25: error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 304 |                     let result = try await formIntelligenceAdapter.autoFillForm(
 305 |                         form.formNumber,
 306 |                         form,
     |                         `- error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 307 |                         form.associatedAcquisition
 308 |                     )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:311:38: error: value of type 'UserProfile' has no member 'id'
 309 | 
 310 |                     let testResult = await ABTestResult(
 311 |                         userId: user.id,
     |                                      `- error: value of type 'UserProfile' has no member 'id'
 312 |                         formId: form.formNumber,
 313 |                         isAdaptive: true,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:322:68: error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 320 |                     adaptiveResults.append(testResult)
 321 |                 } else {
 322 |                     let result = try await formIntelligenceAdapter.autoFillFormStatic(
     |                                                                    `- error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 323 |                         form.formNumber,
 324 |                         form,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:329:38: error: value of type 'UserProfile' has no member 'id'
 327 | 
 328 |                     let testResult = await ABTestResult(
 329 |                         userId: user.id,
     |                                      `- error: value of type 'UserProfile' has no member 'id'
 330 |                         formId: form.formNumber,
 331 |                         isAdaptive: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:382:30: error: value of type 'UserProfile' has no member 'id'
 380 |         for user in testUsers {
 381 |             let confidence = await trustFramework.measureUserConfidence(
 382 |                 userId: user.id,
     |                              `- error: value of type 'UserProfile' has no member 'id'
 383 |                 systemType: .staticBaseline,
 384 |                 interactionCount: 10

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:402:34: error: value of type 'UserProfile' has no member 'id'
 400 | 
 401 |                 let confidence = await trustFramework.measureUserConfidence(
 402 |                     userId: user.id,
     |                                  `- error: value of type 'UserProfile' has no member 'id'
 403 |                     systemType: .adaptive,
 404 |                     interactionCount: period * 3 // 3 interactions per day

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:443:35: error: extra arguments at positions #1, #2, #3 in call
 441 |         }
 442 |         // Given: User with established trust in adaptive system
 443 |         let testUser = UserProfile(id: UUID(), name: "Trust Test User", email: "trust@test.com")
     |                                   `- error: extra arguments at positions #1, #2, #3 in call
 444 | 
 445 |         // Build initial trust

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:443:35: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 441 |         }
 442 |         // Given: User with established trust in adaptive system
 443 |         let testUser = UserProfile(id: UUID(), name: "Trust Test User", email: "trust@test.com")
     |                                   `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 444 | 
 445 |         // Build initial trust

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:512:43: error: value of type 'FormIntelligenceAdapter' has no member 'setConfidenceThreshold'
 510 |         // When: Test each confidence threshold
 511 |         for threshold in confidenceThresholds {
 512 |             await formIntelligenceAdapter.setConfidenceThreshold(threshold)
     |                                           `- error: value of type 'FormIntelligenceAdapter' has no member 'setConfidenceThreshold'
 513 | 
 514 |             var totalSuggestions = 0

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:522:25: error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 520 |                     let result = try await formIntelligenceAdapter.autoFillForm(
 521 |                         form.formNumber,
 522 |                         form,
     |                         `- error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 523 |                         form.associatedAcquisition
 524 |                     )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:600:70: error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 598 |             for form in testForms {
 599 |                 // User sees static suggestions
 600 |                 let staticResult = try await formIntelligenceAdapter.autoFillFormStatic(
     |                                                                      `- error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 601 |                     form.formNumber,
 602 |                     form,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:709:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 707 |                 "deliverySchedule": "",
 708 |             ],
 709 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 710 |         )
 711 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:712:47: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 710 |         )
 711 | 
 712 |         let acquisition = AcquisitionAggregate(
     |                                               `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 713 |             id: UUID(),
 714 |             title: "IT Software Development",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:713:13: error: missing argument for parameter 'managedObject' in call
 711 | 
 712 |         let acquisition = AcquisitionAggregate(
 713 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 714 |             title: "IT Software Development",
 715 |             requirements: "Need software development with cloud computing and database management",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:725:23: error: cannot find 'ContextFeatures' in scope
 723 |             category: .informationTechnology,
 724 |             confidence: 0.85,
 725 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
 726 |                 estimatedValue: 300_000,
 727 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:722:41: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 720 |         )
 721 | 
 722 |         let context = AcquisitionContext(
     |                                         `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 723 |             category: .informationTechnology,
 724 |             confidence: 0.85,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:723:13: error: missing argument for parameter 'from' in call
 721 | 
 722 |         let context = AcquisitionContext(
 723 |             category: .informationTechnology,
     |             `- error: missing argument for parameter 'from' in call
 724 |             confidence: 0.85,
 725 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:723:24: error: cannot infer contextual base in reference to member 'informationTechnology'
 721 | 
 722 |         let context = AcquisitionContext(
 723 |             category: .informationTechnology,
     |                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
 724 |             confidence: 0.85,
 725 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:733:23: error: cannot infer contextual base in reference to member 'normal'
 731 |             ),
 732 |             acquisitionValue: 300_000,
 733 |             urgency: .normal,
     |                       `- error: cannot infer contextual base in reference to member 'normal'
 734 |             complexity: .high,
 735 |             acquisitionId: acquisition.id

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:734:26: error: cannot infer contextual base in reference to member 'high'
 732 |             acquisitionValue: 300_000,
 733 |             urgency: .normal,
 734 |             complexity: .high,
     |                          `- error: cannot infer contextual base in reference to member 'high'
 735 |             acquisitionId: acquisition.id
 736 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:855:59: error: type 'Equatable' has no member 'green'
 853 |             switch confidenceLevel {
 854 |             case 0.8...:
 855 |                 XCTAssertEqual(displayInfo.displayColor, .green,
     |                                                           `- error: type 'Equatable' has no member 'green'
 856 |                                "High confidence should display in green")
 857 |                 XCTAssertEqual(displayInfo.displayText, "High Confidence",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:861:59: error: type 'Equatable' has no member 'orange'
 859 | 
 860 |             case 0.6 ..< 0.8:
 861 |                 XCTAssertEqual(displayInfo.displayColor, .orange,
     |                                                           `- error: type 'Equatable' has no member 'orange'
 862 |                                "Medium confidence should display in orange")
 863 |                 XCTAssertEqual(displayInfo.displayText, "Medium Confidence",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:867:59: error: type 'Equatable' has no member 'red'
 865 | 
 866 |             default:
 867 |                 XCTAssertEqual(displayInfo.displayColor, .red,
     |                                                           `- error: type 'Equatable' has no member 'red'
 868 |                                "Low confidence should display in red")
 869 |                 XCTAssertEqual(displayInfo.displayText, "Low Confidence",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:890:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 888 |             revision: "2024-01",
 889 |             fields: ["evaluationMethod": ""],
 890 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 891 |         )
 892 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:896:23: error: cannot find 'ContextFeatures' in scope
 894 |             category: .informationTechnology,
 895 |             confidence: 0.7,
 896 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
 897 |                 estimatedValue: 150_000,
 898 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:893:41: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 891 |         )
 892 | 
 893 |         let context = AcquisitionContext(
     |                                         `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 894 |             category: .informationTechnology,
 895 |             confidence: 0.7,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:894:13: error: missing argument for parameter 'from' in call
 892 | 
 893 |         let context = AcquisitionContext(
 894 |             category: .informationTechnology,
     |             `- error: missing argument for parameter 'from' in call
 895 |             confidence: 0.7,
 896 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:894:24: error: cannot infer contextual base in reference to member 'informationTechnology'
 892 | 
 893 |         let context = AcquisitionContext(
 894 |             category: .informationTechnology,
     |                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
 895 |             confidence: 0.7,
 896 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:904:23: error: cannot infer contextual base in reference to member 'normal'
 902 |             ),
 903 |             acquisitionValue: 150_000,
 904 |             urgency: .normal,
     |                       `- error: cannot infer contextual base in reference to member 'normal'
 905 |             complexity: .medium,
 906 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:905:26: error: cannot infer contextual base in reference to member 'medium'
 903 |             acquisitionValue: 150_000,
 904 |             urgency: .normal,
 905 |             complexity: .medium,
     |                          `- error: cannot infer contextual base in reference to member 'medium'
 906 |             acquisitionId: UUID()
 907 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:934:49: error: cannot infer key path type from context; consider explicitly specifying a root type
 932 | 
 933 |         // Should provide distinct options
 934 |         let uniqueValues = Set(alternatives.map(\.suggestedValue))
     |                                                 `- error: cannot infer key path type from context; consider explicitly specifying a root type
 935 |         XCTAssertEqual(uniqueValues.count, alternatives.count,
 936 |                        "All alternatives should be distinct")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:948:38: error: extra arguments at positions #1, #2, #3 in call
 946 |         }
 947 |         // Given: User with adaptive learning enabled
 948 |         let userProfile = UserProfile(id: UUID(), name: "Control Test User", email: "control@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
 949 | 
 950 |         // Verify initial enabled state

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:948:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 946 |         }
 947 |         // Given: User with adaptive learning enabled
 948 |         let userProfile = UserProfile(id: UUID(), name: "Control Test User", email: "control@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 949 | 
 950 |         // Verify initial enabled state

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:990:38: error: extra arguments at positions #1, #2, #3 in call
 988 |         }
 989 |         // Given: User with learning data
 990 |         let userProfile = UserProfile(id: UUID(), name: "Retention Test User", email: "retention@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
 991 | 
 992 |         // Generate learning data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:990:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 988 |         }
 989 |         // Given: User with learning data
 990 |         let userProfile = UserProfile(id: UUID(), name: "Retention Test User", email: "retention@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 991 | 
 992 |         // Generate learning data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1032:38: error: extra arguments at positions #1, #2, #3 in call
1030 |         }
1031 |         // Given: User with extensive learning data
1032 |         let userProfile = UserProfile(id: UUID(), name: "Deletion Test User", email: "deletion@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
1033 | 
1034 |         await generateUserLearningData(for: userProfile.id, interactions: 200)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1032:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1030 |         }
1031 |         // Given: User with extensive learning data
1032 |         let userProfile = UserProfile(id: UUID(), name: "Deletion Test User", email: "deletion@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1033 | 
1034 |         await generateUserLearningData(for: userProfile.id, interactions: 200)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1063:38: error: extra arguments at positions #1, #2, #3 in call
1061 |         }
1062 |         // Given: User with diverse learning data
1063 |         let userProfile = UserProfile(id: UUID(), name: "Export Test User", email: "export@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
1064 | 
1065 |         await generateDiverseUserLearningData(for: userProfile.id)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1063:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1061 |         }
1062 |         // Given: User with diverse learning data
1063 |         let userProfile = UserProfile(id: UUID(), name: "Export Test User", email: "export@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1064 | 
1065 |         await generateDiverseUserLearningData(for: userProfile.id)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1075:56: error: cannot infer contextual base in reference to member 'utf8'
1073 | 
1074 |         // Parse exported JSON
1075 |         guard let jsonData = exportedData.data(using: .utf8) else {
     |                                                        `- error: cannot infer contextual base in reference to member 'utf8'
1076 |             XCTFail("Failed to convert exported data to UTF-8")
1077 |             return

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1109:24: error: extra arguments at positions #1, #2, #3 in call
1107 |     private func createTestUserCohorts(count: Int) -> [UserProfile] {
1108 |         (1 ... count).map { i in
1109 |             UserProfile(
     |                        `- error: extra arguments at positions #1, #2, #3 in call
1110 |                 id: UUID(),
1111 |                 name: "Test User \(i)",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1109:24: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1107 |     private func createTestUserCohorts(count: Int) -> [UserProfile] {
1108 |         (1 ... count).map { i in
1109 |             UserProfile(
     |                        `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1110 |                 id: UUID(),
1111 |                 name: "Test User \(i)",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1135:36: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1133 |         let context = contexts[index % contexts.count]
1134 | 
1135 |         return AcquisitionAggregate(
     |                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1136 |             id: UUID(),
1137 |             title: "\(context) Project \(index)",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1136:13: error: missing argument for parameter 'managedObject' in call
1134 | 
1135 |         return AcquisitionAggregate(
1136 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
1137 |             title: "\(context) Project \(index)",
1138 |             requirements: "Test requirements for \(context.lowercased()) project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1154:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
1152 |                 "evaluationMethod": "",
1153 |             ],
1154 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
1155 |         )
1156 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1186:41: error: extra arguments at positions #1, #2, #3 in call
1184 |                 formData2: createConstructionFormData(),
1185 |                 acquisition: createMixedAcquisition(),
1186 |                 userProfile: UserProfile(id: UUID(), name: "Confusion User", email: "confusion@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
1187 |             ),
1188 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1186:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1184 |                 formData2: createConstructionFormData(),
1185 |                 acquisition: createMixedAcquisition(),
1186 |                 userProfile: UserProfile(id: UUID(), name: "Confusion User", email: "confusion@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1187 |             ),
1188 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1196:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1194 |             revision: "2024-01",
1195 |             fields: ["serviceType": "Software Development"],
1196 |             metadata: ["context_hint": "IT"]
     |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1197 |         )
1198 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1205:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1203 |             revision: "2024-01",
1204 |             fields: ["serviceType": "Building Construction"],
1205 |             metadata: ["context_hint": "Construction"]
     |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1206 |         )
1207 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1210:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1208 | 
1209 |     private func createMixedAcquisition() -> AcquisitionAggregate {
1210 |         AcquisitionAggregate(
     |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1211 |             id: UUID(),
1212 |             title: "Smart Building IT Infrastructure",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1211:13: error: missing argument for parameter 'managedObject' in call
1209 |     private func createMixedAcquisition() -> AcquisitionAggregate {
1210 |         AcquisitionAggregate(
1211 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
1212 |             title: "Smart Building IT Infrastructure",
1213 |             requirements: "Need both software systems and building construction",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1226:45: error: cannot infer contextual base in reference to member 'informationTechnology'
1224 |                 fieldId: "paymentTerms",
1225 |                 suggestedValue: "NET-30",
1226 |                 context: createTestContext(.informationTechnology),
     |                                             `- error: cannot infer contextual base in reference to member 'informationTechnology'
1227 |                 userProfile: UserProfile(id: UUID(), name: "Test User", email: "test@example.com"),
1228 |                 expectedReasoning: "Standard IT payment terms",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1227:41: error: extra arguments at positions #1, #2, #3 in call
1225 |                 suggestedValue: "NET-30",
1226 |                 context: createTestContext(.informationTechnology),
1227 |                 userProfile: UserProfile(id: UUID(), name: "Test User", email: "test@example.com"),
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
1228 |                 expectedReasoning: "Standard IT payment terms",
1229 |                 actualSystemReasoning: "Based on IT context and user history"

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1227:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1225 |                 suggestedValue: "NET-30",
1226 |                 context: createTestContext(.informationTechnology),
1227 |                 userProfile: UserProfile(id: UUID(), name: "Test User", email: "test@example.com"),
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1228 |                 expectedReasoning: "Standard IT payment terms",
1229 |                 actualSystemReasoning: "Based on IT context and user history"

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1238:23: error: cannot find 'ContextFeatures' in scope
1236 |             category: category,
1237 |             confidence: 0.8,
1238 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
1239 |                 estimatedValue: 200_000,
1240 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1235:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1233 | 
1234 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
1235 |         AcquisitionContext(
     |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1236 |             category: category,
1237 |             confidence: 0.8,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1236:13: error: missing argument for parameter 'from' in call
1234 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
1235 |         AcquisitionContext(
1236 |             category: category,
     |             `- error: missing argument for parameter 'from' in call
1237 |             confidence: 0.8,
1238 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1246:23: error: cannot infer contextual base in reference to member 'normal'
1244 |             ),
1245 |             acquisitionValue: 200_000,
1246 |             urgency: .normal,
     |                       `- error: cannot infer contextual base in reference to member 'normal'
1247 |             complexity: .medium,
1248 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1247:26: error: cannot infer contextual base in reference to member 'medium'
1245 |             acquisitionValue: 200_000,
1246 |             urgency: .normal,
1247 |             complexity: .medium,
     |                          `- error: cannot infer contextual base in reference to member 'medium'
1248 |             acquisitionId: UUID()
1249 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1497:44: error: 'nil' requires a contextual type
1495 | private func extractSuggestions(from result: FormPopulationResult) async -> [FormSuggestion] {
1496 |     result.fields.compactMap { key, value in
1497 |         guard !value.isEmpty else { return nil }
     |                                            `- error: 'nil' requires a contextual type
1498 |         return FormSuggestion(
1499 |             fieldId: key,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:11:14: error: cannot find type 'FormFieldQLearningAgent' in scope
  9 |     // MARK: - Test Infrastructure
 10 | 
 11 |     var sut: FormFieldQLearningAgent?
    |              `- error: cannot find type 'FormFieldQLearningAgent' in scope
 12 |     var mockCoreDataActor: MockCoreDataActor?
 13 |     var testScheduler: TestScheduler?

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:421:10: error: cannot find type 'QLearningState' in scope
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
421 |     ) -> QLearningState {
    |          `- error: cannot find type 'QLearningState' in scope
422 |         QLearningState(
423 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:417:20: error: cannot find type 'FieldType' in scope
415 | 
416 |     private func createTestQLearningState(
417 |         fieldType: FieldType,
    |                    `- error: cannot find type 'FieldType' in scope
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:418:18: error: cannot find type 'ContextCategory' in scope
416 |     private func createTestQLearningState(
417 |         fieldType: FieldType,
418 |         context: ContextCategory,
    |                  `- error: cannot find type 'ContextCategory' in scope
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:419:22: error: cannot find type 'UserSegment' in scope
417 |         fieldType: FieldType,
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,
    |                      `- error: cannot find type 'UserSegment' in scope
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
421 |     ) -> QLearningState {

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:420:26: error: cannot find type 'TemporalContext' in scope
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                          `- error: cannot find type 'TemporalContext' in scope
421 |     ) -> QLearningState {
422 |         QLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:430:82: error: cannot find type 'QLearningAction' in scope
428 |     }
429 | 
430 |     private func createTestQLearningAction(value: String, confidence: Double) -> QLearningAction {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
431 |         QLearningAction(
432 |             suggestedValue: value,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:437:56: error: cannot find type 'QLearningState' in scope
435 |     }
436 | 
437 |     private func createITContextStates(count: Int) -> [QLearningState] {
    |                                                        `- error: cannot find type 'QLearningState' in scope
438 |         (1 ... count).map { i in
439 |             createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:452:57: error: cannot find type 'QLearningAction' in scope
450 |     }
451 | 
452 |     private func createITContextActions(count: Int) -> [QLearningAction] {
    |                                                         `- error: cannot find type 'QLearningAction' in scope
453 |         let itValues = ["Cloud Services", "Software License", "IT Support", "Network Equipment", "Cybersecurity"]
454 |         return (1 ... count).map { i in

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:462:66: error: cannot find type 'QLearningState' in scope
460 |     }
461 | 
462 |     private func createConstructionContextStates(count: Int) -> [QLearningState] {
    |                                                                  `- error: cannot find type 'QLearningState' in scope
463 |         (1 ... count).map { i in
464 |             createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:477:67: error: cannot find type 'QLearningAction' in scope
475 |     }
476 | 
477 |     private func createConstructionContextActions(count: Int) -> [QLearningAction] {
    |                                                                   `- error: cannot find type 'QLearningAction' in scope
478 |         let constructionValues = ["Performance Bond", "Prevailing Wage", "Safety Requirements", "Building Materials", "Contractor Services"]
479 |         return (1 ... count).map { i in

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:507:55: error: cannot find type 'QLearningState' in scope
505 |     }
506 | 
507 |     private func calculateContextPerformance(states: [QLearningState], actions: [QLearningAction]) async -> Double {
    |                                                       `- error: cannot find type 'QLearningState' in scope
508 |         var totalQValue: Double = 0
509 |         var count = 0

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:507:82: error: cannot find type 'QLearningAction' in scope
505 |     }
506 | 
507 |     private func calculateContextPerformance(states: [QLearningState], actions: [QLearningAction]) async -> Double {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
508 |         var totalQValue: Double = 0
509 |         var count = 0

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:526:32: error: cannot find type 'CoreDataActorProtocol' in scope
524 | 
525 | /// Mock Core Data actor for testing
526 | final class MockCoreDataActor: CoreDataActorProtocol {
    |                                `- error: cannot find type 'CoreDataActorProtocol' in scope
527 |     private var storage: [String: Any] = [:]
528 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:568:16: error: cannot find type 'QLearningState' in scope
566 | /// Q-Learning experience for replay buffer testing
567 | struct QLearningExperience {
568 |     let state: QLearningState
    |                `- error: cannot find type 'QLearningState' in scope
569 |     let action: QLearningAction
570 |     let reward: Double

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:569:17: error: cannot find type 'QLearningAction' in scope
567 | struct QLearningExperience {
568 |     let state: QLearningState
569 |     let action: QLearningAction
    |                 `- error: cannot find type 'QLearningAction' in scope
570 |     let reward: Double
571 |     let nextState: QLearningState

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:571:20: error: cannot find type 'QLearningState' in scope
569 |     let action: QLearningAction
570 |     let reward: Double
571 |     let nextState: QLearningState
    |                    `- error: cannot find type 'QLearningState' in scope
572 | }
573 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:576:11: error: cannot find type 'FieldType' in scope
574 | // MARK: - Extensions for Testing
575 | 
576 | extension FieldType: CaseIterable {
    |           `- error: cannot find type 'FieldType' in scope
577 |     public static let allCases: [FieldType] = [.textField, .dropdownField, .numberField, .dateField]
578 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:580:11: error: cannot find type 'ContextCategory' in scope
578 | }
579 | 
580 | extension ContextCategory: CaseIterable {
    |           `- error: cannot find type 'ContextCategory' in scope
581 |     public static let allCases: [ContextCategory] = [.informationTechnology, .construction, .professionalServices, .general]
582 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:584:11: error: cannot find type 'UserSegment' in scope
582 | }
583 | 
584 | extension UserSegment: CaseIterable {
    |           `- error: cannot find type 'UserSegment' in scope
585 |     public static let allCases: [UserSegment] = [.novice, .intermediate, .expert]
586 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:23:15: error: cannot find 'FormFieldQLearningAgent' in scope
 21 | 
 22 |         // Create system under test
 23 |         sut = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
    |               `- error: cannot find 'FormFieldQLearningAgent' in scope
 24 | 
 25 |         // Wait for actor initialization

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:47:65: error: cannot infer contextual base in reference to member 'textField'
 45 |         }
 46 |         // Given: Initial state and action
 47 |         let initialState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                 `- error: cannot infer contextual base in reference to member 'textField'
 48 |         let testAction = createTestQLearningAction(value: "NET-30", confidence: 0.8)
 49 |         let reward = 1.0 // User accepted suggestion

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:47:86: error: cannot infer contextual base in reference to member 'informationTechnology'
 45 |         }
 46 |         // Given: Initial state and action
 47 |         let initialState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                      `- error: cannot infer contextual base in reference to member 'informationTechnology'
 48 |         let testAction = createTestQLearningAction(value: "NET-30", confidence: 0.8)
 49 |         let reward = 1.0 // User accepted suggestion

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:69:58: error: cannot infer contextual base in reference to member 'dropdownField'
 67 |         }
 68 |         // Given: Known Q-value and reward
 69 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                          `- error: cannot infer contextual base in reference to member 'dropdownField'
 70 |         let action = createTestQLearningAction(value: "Performance Bond Required", confidence: 0.9)
 71 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:69:83: error: cannot infer contextual base in reference to member 'construction'
 67 |         }
 68 |         // Given: Known Q-value and reward
 69 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'construction'
 70 |         let action = createTestQLearningAction(value: "Performance Bond Required", confidence: 0.9)
 71 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:96:59: error: cannot infer contextual base in reference to member 'textField'
 94 |         }
 95 |         // Given: Multi-step scenario with future rewards
 96 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:96:80: error: cannot infer contextual base in reference to member 'informationTechnology'
 94 |         }
 95 |         // Given: Multi-step scenario with future rewards
 96 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:99:59: error: cannot infer contextual base in reference to member 'textField'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 
 99 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
100 |         let action2 = createTestQLearningAction(value: "Annual Subscription", confidence: 0.8)
101 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:99:80: error: cannot infer contextual base in reference to member 'informationTechnology'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 
 99 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
100 |         let action2 = createTestQLearningAction(value: "Annual Subscription", confidence: 0.8)
101 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:178:60: error: cannot infer contextual base in reference to member 'textField'
176 |         }
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                            `- error: cannot infer contextual base in reference to member 'textField'
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
180 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:178:81: error: cannot infer contextual base in reference to member 'informationTechnology'
176 |         }
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                 `- error: cannot infer contextual base in reference to member 'informationTechnology'
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
180 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:179:70: error: cannot infer contextual base in reference to member 'textField'
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                                      `- error: cannot infer contextual base in reference to member 'textField'
180 | 
181 |         let itAction = createTestQLearningAction(value: "Cloud Services", confidence: 0.9)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:179:91: error: cannot infer contextual base in reference to member 'construction'
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                                                           `- error: cannot infer contextual base in reference to member 'construction'
180 | 
181 |         let itAction = createTestQLearningAction(value: "Cloud Services", confidence: 0.9)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:253:58: error: cannot infer contextual base in reference to member 'textField'
251 |         }
252 |         // Given: Known optimal action
253 |         let state = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                          `- error: cannot infer contextual base in reference to member 'textField'
254 |         let optimalAction = createTestQLearningAction(value: "Optimal Choice", confidence: 1.0)
255 |         let suboptimalAction = createTestQLearningAction(value: "Poor Choice", confidence: 0.3)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:253:79: error: cannot infer contextual base in reference to member 'informationTechnology'
251 |         }
252 |         // Given: Known optimal action
253 |         let state = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                               `- error: cannot infer contextual base in reference to member 'informationTechnology'
254 |         let optimalAction = createTestQLearningAction(value: "Optimal Choice", confidence: 1.0)
255 |         let suboptimalAction = createTestQLearningAction(value: "Poor Choice", confidence: 0.3)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:292:58: error: cannot infer contextual base in reference to member 'dropdownField'
290 |         }
291 |         // Given: State with multiple visits
292 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                          `- error: cannot infer contextual base in reference to member 'dropdownField'
293 |         let action = createTestQLearningAction(value: "Test Value", confidence: 0.7)
294 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:292:83: error: cannot infer contextual base in reference to member 'construction'
290 |         }
291 |         // Given: State with multiple visits
292 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'construction'
293 |         let action = createTestQLearningAction(value: "Test Value", confidence: 0.7)
294 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:321:69: error: cannot infer contextual base in reference to member 'textField'
319 |         }
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                     `- error: cannot infer contextual base in reference to member 'textField'
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:321:90: error: cannot infer contextual base in reference to member 'informationTechnology'
319 |         }
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                          `- error: cannot infer contextual base in reference to member 'informationTechnology'
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:322:61: error: cannot infer contextual base in reference to member 'textField'
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                             `- error: cannot infer contextual base in reference to member 'textField'
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)
324 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:322:82: error: cannot infer contextual base in reference to member 'construction'
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                                                  `- error: cannot infer contextual base in reference to member 'construction'
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)
324 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:344:59: error: cannot infer contextual base in reference to member 'textField'
342 |     func testStateHashingConsistency() async throws {
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
346 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:344:80: error: cannot infer contextual base in reference to member 'informationTechnology'
342 |     func testStateHashingConsistency() async throws {
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
346 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:345:59: error: cannot infer contextual base in reference to member 'textField'
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
346 | 
347 |         // When: Generate cache keys

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:345:80: error: cannot infer contextual base in reference to member 'informationTechnology'
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
346 | 
347 |         // When: Generate cache keys

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:370:34: error: cannot find 'TemporalContext' in scope
368 |                 context: .general,
369 |                 userSegment: .novice,
370 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: (i % 7) + 1, isWeekend: false)
    |                                  `- error: cannot find 'TemporalContext' in scope
371 |             )
372 |             let action = createTestQLearningAction(value: "Value \(i)", confidence: 0.5)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:367:29: error: cannot infer contextual base in reference to member 'textField'
365 |         for i in 1 ... (maxCapacity + 1000) {
366 |             let state = createTestQLearningState(
367 |                 fieldType: .textField,
    |                             `- error: cannot infer contextual base in reference to member 'textField'
368 |                 context: .general,
369 |                 userSegment: .novice,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:368:27: error: cannot infer contextual base in reference to member 'general'
366 |             let state = createTestQLearningState(
367 |                 fieldType: .textField,
368 |                 context: .general,
    |                           `- error: cannot infer contextual base in reference to member 'general'
369 |                 userSegment: .novice,
370 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: (i % 7) + 1, isWeekend: false)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:369:31: error: cannot infer contextual base in reference to member 'novice'
367 |                 fieldType: .textField,
368 |                 context: .general,
369 |                 userSegment: .novice,
    |                               `- error: cannot infer contextual base in reference to member 'novice'
370 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: (i % 7) + 1, isWeekend: false)
371 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:400:34: error: cannot find 'TemporalContext' in scope
398 |                 context: .general,
399 |                 userSegment: .novice,
400 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: 1, isWeekend: false)
    |                                  `- error: cannot find 'TemporalContext' in scope
401 |             )
402 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:397:29: error: cannot infer contextual base in reference to member 'textField'
395 |         for i in 1 ... (cacheCapacity + 100) {
396 |             let state = createTestQLearningState(
397 |                 fieldType: .textField,
    |                             `- error: cannot infer contextual base in reference to member 'textField'
398 |                 context: .general,
399 |                 userSegment: .novice,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:398:27: error: cannot infer contextual base in reference to member 'general'
396 |             let state = createTestQLearningState(
397 |                 fieldType: .textField,
398 |                 context: .general,
    |                           `- error: cannot infer contextual base in reference to member 'general'
399 |                 userSegment: .novice,
400 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: 1, isWeekend: false)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:399:31: error: cannot infer contextual base in reference to member 'novice'
397 |                 fieldType: .textField,
398 |                 context: .general,
399 |                 userSegment: .novice,
    |                               `- error: cannot infer contextual base in reference to member 'novice'
400 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: 1, isWeekend: false)
401 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:491:32: error: cannot find 'FieldType' in scope
489 |             QLearningExperience(
490 |                 state: createTestQLearningState(
491 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
    |                                `- error: cannot find 'FieldType' in scope
492 |                     context: ContextCategory.allCases.randomElement() ?? .general
493 |                 ),

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:492:30: error: cannot find 'ContextCategory' in scope
490 |                 state: createTestQLearningState(
491 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
492 |                     context: ContextCategory.allCases.randomElement() ?? .general
    |                              `- error: cannot find 'ContextCategory' in scope
493 |                 ),
494 |                 action: createTestQLearningAction(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:500:32: error: cannot find 'FieldType' in scope
498 |                 reward: Double.random(in: -1.0 ... 1.0),
499 |                 nextState: createTestQLearningState(
500 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
    |                                `- error: cannot find 'FieldType' in scope
501 |                     context: ContextCategory.allCases.randomElement() ?? .general
502 |                 )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:501:30: error: cannot find 'ContextCategory' in scope
499 |                 nextState: createTestQLearningState(
500 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
501 |                     context: ContextCategory.allCases.randomElement() ?? .general
    |                              `- error: cannot find 'ContextCategory' in scope
502 |                 )
503 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:488:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
486 | 
487 |     private func createRandomExperiences(count: Int) -> [QLearningExperience] {
488 |         (1 ... count).map { i in
    |         `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
489 |             QLearningExperience(
490 |                 state: createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:519:17: error: cannot find 'isEmpty' in scope
517 |         }
518 | 
519 |         return !isEmpty ? totalQValue / Double(count) : 0.0
    |                 `- error: cannot find 'isEmpty' in scope
520 |     }
521 | }

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:28:69: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 26 |             return
 27 |         }
 28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 29 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
 30 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:29:74: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 27 |         }
 28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
 29 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
    |                                                                          `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 30 |         let explanationEngine = ValueExplanationEngine()
 31 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:32:35: error: ambiguous use of 'init()'
 30 |         let explanationEngine = ValueExplanationEngine()
 31 |         let metricsCollector = AdaptiveFormMetricsCollector()
 32 |         let agenticOrchestrator = MockAgenticOrchestrator()
    |                                   `- error: ambiguous use of 'init()'
 33 | 
 34 |         let adaptiveFormService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate 
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate 
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate 
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate 
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:48:44: error: extra arguments at positions #1, #4, #5, #6, #7 in call
 46 |     func testAcquisitionContextClassifier_canClassifyContext() async throws {
 47 |         let classifier = AcquisitionContextClassifier()
 48 |         let testData = AcquisitionAggregate(
    |                                            `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
 49 |             id: UUID(),
 50 |             title: "IT Services Contract",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:49:23: error: missing argument for parameter 'description' in call
 47 |         let classifier = AcquisitionContextClassifier()
 48 |         let testData = AcquisitionAggregate(
 49 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
 50 |             title: "IT Services Contract",
 51 |             requirements: "Software development with cloud computing. We need cloud hosting and database management services.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:51:27: error: cannot convert value of type 'String' to expected argument type '[String]'
 49 |             id: UUID(),
 50 |             title: "IT Services Contract",
 51 |             requirements: "Software development with cloud computing. We need cloud hosting and database management services.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
 52 |             projectDescription: "Software development with cloud computing",
 53 |             estimatedValue: 100_000,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:58:43: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 56 |         )
 57 | 
 58 |         let result = try await classifier.classifyAcquisition(testData)
    |                                           `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 59 | 
 60 |         XCTAssertEqual(result.category, .informationTechnology)

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:60:42: error: type 'Equatable' has no member 'informationTechnology'
 58 |         let result = try await classifier.classifyAcquisition(testData)
 59 | 
 60 |         XCTAssertEqual(result.category, .informationTechnology)
    |                                          `- error: type 'Equatable' has no member 'informationTechnology'
 61 |         XCTAssertGreaterThan(result.confidence, 0.5)
 62 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:65:69: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 63 | 
 64 |     func testFormFieldQLearningAgent_canPredictFieldValue() async throws {
 65 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 66 | 
 67 |         // Create test state

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:72:30: error: value of optional type 'TemporalContext?' must be unwrapped to a value of type 'TemporalContext'
 70 |             contextCategory: .informationTechnology,
 71 |             userSegment: .intermediate,
 72 |             temporalContext: TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                              |- error: value of optional type 'TemporalContext?' must be unwrapped to a value of type 'TemporalContext'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 73 |         )
 74 | 

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:72:45: error: extra arguments at positions #1, #2, #3 in call
 70 |             contextCategory: .informationTechnology,
 71 |             userSegment: .intermediate,
 72 |             temporalContext: TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                                             `- error: extra arguments at positions #1, #2, #3 in call
 73 |         )
 74 | 

AppCore.TemporalContext.init:2:19: note: 'init(rawValue:)' declared here
1 | enum TemporalContext {
2 | @inlinable public init?(rawValue: String)}
  |                   `- note: 'init(rawValue:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:72:46: error: missing argument for parameter 'rawValue' in call
 70 |             contextCategory: .informationTechnology,
 71 |             userSegment: .intermediate,
 72 |             temporalContext: TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                                              `- error: missing argument for parameter 'rawValue' in call
 73 |         )
 74 | 

AppCore.TemporalContext.init:2:19: note: 'init(rawValue:)' declared here
1 | enum TemporalContext {
2 | @inlinable public init?(rawValue: String)}
  |                   `- note: 'init(rawValue:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:83:62: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 81 | 
 82 |     func testFormModificationTracker_canTrackModifications() async throws {
 83 |         let tracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
    |                                                              `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 84 | 
 85 |         // Test basic modification tracking

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:129:38: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
127 |         let engine = ValueExplanationEngine()
128 | 
129 |         let userProfile = UserProfile(
    |                                      `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
130 |             id: UUID(),
131 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:129:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
127 |         let engine = ValueExplanationEngine()
128 | 
129 |         let userProfile = UserProfile(
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
130 |             id: UUID(),
131 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:144:31: error: 'nil' requires a contextual type
142 |             defaultPaymentAddress: Address(),
143 |             defaultDeliveryAddress: Address(),
144 |             profileImageData: nil,
    |                               `- error: 'nil' requires a contextual type
145 |             organizationLogoData: nil,
146 |             website: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:145:35: error: 'nil' requires a contextual type
143 |             defaultDeliveryAddress: Address(),
144 |             profileImageData: nil,
145 |             organizationLogoData: nil,
    |                                   `- error: 'nil' requires a contextual type
146 |             website: "",
147 |             linkedIn: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:161:53: error: extra arguments at positions #1, #2, #3, #4, #5 in call
159 |         let confidence = 0.85
160 | 
161 |         let explanation = engine.generateExplanation(
    |                                                     `- error: extra arguments at positions #1, #2, #3, #4, #5 in call
162 |             fieldName: fieldName,
163 |             suggestedValue: suggestedValue,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/ValueExplanationEngine.swift:39:17: note: 'generateExplanation(for:)' declared here
 37 | 
 38 |     /// Generate explanation for a field prediction
 39 |     public func generateExplanation(for prediction: FieldPrediction) -> FieldExplanation {
    |                 `- note: 'generateExplanation(for:)' declared here
 40 |         let explanation = createExplanation(
 41 |             fieldId: prediction.fieldId,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:162:13: error: missing argument for parameter 'for' in call
160 | 
161 |         let explanation = engine.generateExplanation(
162 |             fieldName: fieldName,
    |             `- error: missing argument for parameter 'for' in call
163 |             suggestedValue: suggestedValue,
164 |             confidence: confidence,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/ValueExplanationEngine.swift:39:17: note: 'generateExplanation(for:)' declared here
 37 | 
 38 |     /// Generate explanation for a field prediction
 39 |     public func generateExplanation(for prediction: FieldPrediction) -> FieldExplanation {
    |                 `- note: 'generateExplanation(for:)' declared here
 40 |         let explanation = createExplanation(
 41 |             fieldId: prediction.fieldId,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:223:38: error: value of type 'PrivacyComplianceValidator' has no member 'validateDataPrivacy'
221 |         ]
222 | 
223 |         let result = await validator.validateDataPrivacy(testData)
    |                                      `- error: value of type 'PrivacyComplianceValidator' has no member 'validateDataPrivacy'
224 | 
225 |         XCTAssertFalse(result.hasPrivacyViolations)

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:238:69: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
236 |             return
237 |         }
238 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
239 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
240 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:239:74: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
237 |         }
238 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
239 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
    |                                                                          `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
240 |         let explanationEngine = ValueExplanationEngine()
241 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:242:35: error: ambiguous use of 'init()'
240 |         let explanationEngine = ValueExplanationEngine()
241 |         let metricsCollector = AdaptiveFormMetricsCollector()
242 |         let agenticOrchestrator = MockAgenticOrchestrator()
    |                                   `- error: ambiguous use of 'init()'
243 | 
244 |         let adaptiveFormService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate 
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate 
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate 
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate 
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:262:38: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
260 |         ])
261 | 
262 |         let userProfile = UserProfile(
    |                                      `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
263 |             id: UUID(),
264 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:262:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
260 |         ])
261 | 
262 |         let userProfile = UserProfile(
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
263 |             id: UUID(),
264 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:277:31: error: 'nil' requires a contextual type
275 |             defaultPaymentAddress: Address(),
276 |             defaultDeliveryAddress: Address(),
277 |             profileImageData: nil,
    |                               `- error: 'nil' requires a contextual type
278 |             organizationLogoData: nil,
279 |             website: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:278:35: error: 'nil' requires a contextual type
276 |             defaultDeliveryAddress: Address(),
277 |             profileImageData: nil,
278 |             organizationLogoData: nil,
    |                                   `- error: 'nil' requires a contextual type
279 |             website: "",
280 |             linkedIn: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:290:56: error: extra arguments at positions #1, #4, #5, #6, #7 in call
288 |         )
289 | 
290 |         let acquisitionAggregate = AcquisitionAggregate(
    |                                                        `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
291 |             id: UUID(),
292 |             title: "IT Services Contract",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:291:23: error: missing argument for parameter 'description' in call
289 | 
290 |         let acquisitionAggregate = AcquisitionAggregate(
291 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
292 |             title: "IT Services Contract",
293 |             requirements: "Software development with cloud hosting. We need cloud services and software development expertise.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:293:27: error: cannot convert value of type 'String' to expected argument type '[String]'
291 |             id: UUID(),
292 |             title: "IT Services Contract",
293 |             requirements: "Software development with cloud hosting. We need cloud services and software development expertise.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
294 |             projectDescription: "Software development with cloud hosting",
295 |             estimatedValue: 150_000,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:307:40: error: type 'Equatable' has no member 'adaptive'
305 |         )
306 | 
307 |         XCTAssertEqual(result.source, .adaptive)
    |                                        `- error: type 'Equatable' has no member 'adaptive'
308 |         XCTAssertFalse(result.predictions.isEmpty)
309 |         XCTAssertGreaterThan(result.confidence, 0.0)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:577:34: error: cannot find type 'FieldType' in scope
575 | 
576 | extension FieldType: CaseIterable {
577 |     public static let allCases: [FieldType] = [.textField, .dropdownField, .numberField, .dateField]
    |                                  `- error: cannot find type 'FieldType' in scope
578 | }
579 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:581:34: error: cannot find type 'ContextCategory' in scope
579 | 
580 | extension ContextCategory: CaseIterable {
581 |     public static let allCases: [ContextCategory] = [.informationTechnology, .construction, .professionalServices, .general]
    |                                  `- error: cannot find type 'ContextCategory' in scope
582 | }
583 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:585:34: error: cannot find type 'UserSegment' in scope
583 | 
584 | extension UserSegment: CaseIterable {
585 |     public static let allCases: [UserSegment] = [.novice, .intermediate, .expert]
    |                                  `- error: cannot find type 'UserSegment' in scope
586 | }
587 | 
[29/35] Compiling AIKOTests FormFieldQLearningAgentTests.swift
/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:10:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
   8 |     // MARK: - Test Infrastructure
   9 | 
  10 |     var adaptiveService: AdaptiveFormPopulationService?
     |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
  11 |     var formIntelligenceAdapter: FormIntelligenceAdapter?
  12 |     var trustFramework: UserTrustFramework?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1158:51: error: cannot find type 'FormPopulationResult' in scope
1156 |     }
1157 | 
1158 |     private func simulateUserSatisfaction(result: FormPopulationResult) async -> Double {
     |                                                   `- error: cannot find type 'FormPopulationResult' in scope
1159 |         // Simulate user satisfaction based on result quality
1160 |         let baselineScore = 0.7

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1167:50: error: cannot find type 'FormPopulationResult' in scope
1165 |     }
1166 | 
1167 |     private func calculateFormAccuracy(result _: FormPopulationResult) async -> Double {
     |                                                  `- error: cannot find type 'FormPopulationResult' in scope
1168 |         // Simulate form accuracy calculation
1169 |         Double.random(in: 0.6 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1172:52: error: cannot find type 'FormPopulationResult' in scope
1170 |     }
1171 | 
1172 |     private func simulateUserModifications(result: FormPopulationResult) async -> Int {
     |                                                    `- error: cannot find type 'FormPopulationResult' in scope
1173 |         // Simulate number of user modifications based on confidence
1174 |         let modificationRate = 1.0 - result.overallConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1234:48: error: cannot find type 'ContextCategory' in scope
1232 |     }
1233 | 
1234 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
     |                                                `- error: cannot find type 'ContextCategory' in scope
1235 |         AcquisitionContext(
1236 |             category: category,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1430:147: error: cannot find type 'FormPopulationResult' in scope
1428 |     }
1429 | 
1430 |     func generateAdaptiveSuggestions(form: StandardizedTestForm, acquisition _: AcquisitionAggregate, userProfile _: UserProfile) async throws -> FormPopulationResult {
     |                                                                                                                                                   `- error: cannot find type 'FormPopulationResult' in scope
1431 |         // Generate adaptive suggestions in background
1432 |         FormPopulationResult(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1440:56: error: cannot find type 'FormPopulationResult' in scope
1438 |     }
1439 | 
1440 |     func compareWithUserChoices(adaptiveSuggestions _: FormPopulationResult, userChoices _: [String: String]) async -> ShadowModeResult {
     |                                                        `- error: cannot find type 'FormPopulationResult' in scope
1441 |         let accuracy = Double.random(in: 0.6 ... 0.9)
1442 |         let improvement = Double.random(in: 0.1 ... 0.3)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             |- error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
     |             `- note: add stubs for conformance
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: error: invalid redeclaration of 'MockAgenticOrchestrator'
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- error: invalid redeclaration of 'MockAgenticOrchestrator'
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1495:46: error: cannot find type 'FormPopulationResult' in scope
1493 | }
1494 | 
1495 | private func extractSuggestions(from result: FormPopulationResult) async -> [FormSuggestion] {
     |                                              `- error: cannot find type 'FormPopulationResult' in scope
1496 |     result.fields.compactMap { key, value in
1497 |         guard !value.isEmpty else { return nil }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1513:55: error: cannot find type 'FormPopulationResult' in scope
1511 | }
1512 | 
1513 | private func simulateUserFormCompletion(staticResult: FormPopulationResult) async -> [String: String] {
     |                                                       `- error: cannot find type 'FormPopulationResult' in scope
1514 |     // Simulate user completing form based on static suggestions
1515 |     var userChoices: [String: String] = [:]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1529:63: error: cannot find type 'FieldExplanation' in scope
1527 | }
1528 | 
1529 | private func simulateUserExplanationEvaluation(explanation _: FieldExplanation, userProfile _: UserProfile, expectedReasoning _: String) async -> Double {
     |                                                               `- error: cannot find type 'FieldExplanation' in scope
1530 |     // Simulate user rating explanation helpfulness
1531 |     Double.random(in: 0.6 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1534:57: error: cannot find type 'FieldExplanation' in scope
1532 | }
1533 | 
1534 | private func validateExplanationAccuracy(explanation _: FieldExplanation, actualReasoning _: String) async -> Double {
     |                                                         `- error: cannot find type 'FieldExplanation' in scope
1535 |     // Validate explanation matches actual system reasoning
1536 |     Double.random(in: 0.7 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:27:33: error: cannot find 'AcquisitionContextClassifier' in scope
  25 | 
  26 |         // Initialize system components
  27 |         let contextClassifier = AcquisitionContextClassifier()
     |                                 `- error: cannot find 'AcquisitionContextClassifier' in scope
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:28:30: error: cannot find 'FormFieldQLearningAgent' in scope
  26 |         // Initialize system components
  27 |         let contextClassifier = AcquisitionContextClassifier()
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
     |                              `- error: cannot find 'FormFieldQLearningAgent' in scope
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
  30 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:29:35: error: cannot find 'FormModificationTracker' in scope
  27 |         let contextClassifier = AcquisitionContextClassifier()
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
     |                                   `- error: cannot find 'FormModificationTracker' in scope
  30 |         let explanationEngine = ValueExplanationEngine()
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:30:33: error: cannot find 'ValueExplanationEngine' in scope
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
  30 |         let explanationEngine = ValueExplanationEngine()
     |                                 `- error: cannot find 'ValueExplanationEngine' in scope
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()
  32 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:31:32: error: cannot find 'AdaptiveFormMetricsCollector' in scope
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
  30 |         let explanationEngine = ValueExplanationEngine()
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()
     |                                `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
  32 | 
  33 |         adaptiveService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:33:27: error: cannot find 'AdaptiveFormPopulationService' in scope
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()
  32 | 
  33 |         adaptiveService = AdaptiveFormPopulationService(
     |                           `- error: cannot find 'AdaptiveFormPopulationService' in scope
  34 |             contextClassifier: contextClassifier,
  35 |             qLearningAgent: qLearningAgent,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:43:39: error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
  41 | 
  42 |         formIntelligenceAdapter = FormIntelligenceAdapter.liveValue
  43 |         await formIntelligenceAdapter.setAdaptiveService(adaptiveService)
     |                                       `- error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
  44 | 
  45 |         // Initialize trust framework

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:46:15: error: value of optional type 'UserTrustFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'UserTrustFramework'
  44 | 
  45 |         // Initialize trust framework
  46 |         await trustFramework.initialize()
     |               |- error: value of optional type 'UserTrustFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'UserTrustFramework'
     |               |- note: chain the optional using '?' to access member 'initialize' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
  47 |         await abTestingFramework.initialize()
  48 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:47:15: error: value of optional type 'ABTestingFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'ABTestingFramework'
  45 |         // Initialize trust framework
  46 |         await trustFramework.initialize()
  47 |         await abTestingFramework.initialize()
     |               |- error: value of optional type 'ABTestingFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'ABTestingFramework'
     |               |- note: chain the optional using '?' to access member 'initialize' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
  48 |     }
  49 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:78:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
  76 |                 "deliverySchedule": "",
  77 |             ],
  78 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
  79 |         )
  80 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:81:49: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
  79 |         )
  80 | 
  81 |         let itAcquisition = AcquisitionAggregate(
     |                                                 `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
  82 |             id: UUID(),
  83 |             title: "Enterprise Software Development Services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:82:13: error: missing argument for parameter 'managedObject' in call
  80 | 
  81 |         let itAcquisition = AcquisitionAggregate(
  82 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
  83 |             title: "Enterprise Software Development Services",
  84 |             requirements: "Comprehensive software development services including cloud computing, database design, network security, and cybersecurity implementation for IT infrastructure management.",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:133:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 131 |                 "performancePeriod": "",
 132 |             ],
 133 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 134 |         )
 135 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:136:52: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 134 |         )
 135 | 
 136 |         let mixedAcquisition = AcquisitionAggregate(
     |                                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 137 |             id: UUID(),
 138 |             title: "IT Services and Consulting",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:137:13: error: missing argument for parameter 'managedObject' in call
 135 | 
 136 |         let mixedAcquisition = AcquisitionAggregate(
 137 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 138 |             title: "IT Services and Consulting",
 139 |             requirements: "Need both software development and consulting services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:186:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 184 |                 "customTerms": "",
 185 |             ],
 186 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 187 |         )
 188 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:189:56: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 187 |         )
 188 | 
 189 |         let ambiguousAcquisition = AcquisitionAggregate(
     |                                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 190 |             id: UUID(),
 191 |             title: "General Services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:190:13: error: missing argument for parameter 'managedObject' in call
 188 | 
 189 |         let ambiguousAcquisition = AcquisitionAggregate(
 190 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 191 |             title: "General Services",
 192 |             requirements: "Various services needed",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:232:41: error: extra arguments at positions #1, #2, #3 in call
 230 |         }
 231 |         // Given: New user with no learning history
 232 |         let newUserProfile = UserProfile(id: UUID(), name: "New User", email: "new@example.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 233 | 
 234 |         let formData = FormData(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:232:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 230 |         }
 231 |         // Given: New user with no learning history
 232 |         let newUserProfile = UserProfile(id: UUID(), name: "New User", email: "new@example.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 233 | 
 234 |         let formData = FormData(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:241:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 239 |                 "evaluationMethod": "",
 240 |             ],
 241 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 242 |         )
 243 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:244:47: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 242 |         )
 243 | 
 244 |         let acquisition = AcquisitionAggregate(
     |                                               `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 245 |             id: UUID(),
 246 |             title: "IT Services Project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:245:13: error: missing argument for parameter 'managedObject' in call
 243 | 
 244 |         let acquisition = AcquisitionAggregate(
 245 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 246 |             title: "IT Services Project",
 247 |             requirements: "Software development services needed",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:298:83: error: value of type 'UserProfile' has no member 'id'
 296 |         // When: Run A/B test
 297 |         for user in testUsers {
 298 |             let isAdaptiveGroup = await abTestingFramework.assignUserToGroup(user.id)
     |                                                                                   `- error: value of type 'UserProfile' has no member 'id'
 299 | 
 300 |             for form in testForms {

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:306:25: error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 304 |                     let result = try await formIntelligenceAdapter.autoFillForm(
 305 |                         form.formNumber,
 306 |                         form,
     |                         `- error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 307 |                         form.associatedAcquisition
 308 |                     )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:311:38: error: value of type 'UserProfile' has no member 'id'
 309 | 
 310 |                     let testResult = await ABTestResult(
 311 |                         userId: user.id,
     |                                      `- error: value of type 'UserProfile' has no member 'id'
 312 |                         formId: form.formNumber,
 313 |                         isAdaptive: true,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:322:68: error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 320 |                     adaptiveResults.append(testResult)
 321 |                 } else {
 322 |                     let result = try await formIntelligenceAdapter.autoFillFormStatic(
     |                                                                    `- error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 323 |                         form.formNumber,
 324 |                         form,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:329:38: error: value of type 'UserProfile' has no member 'id'
 327 | 
 328 |                     let testResult = await ABTestResult(
 329 |                         userId: user.id,
     |                                      `- error: value of type 'UserProfile' has no member 'id'
 330 |                         formId: form.formNumber,
 331 |                         isAdaptive: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:382:30: error: value of type 'UserProfile' has no member 'id'
 380 |         for user in testUsers {
 381 |             let confidence = await trustFramework.measureUserConfidence(
 382 |                 userId: user.id,
     |                              `- error: value of type 'UserProfile' has no member 'id'
 383 |                 systemType: .staticBaseline,
 384 |                 interactionCount: 10

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:402:34: error: value of type 'UserProfile' has no member 'id'
 400 | 
 401 |                 let confidence = await trustFramework.measureUserConfidence(
 402 |                     userId: user.id,
     |                                  `- error: value of type 'UserProfile' has no member 'id'
 403 |                     systemType: .adaptive,
 404 |                     interactionCount: period * 3 // 3 interactions per day

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:443:35: error: extra arguments at positions #1, #2, #3 in call
 441 |         }
 442 |         // Given: User with established trust in adaptive system
 443 |         let testUser = UserProfile(id: UUID(), name: "Trust Test User", email: "trust@test.com")
     |                                   `- error: extra arguments at positions #1, #2, #3 in call
 444 | 
 445 |         // Build initial trust

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:443:35: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 441 |         }
 442 |         // Given: User with established trust in adaptive system
 443 |         let testUser = UserProfile(id: UUID(), name: "Trust Test User", email: "trust@test.com")
     |                                   `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 444 | 
 445 |         // Build initial trust

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:512:43: error: value of type 'FormIntelligenceAdapter' has no member 'setConfidenceThreshold'
 510 |         // When: Test each confidence threshold
 511 |         for threshold in confidenceThresholds {
 512 |             await formIntelligenceAdapter.setConfidenceThreshold(threshold)
     |                                           `- error: value of type 'FormIntelligenceAdapter' has no member 'setConfidenceThreshold'
 513 | 
 514 |             var totalSuggestions = 0

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:522:25: error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 520 |                     let result = try await formIntelligenceAdapter.autoFillForm(
 521 |                         form.formNumber,
 522 |                         form,
     |                         `- error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 523 |                         form.associatedAcquisition
 524 |                     )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:600:70: error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 598 |             for form in testForms {
 599 |                 // User sees static suggestions
 600 |                 let staticResult = try await formIntelligenceAdapter.autoFillFormStatic(
     |                                                                      `- error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 601 |                     form.formNumber,
 602 |                     form,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:709:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 707 |                 "deliverySchedule": "",
 708 |             ],
 709 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 710 |         )
 711 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:712:47: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 710 |         )
 711 | 
 712 |         let acquisition = AcquisitionAggregate(
     |                                               `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 713 |             id: UUID(),
 714 |             title: "IT Software Development",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:713:13: error: missing argument for parameter 'managedObject' in call
 711 | 
 712 |         let acquisition = AcquisitionAggregate(
 713 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 714 |             title: "IT Software Development",
 715 |             requirements: "Need software development with cloud computing and database management",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:725:23: error: cannot find 'ContextFeatures' in scope
 723 |             category: .informationTechnology,
 724 |             confidence: 0.85,
 725 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
 726 |                 estimatedValue: 300_000,
 727 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:722:41: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 720 |         )
 721 | 
 722 |         let context = AcquisitionContext(
     |                                         `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 723 |             category: .informationTechnology,
 724 |             confidence: 0.85,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:723:13: error: missing argument for parameter 'from' in call
 721 | 
 722 |         let context = AcquisitionContext(
 723 |             category: .informationTechnology,
     |             `- error: missing argument for parameter 'from' in call
 724 |             confidence: 0.85,
 725 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:723:24: error: cannot infer contextual base in reference to member 'informationTechnology'
 721 | 
 722 |         let context = AcquisitionContext(
 723 |             category: .informationTechnology,
     |                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
 724 |             confidence: 0.85,
 725 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:733:23: error: cannot infer contextual base in reference to member 'normal'
 731 |             ),
 732 |             acquisitionValue: 300_000,
 733 |             urgency: .normal,
     |                       `- error: cannot infer contextual base in reference to member 'normal'
 734 |             complexity: .high,
 735 |             acquisitionId: acquisition.id

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:734:26: error: cannot infer contextual base in reference to member 'high'
 732 |             acquisitionValue: 300_000,
 733 |             urgency: .normal,
 734 |             complexity: .high,
     |                          `- error: cannot infer contextual base in reference to member 'high'
 735 |             acquisitionId: acquisition.id
 736 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:855:59: error: type 'Equatable' has no member 'green'
 853 |             switch confidenceLevel {
 854 |             case 0.8...:
 855 |                 XCTAssertEqual(displayInfo.displayColor, .green,
     |                                                           `- error: type 'Equatable' has no member 'green'
 856 |                                "High confidence should display in green")
 857 |                 XCTAssertEqual(displayInfo.displayText, "High Confidence",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:861:59: error: type 'Equatable' has no member 'orange'
 859 | 
 860 |             case 0.6 ..< 0.8:
 861 |                 XCTAssertEqual(displayInfo.displayColor, .orange,
     |                                                           `- error: type 'Equatable' has no member 'orange'
 862 |                                "Medium confidence should display in orange")
 863 |                 XCTAssertEqual(displayInfo.displayText, "Medium Confidence",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:867:59: error: type 'Equatable' has no member 'red'
 865 | 
 866 |             default:
 867 |                 XCTAssertEqual(displayInfo.displayColor, .red,
     |                                                           `- error: type 'Equatable' has no member 'red'
 868 |                                "Low confidence should display in red")
 869 |                 XCTAssertEqual(displayInfo.displayText, "Low Confidence",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:890:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 888 |             revision: "2024-01",
 889 |             fields: ["evaluationMethod": ""],
 890 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 891 |         )
 892 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:896:23: error: cannot find 'ContextFeatures' in scope
 894 |             category: .informationTechnology,
 895 |             confidence: 0.7,
 896 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
 897 |                 estimatedValue: 150_000,
 898 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:893:41: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 891 |         )
 892 | 
 893 |         let context = AcquisitionContext(
     |                                         `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 894 |             category: .informationTechnology,
 895 |             confidence: 0.7,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:894:13: error: missing argument for parameter 'from' in call
 892 | 
 893 |         let context = AcquisitionContext(
 894 |             category: .informationTechnology,
     |             `- error: missing argument for parameter 'from' in call
 895 |             confidence: 0.7,
 896 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:894:24: error: cannot infer contextual base in reference to member 'informationTechnology'
 892 | 
 893 |         let context = AcquisitionContext(
 894 |             category: .informationTechnology,
     |                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
 895 |             confidence: 0.7,
 896 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:904:23: error: cannot infer contextual base in reference to member 'normal'
 902 |             ),
 903 |             acquisitionValue: 150_000,
 904 |             urgency: .normal,
     |                       `- error: cannot infer contextual base in reference to member 'normal'
 905 |             complexity: .medium,
 906 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:905:26: error: cannot infer contextual base in reference to member 'medium'
 903 |             acquisitionValue: 150_000,
 904 |             urgency: .normal,
 905 |             complexity: .medium,
     |                          `- error: cannot infer contextual base in reference to member 'medium'
 906 |             acquisitionId: UUID()
 907 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:934:49: error: cannot infer key path type from context; consider explicitly specifying a root type
 932 | 
 933 |         // Should provide distinct options
 934 |         let uniqueValues = Set(alternatives.map(\.suggestedValue))
     |                                                 `- error: cannot infer key path type from context; consider explicitly specifying a root type
 935 |         XCTAssertEqual(uniqueValues.count, alternatives.count,
 936 |                        "All alternatives should be distinct")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:948:38: error: extra arguments at positions #1, #2, #3 in call
 946 |         }
 947 |         // Given: User with adaptive learning enabled
 948 |         let userProfile = UserProfile(id: UUID(), name: "Control Test User", email: "control@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
 949 | 
 950 |         // Verify initial enabled state

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:948:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 946 |         }
 947 |         // Given: User with adaptive learning enabled
 948 |         let userProfile = UserProfile(id: UUID(), name: "Control Test User", email: "control@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 949 | 
 950 |         // Verify initial enabled state

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:990:38: error: extra arguments at positions #1, #2, #3 in call
 988 |         }
 989 |         // Given: User with learning data
 990 |         let userProfile = UserProfile(id: UUID(), name: "Retention Test User", email: "retention@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
 991 | 
 992 |         // Generate learning data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:990:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 988 |         }
 989 |         // Given: User with learning data
 990 |         let userProfile = UserProfile(id: UUID(), name: "Retention Test User", email: "retention@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 991 | 
 992 |         // Generate learning data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1032:38: error: extra arguments at positions #1, #2, #3 in call
1030 |         }
1031 |         // Given: User with extensive learning data
1032 |         let userProfile = UserProfile(id: UUID(), name: "Deletion Test User", email: "deletion@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
1033 | 
1034 |         await generateUserLearningData(for: userProfile.id, interactions: 200)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1032:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1030 |         }
1031 |         // Given: User with extensive learning data
1032 |         let userProfile = UserProfile(id: UUID(), name: "Deletion Test User", email: "deletion@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1033 | 
1034 |         await generateUserLearningData(for: userProfile.id, interactions: 200)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1063:38: error: extra arguments at positions #1, #2, #3 in call
1061 |         }
1062 |         // Given: User with diverse learning data
1063 |         let userProfile = UserProfile(id: UUID(), name: "Export Test User", email: "export@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
1064 | 
1065 |         await generateDiverseUserLearningData(for: userProfile.id)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1063:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1061 |         }
1062 |         // Given: User with diverse learning data
1063 |         let userProfile = UserProfile(id: UUID(), name: "Export Test User", email: "export@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1064 | 
1065 |         await generateDiverseUserLearningData(for: userProfile.id)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1075:56: error: cannot infer contextual base in reference to member 'utf8'
1073 | 
1074 |         // Parse exported JSON
1075 |         guard let jsonData = exportedData.data(using: .utf8) else {
     |                                                        `- error: cannot infer contextual base in reference to member 'utf8'
1076 |             XCTFail("Failed to convert exported data to UTF-8")
1077 |             return

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1109:24: error: extra arguments at positions #1, #2, #3 in call
1107 |     private func createTestUserCohorts(count: Int) -> [UserProfile] {
1108 |         (1 ... count).map { i in
1109 |             UserProfile(
     |                        `- error: extra arguments at positions #1, #2, #3 in call
1110 |                 id: UUID(),
1111 |                 name: "Test User \(i)",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1109:24: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1107 |     private func createTestUserCohorts(count: Int) -> [UserProfile] {
1108 |         (1 ... count).map { i in
1109 |             UserProfile(
     |                        `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1110 |                 id: UUID(),
1111 |                 name: "Test User \(i)",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1135:36: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1133 |         let context = contexts[index % contexts.count]
1134 | 
1135 |         return AcquisitionAggregate(
     |                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1136 |             id: UUID(),
1137 |             title: "\(context) Project \(index)",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1136:13: error: missing argument for parameter 'managedObject' in call
1134 | 
1135 |         return AcquisitionAggregate(
1136 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
1137 |             title: "\(context) Project \(index)",
1138 |             requirements: "Test requirements for \(context.lowercased()) project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1154:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
1152 |                 "evaluationMethod": "",
1153 |             ],
1154 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
1155 |         )
1156 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1186:41: error: extra arguments at positions #1, #2, #3 in call
1184 |                 formData2: createConstructionFormData(),
1185 |                 acquisition: createMixedAcquisition(),
1186 |                 userProfile: UserProfile(id: UUID(), name: "Confusion User", email: "confusion@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
1187 |             ),
1188 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1186:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1184 |                 formData2: createConstructionFormData(),
1185 |                 acquisition: createMixedAcquisition(),
1186 |                 userProfile: UserProfile(id: UUID(), name: "Confusion User", email: "confusion@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1187 |             ),
1188 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1196:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1194 |             revision: "2024-01",
1195 |             fields: ["serviceType": "Software Development"],
1196 |             metadata: ["context_hint": "IT"]
     |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1197 |         )
1198 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1205:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1203 |             revision: "2024-01",
1204 |             fields: ["serviceType": "Building Construction"],
1205 |             metadata: ["context_hint": "Construction"]
     |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1206 |         )
1207 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1210:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1208 | 
1209 |     private func createMixedAcquisition() -> AcquisitionAggregate {
1210 |         AcquisitionAggregate(
     |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1211 |             id: UUID(),
1212 |             title: "Smart Building IT Infrastructure",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1211:13: error: missing argument for parameter 'managedObject' in call
1209 |     private func createMixedAcquisition() -> AcquisitionAggregate {
1210 |         AcquisitionAggregate(
1211 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
1212 |             title: "Smart Building IT Infrastructure",
1213 |             requirements: "Need both software systems and building construction",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1226:45: error: cannot infer contextual base in reference to member 'informationTechnology'
1224 |                 fieldId: "paymentTerms",
1225 |                 suggestedValue: "NET-30",
1226 |                 context: createTestContext(.informationTechnology),
     |                                             `- error: cannot infer contextual base in reference to member 'informationTechnology'
1227 |                 userProfile: UserProfile(id: UUID(), name: "Test User", email: "test@example.com"),
1228 |                 expectedReasoning: "Standard IT payment terms",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1227:41: error: extra arguments at positions #1, #2, #3 in call
1225 |                 suggestedValue: "NET-30",
1226 |                 context: createTestContext(.informationTechnology),
1227 |                 userProfile: UserProfile(id: UUID(), name: "Test User", email: "test@example.com"),
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
1228 |                 expectedReasoning: "Standard IT payment terms",
1229 |                 actualSystemReasoning: "Based on IT context and user history"

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1227:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1225 |                 suggestedValue: "NET-30",
1226 |                 context: createTestContext(.informationTechnology),
1227 |                 userProfile: UserProfile(id: UUID(), name: "Test User", email: "test@example.com"),
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1228 |                 expectedReasoning: "Standard IT payment terms",
1229 |                 actualSystemReasoning: "Based on IT context and user history"

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1238:23: error: cannot find 'ContextFeatures' in scope
1236 |             category: category,
1237 |             confidence: 0.8,
1238 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
1239 |                 estimatedValue: 200_000,
1240 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1235:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1233 | 
1234 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
1235 |         AcquisitionContext(
     |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1236 |             category: category,
1237 |             confidence: 0.8,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1236:13: error: missing argument for parameter 'from' in call
1234 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
1235 |         AcquisitionContext(
1236 |             category: category,
     |             `- error: missing argument for parameter 'from' in call
1237 |             confidence: 0.8,
1238 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1246:23: error: cannot infer contextual base in reference to member 'normal'
1244 |             ),
1245 |             acquisitionValue: 200_000,
1246 |             urgency: .normal,
     |                       `- error: cannot infer contextual base in reference to member 'normal'
1247 |             complexity: .medium,
1248 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1247:26: error: cannot infer contextual base in reference to member 'medium'
1245 |             acquisitionValue: 200_000,
1246 |             urgency: .normal,
1247 |             complexity: .medium,
     |                          `- error: cannot infer contextual base in reference to member 'medium'
1248 |             acquisitionId: UUID()
1249 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1497:44: error: 'nil' requires a contextual type
1495 | private func extractSuggestions(from result: FormPopulationResult) async -> [FormSuggestion] {
1496 |     result.fields.compactMap { key, value in
1497 |         guard !value.isEmpty else { return nil }
     |                                            `- error: 'nil' requires a contextual type
1498 |         return FormSuggestion(
1499 |             fieldId: key,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:11:14: error: cannot find type 'FormFieldQLearningAgent' in scope
  9 |     // MARK: - Test Infrastructure
 10 | 
 11 |     var sut: FormFieldQLearningAgent?
    |              `- error: cannot find type 'FormFieldQLearningAgent' in scope
 12 |     var mockCoreDataActor: MockCoreDataActor?
 13 |     var testScheduler: TestScheduler?

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:421:10: error: cannot find type 'QLearningState' in scope
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
421 |     ) -> QLearningState {
    |          `- error: cannot find type 'QLearningState' in scope
422 |         QLearningState(
423 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:417:20: error: cannot find type 'FieldType' in scope
415 | 
416 |     private func createTestQLearningState(
417 |         fieldType: FieldType,
    |                    `- error: cannot find type 'FieldType' in scope
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:418:18: error: cannot find type 'ContextCategory' in scope
416 |     private func createTestQLearningState(
417 |         fieldType: FieldType,
418 |         context: ContextCategory,
    |                  `- error: cannot find type 'ContextCategory' in scope
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:419:22: error: cannot find type 'UserSegment' in scope
417 |         fieldType: FieldType,
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,
    |                      `- error: cannot find type 'UserSegment' in scope
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
421 |     ) -> QLearningState {

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:420:26: error: cannot find type 'TemporalContext' in scope
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                          `- error: cannot find type 'TemporalContext' in scope
421 |     ) -> QLearningState {
422 |         QLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:430:82: error: cannot find type 'QLearningAction' in scope
428 |     }
429 | 
430 |     private func createTestQLearningAction(value: String, confidence: Double) -> QLearningAction {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
431 |         QLearningAction(
432 |             suggestedValue: value,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:437:56: error: cannot find type 'QLearningState' in scope
435 |     }
436 | 
437 |     private func createITContextStates(count: Int) -> [QLearningState] {
    |                                                        `- error: cannot find type 'QLearningState' in scope
438 |         (1 ... count).map { i in
439 |             createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:452:57: error: cannot find type 'QLearningAction' in scope
450 |     }
451 | 
452 |     private func createITContextActions(count: Int) -> [QLearningAction] {
    |                                                         `- error: cannot find type 'QLearningAction' in scope
453 |         let itValues = ["Cloud Services", "Software License", "IT Support", "Network Equipment", "Cybersecurity"]
454 |         return (1 ... count).map { i in

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:462:66: error: cannot find type 'QLearningState' in scope
460 |     }
461 | 
462 |     private func createConstructionContextStates(count: Int) -> [QLearningState] {
    |                                                                  `- error: cannot find type 'QLearningState' in scope
463 |         (1 ... count).map { i in
464 |             createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:477:67: error: cannot find type 'QLearningAction' in scope
475 |     }
476 | 
477 |     private func createConstructionContextActions(count: Int) -> [QLearningAction] {
    |                                                                   `- error: cannot find type 'QLearningAction' in scope
478 |         let constructionValues = ["Performance Bond", "Prevailing Wage", "Safety Requirements", "Building Materials", "Contractor Services"]
479 |         return (1 ... count).map { i in

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:507:55: error: cannot find type 'QLearningState' in scope
505 |     }
506 | 
507 |     private func calculateContextPerformance(states: [QLearningState], actions: [QLearningAction]) async -> Double {
    |                                                       `- error: cannot find type 'QLearningState' in scope
508 |         var totalQValue: Double = 0
509 |         var count = 0

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:507:82: error: cannot find type 'QLearningAction' in scope
505 |     }
506 | 
507 |     private func calculateContextPerformance(states: [QLearningState], actions: [QLearningAction]) async -> Double {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
508 |         var totalQValue: Double = 0
509 |         var count = 0

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:526:32: error: cannot find type 'CoreDataActorProtocol' in scope
524 | 
525 | /// Mock Core Data actor for testing
526 | final class MockCoreDataActor: CoreDataActorProtocol {
    |                                `- error: cannot find type 'CoreDataActorProtocol' in scope
527 |     private var storage: [String: Any] = [:]
528 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:568:16: error: cannot find type 'QLearningState' in scope
566 | /// Q-Learning experience for replay buffer testing
567 | struct QLearningExperience {
568 |     let state: QLearningState
    |                `- error: cannot find type 'QLearningState' in scope
569 |     let action: QLearningAction
570 |     let reward: Double

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:569:17: error: cannot find type 'QLearningAction' in scope
567 | struct QLearningExperience {
568 |     let state: QLearningState
569 |     let action: QLearningAction
    |                 `- error: cannot find type 'QLearningAction' in scope
570 |     let reward: Double
571 |     let nextState: QLearningState

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:571:20: error: cannot find type 'QLearningState' in scope
569 |     let action: QLearningAction
570 |     let reward: Double
571 |     let nextState: QLearningState
    |                    `- error: cannot find type 'QLearningState' in scope
572 | }
573 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:576:11: error: cannot find type 'FieldType' in scope
574 | // MARK: - Extensions for Testing
575 | 
576 | extension FieldType: CaseIterable {
    |           `- error: cannot find type 'FieldType' in scope
577 |     public static let allCases: [FieldType] = [.textField, .dropdownField, .numberField, .dateField]
578 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:580:11: error: cannot find type 'ContextCategory' in scope
578 | }
579 | 
580 | extension ContextCategory: CaseIterable {
    |           `- error: cannot find type 'ContextCategory' in scope
581 |     public static let allCases: [ContextCategory] = [.informationTechnology, .construction, .professionalServices, .general]
582 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:584:11: error: cannot find type 'UserSegment' in scope
582 | }
583 | 
584 | extension UserSegment: CaseIterable {
    |           `- error: cannot find type 'UserSegment' in scope
585 |     public static let allCases: [UserSegment] = [.novice, .intermediate, .expert]
586 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:23:15: error: cannot find 'FormFieldQLearningAgent' in scope
 21 | 
 22 |         // Create system under test
 23 |         sut = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
    |               `- error: cannot find 'FormFieldQLearningAgent' in scope
 24 | 
 25 |         // Wait for actor initialization

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:47:65: error: cannot infer contextual base in reference to member 'textField'
 45 |         }
 46 |         // Given: Initial state and action
 47 |         let initialState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                 `- error: cannot infer contextual base in reference to member 'textField'
 48 |         let testAction = createTestQLearningAction(value: "NET-30", confidence: 0.8)
 49 |         let reward = 1.0 // User accepted suggestion

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:47:86: error: cannot infer contextual base in reference to member 'informationTechnology'
 45 |         }
 46 |         // Given: Initial state and action
 47 |         let initialState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                      `- error: cannot infer contextual base in reference to member 'informationTechnology'
 48 |         let testAction = createTestQLearningAction(value: "NET-30", confidence: 0.8)
 49 |         let reward = 1.0 // User accepted suggestion

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:69:58: error: cannot infer contextual base in reference to member 'dropdownField'
 67 |         }
 68 |         // Given: Known Q-value and reward
 69 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                          `- error: cannot infer contextual base in reference to member 'dropdownField'
 70 |         let action = createTestQLearningAction(value: "Performance Bond Required", confidence: 0.9)
 71 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:69:83: error: cannot infer contextual base in reference to member 'construction'
 67 |         }
 68 |         // Given: Known Q-value and reward
 69 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'construction'
 70 |         let action = createTestQLearningAction(value: "Performance Bond Required", confidence: 0.9)
 71 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:96:59: error: cannot infer contextual base in reference to member 'textField'
 94 |         }
 95 |         // Given: Multi-step scenario with future rewards
 96 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:96:80: error: cannot infer contextual base in reference to member 'informationTechnology'
 94 |         }
 95 |         // Given: Multi-step scenario with future rewards
 96 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:99:59: error: cannot infer contextual base in reference to member 'textField'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 
 99 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
100 |         let action2 = createTestQLearningAction(value: "Annual Subscription", confidence: 0.8)
101 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:99:80: error: cannot infer contextual base in reference to member 'informationTechnology'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 
 99 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
100 |         let action2 = createTestQLearningAction(value: "Annual Subscription", confidence: 0.8)
101 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:178:60: error: cannot infer contextual base in reference to member 'textField'
176 |         }
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                            `- error: cannot infer contextual base in reference to member 'textField'
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
180 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:178:81: error: cannot infer contextual base in reference to member 'informationTechnology'
176 |         }
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                 `- error: cannot infer contextual base in reference to member 'informationTechnology'
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
180 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:179:70: error: cannot infer contextual base in reference to member 'textField'
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                                      `- error: cannot infer contextual base in reference to member 'textField'
180 | 
181 |         let itAction = createTestQLearningAction(value: "Cloud Services", confidence: 0.9)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:179:91: error: cannot infer contextual base in reference to member 'construction'
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                                                           `- error: cannot infer contextual base in reference to member 'construction'
180 | 
181 |         let itAction = createTestQLearningAction(value: "Cloud Services", confidence: 0.9)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:253:58: error: cannot infer contextual base in reference to member 'textField'
251 |         }
252 |         // Given: Known optimal action
253 |         let state = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                          `- error: cannot infer contextual base in reference to member 'textField'
254 |         let optimalAction = createTestQLearningAction(value: "Optimal Choice", confidence: 1.0)
255 |         let suboptimalAction = createTestQLearningAction(value: "Poor Choice", confidence: 0.3)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:253:79: error: cannot infer contextual base in reference to member 'informationTechnology'
251 |         }
252 |         // Given: Known optimal action
253 |         let state = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                               `- error: cannot infer contextual base in reference to member 'informationTechnology'
254 |         let optimalAction = createTestQLearningAction(value: "Optimal Choice", confidence: 1.0)
255 |         let suboptimalAction = createTestQLearningAction(value: "Poor Choice", confidence: 0.3)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:292:58: error: cannot infer contextual base in reference to member 'dropdownField'
290 |         }
291 |         // Given: State with multiple visits
292 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                          `- error: cannot infer contextual base in reference to member 'dropdownField'
293 |         let action = createTestQLearningAction(value: "Test Value", confidence: 0.7)
294 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:292:83: error: cannot infer contextual base in reference to member 'construction'
290 |         }
291 |         // Given: State with multiple visits
292 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'construction'
293 |         let action = createTestQLearningAction(value: "Test Value", confidence: 0.7)
294 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:321:69: error: cannot infer contextual base in reference to member 'textField'
319 |         }
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                     `- error: cannot infer contextual base in reference to member 'textField'
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:321:90: error: cannot infer contextual base in reference to member 'informationTechnology'
319 |         }
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                          `- error: cannot infer contextual base in reference to member 'informationTechnology'
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:322:61: error: cannot infer contextual base in reference to member 'textField'
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                             `- error: cannot infer contextual base in reference to member 'textField'
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)
324 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:322:82: error: cannot infer contextual base in reference to member 'construction'
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                                                  `- error: cannot infer contextual base in reference to member 'construction'
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)
324 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:344:59: error: cannot infer contextual base in reference to member 'textField'
342 |     func testStateHashingConsistency() async throws {
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
346 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:344:80: error: cannot infer contextual base in reference to member 'informationTechnology'
342 |     func testStateHashingConsistency() async throws {
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
346 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:345:59: error: cannot infer contextual base in reference to member 'textField'
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
346 | 
347 |         // When: Generate cache keys

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:345:80: error: cannot infer contextual base in reference to member 'informationTechnology'
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
346 | 
347 |         // When: Generate cache keys

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:370:34: error: cannot find 'TemporalContext' in scope
368 |                 context: .general,
369 |                 userSegment: .novice,
370 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: (i % 7) + 1, isWeekend: false)
    |                                  `- error: cannot find 'TemporalContext' in scope
371 |             )
372 |             let action = createTestQLearningAction(value: "Value \(i)", confidence: 0.5)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:367:29: error: cannot infer contextual base in reference to member 'textField'
365 |         for i in 1 ... (maxCapacity + 1000) {
366 |             let state = createTestQLearningState(
367 |                 fieldType: .textField,
    |                             `- error: cannot infer contextual base in reference to member 'textField'
368 |                 context: .general,
369 |                 userSegment: .novice,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:368:27: error: cannot infer contextual base in reference to member 'general'
366 |             let state = createTestQLearningState(
367 |                 fieldType: .textField,
368 |                 context: .general,
    |                           `- error: cannot infer contextual base in reference to member 'general'
369 |                 userSegment: .novice,
370 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: (i % 7) + 1, isWeekend: false)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:369:31: error: cannot infer contextual base in reference to member 'novice'
367 |                 fieldType: .textField,
368 |                 context: .general,
369 |                 userSegment: .novice,
    |                               `- error: cannot infer contextual base in reference to member 'novice'
370 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: (i % 7) + 1, isWeekend: false)
371 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:400:34: error: cannot find 'TemporalContext' in scope
398 |                 context: .general,
399 |                 userSegment: .novice,
400 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: 1, isWeekend: false)
    |                                  `- error: cannot find 'TemporalContext' in scope
401 |             )
402 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:397:29: error: cannot infer contextual base in reference to member 'textField'
395 |         for i in 1 ... (cacheCapacity + 100) {
396 |             let state = createTestQLearningState(
397 |                 fieldType: .textField,
    |                             `- error: cannot infer contextual base in reference to member 'textField'
398 |                 context: .general,
399 |                 userSegment: .novice,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:398:27: error: cannot infer contextual base in reference to member 'general'
396 |             let state = createTestQLearningState(
397 |                 fieldType: .textField,
398 |                 context: .general,
    |                           `- error: cannot infer contextual base in reference to member 'general'
399 |                 userSegment: .novice,
400 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: 1, isWeekend: false)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:399:31: error: cannot infer contextual base in reference to member 'novice'
397 |                 fieldType: .textField,
398 |                 context: .general,
399 |                 userSegment: .novice,
    |                               `- error: cannot infer contextual base in reference to member 'novice'
400 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: 1, isWeekend: false)
401 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:491:32: error: cannot find 'FieldType' in scope
489 |             QLearningExperience(
490 |                 state: createTestQLearningState(
491 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
    |                                `- error: cannot find 'FieldType' in scope
492 |                     context: ContextCategory.allCases.randomElement() ?? .general
493 |                 ),

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:492:30: error: cannot find 'ContextCategory' in scope
490 |                 state: createTestQLearningState(
491 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
492 |                     context: ContextCategory.allCases.randomElement() ?? .general
    |                              `- error: cannot find 'ContextCategory' in scope
493 |                 ),
494 |                 action: createTestQLearningAction(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:500:32: error: cannot find 'FieldType' in scope
498 |                 reward: Double.random(in: -1.0 ... 1.0),
499 |                 nextState: createTestQLearningState(
500 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
    |                                `- error: cannot find 'FieldType' in scope
501 |                     context: ContextCategory.allCases.randomElement() ?? .general
502 |                 )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:501:30: error: cannot find 'ContextCategory' in scope
499 |                 nextState: createTestQLearningState(
500 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
501 |                     context: ContextCategory.allCases.randomElement() ?? .general
    |                              `- error: cannot find 'ContextCategory' in scope
502 |                 )
503 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:488:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
486 | 
487 |     private func createRandomExperiences(count: Int) -> [QLearningExperience] {
488 |         (1 ... count).map { i in
    |         `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
489 |             QLearningExperience(
490 |                 state: createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:519:17: error: cannot find 'isEmpty' in scope
517 |         }
518 | 
519 |         return !isEmpty ? totalQValue / Double(count) : 0.0
    |                 `- error: cannot find 'isEmpty' in scope
520 |     }
521 | }

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:28:69: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 26 |             return
 27 |         }
 28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 29 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
 30 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:29:74: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 27 |         }
 28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
 29 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
    |                                                                          `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 30 |         let explanationEngine = ValueExplanationEngine()
 31 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:32:35: error: ambiguous use of 'init()'
 30 |         let explanationEngine = ValueExplanationEngine()
 31 |         let metricsCollector = AdaptiveFormMetricsCollector()
 32 |         let agenticOrchestrator = MockAgenticOrchestrator()
    |                                   `- error: ambiguous use of 'init()'
 33 | 
 34 |         let adaptiveFormService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate 
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate 
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate 
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate 
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:48:44: error: extra arguments at positions #1, #4, #5, #6, #7 in call
 46 |     func testAcquisitionContextClassifier_canClassifyContext() async throws {
 47 |         let classifier = AcquisitionContextClassifier()
 48 |         let testData = AcquisitionAggregate(
    |                                            `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
 49 |             id: UUID(),
 50 |             title: "IT Services Contract",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:49:23: error: missing argument for parameter 'description' in call
 47 |         let classifier = AcquisitionContextClassifier()
 48 |         let testData = AcquisitionAggregate(
 49 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
 50 |             title: "IT Services Contract",
 51 |             requirements: "Software development with cloud computing. We need cloud hosting and database management services.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:51:27: error: cannot convert value of type 'String' to expected argument type '[String]'
 49 |             id: UUID(),
 50 |             title: "IT Services Contract",
 51 |             requirements: "Software development with cloud computing. We need cloud hosting and database management services.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
 52 |             projectDescription: "Software development with cloud computing",
 53 |             estimatedValue: 100_000,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:58:43: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 56 |         )
 57 | 
 58 |         let result = try await classifier.classifyAcquisition(testData)
    |                                           `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 59 | 
 60 |         XCTAssertEqual(result.category, .informationTechnology)

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:60:42: error: type 'Equatable' has no member 'informationTechnology'
 58 |         let result = try await classifier.classifyAcquisition(testData)
 59 | 
 60 |         XCTAssertEqual(result.category, .informationTechnology)
    |                                          `- error: type 'Equatable' has no member 'informationTechnology'
 61 |         XCTAssertGreaterThan(result.confidence, 0.5)
 62 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:65:69: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 63 | 
 64 |     func testFormFieldQLearningAgent_canPredictFieldValue() async throws {
 65 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 66 | 
 67 |         // Create test state

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:72:30: error: value of optional type 'TemporalContext?' must be unwrapped to a value of type 'TemporalContext'
 70 |             contextCategory: .informationTechnology,
 71 |             userSegment: .intermediate,
 72 |             temporalContext: TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                              |- error: value of optional type 'TemporalContext?' must be unwrapped to a value of type 'TemporalContext'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 73 |         )
 74 | 

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:72:45: error: extra arguments at positions #1, #2, #3 in call
 70 |             contextCategory: .informationTechnology,
 71 |             userSegment: .intermediate,
 72 |             temporalContext: TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                                             `- error: extra arguments at positions #1, #2, #3 in call
 73 |         )
 74 | 

AppCore.TemporalContext.init:2:19: note: 'init(rawValue:)' declared here
1 | enum TemporalContext {
2 | @inlinable public init?(rawValue: String)}
  |                   `- note: 'init(rawValue:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:72:46: error: missing argument for parameter 'rawValue' in call
 70 |             contextCategory: .informationTechnology,
 71 |             userSegment: .intermediate,
 72 |             temporalContext: TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                                              `- error: missing argument for parameter 'rawValue' in call
 73 |         )
 74 | 

AppCore.TemporalContext.init:2:19: note: 'init(rawValue:)' declared here
1 | enum TemporalContext {
2 | @inlinable public init?(rawValue: String)}
  |                   `- note: 'init(rawValue:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:83:62: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 81 | 
 82 |     func testFormModificationTracker_canTrackModifications() async throws {
 83 |         let tracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
    |                                                              `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 84 | 
 85 |         // Test basic modification tracking

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:129:38: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
127 |         let engine = ValueExplanationEngine()
128 | 
129 |         let userProfile = UserProfile(
    |                                      `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
130 |             id: UUID(),
131 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:129:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
127 |         let engine = ValueExplanationEngine()
128 | 
129 |         let userProfile = UserProfile(
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
130 |             id: UUID(),
131 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:144:31: error: 'nil' requires a contextual type
142 |             defaultPaymentAddress: Address(),
143 |             defaultDeliveryAddress: Address(),
144 |             profileImageData: nil,
    |                               `- error: 'nil' requires a contextual type
145 |             organizationLogoData: nil,
146 |             website: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:145:35: error: 'nil' requires a contextual type
143 |             defaultDeliveryAddress: Address(),
144 |             profileImageData: nil,
145 |             organizationLogoData: nil,
    |                                   `- error: 'nil' requires a contextual type
146 |             website: "",
147 |             linkedIn: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:161:53: error: extra arguments at positions #1, #2, #3, #4, #5 in call
159 |         let confidence = 0.85
160 | 
161 |         let explanation = engine.generateExplanation(
    |                                                     `- error: extra arguments at positions #1, #2, #3, #4, #5 in call
162 |             fieldName: fieldName,
163 |             suggestedValue: suggestedValue,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/ValueExplanationEngine.swift:39:17: note: 'generateExplanation(for:)' declared here
 37 | 
 38 |     /// Generate explanation for a field prediction
 39 |     public func generateExplanation(for prediction: FieldPrediction) -> FieldExplanation {
    |                 `- note: 'generateExplanation(for:)' declared here
 40 |         let explanation = createExplanation(
 41 |             fieldId: prediction.fieldId,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:162:13: error: missing argument for parameter 'for' in call
160 | 
161 |         let explanation = engine.generateExplanation(
162 |             fieldName: fieldName,
    |             `- error: missing argument for parameter 'for' in call
163 |             suggestedValue: suggestedValue,
164 |             confidence: confidence,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/ValueExplanationEngine.swift:39:17: note: 'generateExplanation(for:)' declared here
 37 | 
 38 |     /// Generate explanation for a field prediction
 39 |     public func generateExplanation(for prediction: FieldPrediction) -> FieldExplanation {
    |                 `- note: 'generateExplanation(for:)' declared here
 40 |         let explanation = createExplanation(
 41 |             fieldId: prediction.fieldId,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:223:38: error: value of type 'PrivacyComplianceValidator' has no member 'validateDataPrivacy'
221 |         ]
222 | 
223 |         let result = await validator.validateDataPrivacy(testData)
    |                                      `- error: value of type 'PrivacyComplianceValidator' has no member 'validateDataPrivacy'
224 | 
225 |         XCTAssertFalse(result.hasPrivacyViolations)

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:238:69: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
236 |             return
237 |         }
238 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
239 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
240 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:239:74: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
237 |         }
238 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
239 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
    |                                                                          `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
240 |         let explanationEngine = ValueExplanationEngine()
241 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:242:35: error: ambiguous use of 'init()'
240 |         let explanationEngine = ValueExplanationEngine()
241 |         let metricsCollector = AdaptiveFormMetricsCollector()
242 |         let agenticOrchestrator = MockAgenticOrchestrator()
    |                                   `- error: ambiguous use of 'init()'
243 | 
244 |         let adaptiveFormService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate 
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate 
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate 
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate 
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:262:38: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
260 |         ])
261 | 
262 |         let userProfile = UserProfile(
    |                                      `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
263 |             id: UUID(),
264 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:262:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
260 |         ])
261 | 
262 |         let userProfile = UserProfile(
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
263 |             id: UUID(),
264 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:277:31: error: 'nil' requires a contextual type
275 |             defaultPaymentAddress: Address(),
276 |             defaultDeliveryAddress: Address(),
277 |             profileImageData: nil,
    |                               `- error: 'nil' requires a contextual type
278 |             organizationLogoData: nil,
279 |             website: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:278:35: error: 'nil' requires a contextual type
276 |             defaultDeliveryAddress: Address(),
277 |             profileImageData: nil,
278 |             organizationLogoData: nil,
    |                                   `- error: 'nil' requires a contextual type
279 |             website: "",
280 |             linkedIn: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:290:56: error: extra arguments at positions #1, #4, #5, #6, #7 in call
288 |         )
289 | 
290 |         let acquisitionAggregate = AcquisitionAggregate(
    |                                                        `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
291 |             id: UUID(),
292 |             title: "IT Services Contract",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:291:23: error: missing argument for parameter 'description' in call
289 | 
290 |         let acquisitionAggregate = AcquisitionAggregate(
291 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
292 |             title: "IT Services Contract",
293 |             requirements: "Software development with cloud hosting. We need cloud services and software development expertise.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:293:27: error: cannot convert value of type 'String' to expected argument type '[String]'
291 |             id: UUID(),
292 |             title: "IT Services Contract",
293 |             requirements: "Software development with cloud hosting. We need cloud services and software development expertise.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
294 |             projectDescription: "Software development with cloud hosting",
295 |             estimatedValue: 150_000,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:307:40: error: type 'Equatable' has no member 'adaptive'
305 |         )
306 | 
307 |         XCTAssertEqual(result.source, .adaptive)
    |                                        `- error: type 'Equatable' has no member 'adaptive'
308 |         XCTAssertFalse(result.predictions.isEmpty)
309 |         XCTAssertGreaterThan(result.confidence, 0.0)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:577:34: error: cannot find type 'FieldType' in scope
575 | 
576 | extension FieldType: CaseIterable {
577 |     public static let allCases: [FieldType] = [.textField, .dropdownField, .numberField, .dateField]
    |                                  `- error: cannot find type 'FieldType' in scope
578 | }
579 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:581:34: error: cannot find type 'ContextCategory' in scope
579 | 
580 | extension ContextCategory: CaseIterable {
581 |     public static let allCases: [ContextCategory] = [.informationTechnology, .construction, .professionalServices, .general]
    |                                  `- error: cannot find type 'ContextCategory' in scope
582 | }
583 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:585:34: error: cannot find type 'UserSegment' in scope
583 | 
584 | extension UserSegment: CaseIterable {
585 |     public static let allCases: [UserSegment] = [.novice, .intermediate, .expert]
    |                                  `- error: cannot find type 'UserSegment' in scope
586 | }
587 | 
[30/35] Compiling AIKOTests SimpleAdaptiveFormRLTests.swift
/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:10:26: error: cannot find type 'AdaptiveFormPopulationService' in scope
   8 |     // MARK: - Test Infrastructure
   9 | 
  10 |     var adaptiveService: AdaptiveFormPopulationService?
     |                          `- error: cannot find type 'AdaptiveFormPopulationService' in scope
  11 |     var formIntelligenceAdapter: FormIntelligenceAdapter?
  12 |     var trustFramework: UserTrustFramework?

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1158:51: error: cannot find type 'FormPopulationResult' in scope
1156 |     }
1157 | 
1158 |     private func simulateUserSatisfaction(result: FormPopulationResult) async -> Double {
     |                                                   `- error: cannot find type 'FormPopulationResult' in scope
1159 |         // Simulate user satisfaction based on result quality
1160 |         let baselineScore = 0.7

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1167:50: error: cannot find type 'FormPopulationResult' in scope
1165 |     }
1166 | 
1167 |     private func calculateFormAccuracy(result _: FormPopulationResult) async -> Double {
     |                                                  `- error: cannot find type 'FormPopulationResult' in scope
1168 |         // Simulate form accuracy calculation
1169 |         Double.random(in: 0.6 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1172:52: error: cannot find type 'FormPopulationResult' in scope
1170 |     }
1171 | 
1172 |     private func simulateUserModifications(result: FormPopulationResult) async -> Int {
     |                                                    `- error: cannot find type 'FormPopulationResult' in scope
1173 |         // Simulate number of user modifications based on confidence
1174 |         let modificationRate = 1.0 - result.overallConfidence

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1234:48: error: cannot find type 'ContextCategory' in scope
1232 |     }
1233 | 
1234 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
     |                                                `- error: cannot find type 'ContextCategory' in scope
1235 |         AcquisitionContext(
1236 |             category: category,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1430:147: error: cannot find type 'FormPopulationResult' in scope
1428 |     }
1429 | 
1430 |     func generateAdaptiveSuggestions(form: StandardizedTestForm, acquisition _: AcquisitionAggregate, userProfile _: UserProfile) async throws -> FormPopulationResult {
     |                                                                                                                                                   `- error: cannot find type 'FormPopulationResult' in scope
1431 |         // Generate adaptive suggestions in background
1432 |         FormPopulationResult(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1440:56: error: cannot find type 'FormPopulationResult' in scope
1438 |     }
1439 | 
1440 |     func compareWithUserChoices(adaptiveSuggestions _: FormPopulationResult, userChoices _: [String: String]) async -> ShadowModeResult {
     |                                                        `- error: cannot find type 'FormPopulationResult' in scope
1441 |         let accuracy = Double.random(in: 0.6 ... 0.9)
1442 |         let improvement = Double.random(in: 0.1 ... 0.3)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             |- error: type 'MockAgenticOrchestrator' does not conform to protocol 'AgenticOrchestratorProtocol'
     |             `- note: add stubs for conformance
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Sources/AgenticSuggestionUI/SuggestionViewModel.swift:295:10: note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
293 | /// Protocol for agentic orchestrator integration
294 | public protocol AgenticOrchestratorProtocol: Sendable {
295 |     func makeDecision(_ request: DecisionRequest) async throws -> DecisionResponse
    |          `- note: protocol requires function 'makeDecision' with type '(DecisionRequest) async throws -> DecisionResponse'
296 |     func provideFeedback(for decision: DecisionResponse, feedback: AgenticUserFeedback) async throws
    |          `- note: protocol requires function 'provideFeedback(for:feedback:)' with type '(DecisionResponse, AgenticUserFeedback) async throws -> ()'
297 | }
298 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1471:13: error: invalid redeclaration of 'MockAgenticOrchestrator'
1469 | 
1470 | /// Mock orchestrator for testing
1471 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
     |             `- error: invalid redeclaration of 'MockAgenticOrchestrator'
1472 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
1473 |         // Mock implementation

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1495:46: error: cannot find type 'FormPopulationResult' in scope
1493 | }
1494 | 
1495 | private func extractSuggestions(from result: FormPopulationResult) async -> [FormSuggestion] {
     |                                              `- error: cannot find type 'FormPopulationResult' in scope
1496 |     result.fields.compactMap { key, value in
1497 |         guard !value.isEmpty else { return nil }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1513:55: error: cannot find type 'FormPopulationResult' in scope
1511 | }
1512 | 
1513 | private func simulateUserFormCompletion(staticResult: FormPopulationResult) async -> [String: String] {
     |                                                       `- error: cannot find type 'FormPopulationResult' in scope
1514 |     // Simulate user completing form based on static suggestions
1515 |     var userChoices: [String: String] = [:]

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1529:63: error: cannot find type 'FieldExplanation' in scope
1527 | }
1528 | 
1529 | private func simulateUserExplanationEvaluation(explanation _: FieldExplanation, userProfile _: UserProfile, expectedReasoning _: String) async -> Double {
     |                                                               `- error: cannot find type 'FieldExplanation' in scope
1530 |     // Simulate user rating explanation helpfulness
1531 |     Double.random(in: 0.6 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1534:57: error: cannot find type 'FieldExplanation' in scope
1532 | }
1533 | 
1534 | private func validateExplanationAccuracy(explanation _: FieldExplanation, actualReasoning _: String) async -> Double {
     |                                                         `- error: cannot find type 'FieldExplanation' in scope
1535 |     // Validate explanation matches actual system reasoning
1536 |     Double.random(in: 0.7 ... 0.95)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:27:33: error: cannot find 'AcquisitionContextClassifier' in scope
  25 | 
  26 |         // Initialize system components
  27 |         let contextClassifier = AcquisitionContextClassifier()
     |                                 `- error: cannot find 'AcquisitionContextClassifier' in scope
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:28:30: error: cannot find 'FormFieldQLearningAgent' in scope
  26 |         // Initialize system components
  27 |         let contextClassifier = AcquisitionContextClassifier()
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
     |                              `- error: cannot find 'FormFieldQLearningAgent' in scope
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
  30 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:29:35: error: cannot find 'FormModificationTracker' in scope
  27 |         let contextClassifier = AcquisitionContextClassifier()
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
     |                                   `- error: cannot find 'FormModificationTracker' in scope
  30 |         let explanationEngine = ValueExplanationEngine()
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:30:33: error: cannot find 'ValueExplanationEngine' in scope
  28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
  30 |         let explanationEngine = ValueExplanationEngine()
     |                                 `- error: cannot find 'ValueExplanationEngine' in scope
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()
  32 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:31:32: error: cannot find 'AdaptiveFormMetricsCollector' in scope
  29 |         let modificationTracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
  30 |         let explanationEngine = ValueExplanationEngine()
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()
     |                                `- error: cannot find 'AdaptiveFormMetricsCollector' in scope
  32 | 
  33 |         adaptiveService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:33:27: error: cannot find 'AdaptiveFormPopulationService' in scope
  31 |         let metricsCollector = AdaptiveFormMetricsCollector()
  32 | 
  33 |         adaptiveService = AdaptiveFormPopulationService(
     |                           `- error: cannot find 'AdaptiveFormPopulationService' in scope
  34 |             contextClassifier: contextClassifier,
  35 |             qLearningAgent: qLearningAgent,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:43:39: error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
  41 | 
  42 |         formIntelligenceAdapter = FormIntelligenceAdapter.liveValue
  43 |         await formIntelligenceAdapter.setAdaptiveService(adaptiveService)
     |                                       `- error: value of type 'FormIntelligenceAdapter?' has no member 'setAdaptiveService'
  44 | 
  45 |         // Initialize trust framework

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:46:15: error: value of optional type 'UserTrustFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'UserTrustFramework'
  44 | 
  45 |         // Initialize trust framework
  46 |         await trustFramework.initialize()
     |               |- error: value of optional type 'UserTrustFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'UserTrustFramework'
     |               |- note: chain the optional using '?' to access member 'initialize' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
  47 |         await abTestingFramework.initialize()
  48 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:47:15: error: value of optional type 'ABTestingFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'ABTestingFramework'
  45 |         // Initialize trust framework
  46 |         await trustFramework.initialize()
  47 |         await abTestingFramework.initialize()
     |               |- error: value of optional type 'ABTestingFramework?' must be unwrapped to refer to member 'initialize' of wrapped base type 'ABTestingFramework'
     |               |- note: chain the optional using '?' to access member 'initialize' only for non-'nil' base values
     |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
  48 |     }
  49 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:78:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
  76 |                 "deliverySchedule": "",
  77 |             ],
  78 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
  79 |         )
  80 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:81:49: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
  79 |         )
  80 | 
  81 |         let itAcquisition = AcquisitionAggregate(
     |                                                 `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
  82 |             id: UUID(),
  83 |             title: "Enterprise Software Development Services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:82:13: error: missing argument for parameter 'managedObject' in call
  80 | 
  81 |         let itAcquisition = AcquisitionAggregate(
  82 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
  83 |             title: "Enterprise Software Development Services",
  84 |             requirements: "Comprehensive software development services including cloud computing, database design, network security, and cybersecurity implementation for IT infrastructure management.",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:133:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 131 |                 "performancePeriod": "",
 132 |             ],
 133 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 134 |         )
 135 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:136:52: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 134 |         )
 135 | 
 136 |         let mixedAcquisition = AcquisitionAggregate(
     |                                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 137 |             id: UUID(),
 138 |             title: "IT Services and Consulting",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:137:13: error: missing argument for parameter 'managedObject' in call
 135 | 
 136 |         let mixedAcquisition = AcquisitionAggregate(
 137 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 138 |             title: "IT Services and Consulting",
 139 |             requirements: "Need both software development and consulting services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:186:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 184 |                 "customTerms": "",
 185 |             ],
 186 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 187 |         )
 188 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:189:56: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 187 |         )
 188 | 
 189 |         let ambiguousAcquisition = AcquisitionAggregate(
     |                                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 190 |             id: UUID(),
 191 |             title: "General Services",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:190:13: error: missing argument for parameter 'managedObject' in call
 188 | 
 189 |         let ambiguousAcquisition = AcquisitionAggregate(
 190 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 191 |             title: "General Services",
 192 |             requirements: "Various services needed",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:232:41: error: extra arguments at positions #1, #2, #3 in call
 230 |         }
 231 |         // Given: New user with no learning history
 232 |         let newUserProfile = UserProfile(id: UUID(), name: "New User", email: "new@example.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
 233 | 
 234 |         let formData = FormData(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:232:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 230 |         }
 231 |         // Given: New user with no learning history
 232 |         let newUserProfile = UserProfile(id: UUID(), name: "New User", email: "new@example.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 233 | 
 234 |         let formData = FormData(

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:241:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 239 |                 "evaluationMethod": "",
 240 |             ],
 241 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 242 |         )
 243 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:244:47: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 242 |         )
 243 | 
 244 |         let acquisition = AcquisitionAggregate(
     |                                               `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 245 |             id: UUID(),
 246 |             title: "IT Services Project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:245:13: error: missing argument for parameter 'managedObject' in call
 243 | 
 244 |         let acquisition = AcquisitionAggregate(
 245 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 246 |             title: "IT Services Project",
 247 |             requirements: "Software development services needed",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:298:83: error: value of type 'UserProfile' has no member 'id'
 296 |         // When: Run A/B test
 297 |         for user in testUsers {
 298 |             let isAdaptiveGroup = await abTestingFramework.assignUserToGroup(user.id)
     |                                                                                   `- error: value of type 'UserProfile' has no member 'id'
 299 | 
 300 |             for form in testForms {

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:306:25: error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 304 |                     let result = try await formIntelligenceAdapter.autoFillForm(
 305 |                         form.formNumber,
 306 |                         form,
     |                         `- error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 307 |                         form.associatedAcquisition
 308 |                     )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:311:38: error: value of type 'UserProfile' has no member 'id'
 309 | 
 310 |                     let testResult = await ABTestResult(
 311 |                         userId: user.id,
     |                                      `- error: value of type 'UserProfile' has no member 'id'
 312 |                         formId: form.formNumber,
 313 |                         isAdaptive: true,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:322:68: error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 320 |                     adaptiveResults.append(testResult)
 321 |                 } else {
 322 |                     let result = try await formIntelligenceAdapter.autoFillFormStatic(
     |                                                                    `- error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 323 |                         form.formNumber,
 324 |                         form,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:329:38: error: value of type 'UserProfile' has no member 'id'
 327 | 
 328 |                     let testResult = await ABTestResult(
 329 |                         userId: user.id,
     |                                      `- error: value of type 'UserProfile' has no member 'id'
 330 |                         formId: form.formNumber,
 331 |                         isAdaptive: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:382:30: error: value of type 'UserProfile' has no member 'id'
 380 |         for user in testUsers {
 381 |             let confidence = await trustFramework.measureUserConfidence(
 382 |                 userId: user.id,
     |                              `- error: value of type 'UserProfile' has no member 'id'
 383 |                 systemType: .staticBaseline,
 384 |                 interactionCount: 10

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:402:34: error: value of type 'UserProfile' has no member 'id'
 400 | 
 401 |                 let confidence = await trustFramework.measureUserConfidence(
 402 |                     userId: user.id,
     |                                  `- error: value of type 'UserProfile' has no member 'id'
 403 |                     systemType: .adaptive,
 404 |                     interactionCount: period * 3 // 3 interactions per day

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:443:35: error: extra arguments at positions #1, #2, #3 in call
 441 |         }
 442 |         // Given: User with established trust in adaptive system
 443 |         let testUser = UserProfile(id: UUID(), name: "Trust Test User", email: "trust@test.com")
     |                                   `- error: extra arguments at positions #1, #2, #3 in call
 444 | 
 445 |         // Build initial trust

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:443:35: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 441 |         }
 442 |         // Given: User with established trust in adaptive system
 443 |         let testUser = UserProfile(id: UUID(), name: "Trust Test User", email: "trust@test.com")
     |                                   `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 444 | 
 445 |         // Build initial trust

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:512:43: error: value of type 'FormIntelligenceAdapter' has no member 'setConfidenceThreshold'
 510 |         // When: Test each confidence threshold
 511 |         for threshold in confidenceThresholds {
 512 |             await formIntelligenceAdapter.setConfidenceThreshold(threshold)
     |                                           `- error: value of type 'FormIntelligenceAdapter' has no member 'setConfidenceThreshold'
 513 | 
 514 |             var totalSuggestions = 0

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:522:25: error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 520 |                     let result = try await formIntelligenceAdapter.autoFillForm(
 521 |                         form.formNumber,
 522 |                         form,
     |                         `- error: cannot convert value of type 'StandardizedTestForm' to expected argument type 'FormData'
 523 |                         form.associatedAcquisition
 524 |                     )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:600:70: error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 598 |             for form in testForms {
 599 |                 // User sees static suggestions
 600 |                 let staticResult = try await formIntelligenceAdapter.autoFillFormStatic(
     |                                                                      `- error: value of type 'FormIntelligenceAdapter' has no member 'autoFillFormStatic'
 601 |                     form.formNumber,
 602 |                     form,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:709:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 707 |                 "deliverySchedule": "",
 708 |             ],
 709 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 710 |         )
 711 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:712:47: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 710 |         )
 711 | 
 712 |         let acquisition = AcquisitionAggregate(
     |                                               `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 713 |             id: UUID(),
 714 |             title: "IT Software Development",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:713:13: error: missing argument for parameter 'managedObject' in call
 711 | 
 712 |         let acquisition = AcquisitionAggregate(
 713 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
 714 |             title: "IT Software Development",
 715 |             requirements: "Need software development with cloud computing and database management",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:725:23: error: cannot find 'ContextFeatures' in scope
 723 |             category: .informationTechnology,
 724 |             confidence: 0.85,
 725 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
 726 |                 estimatedValue: 300_000,
 727 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:722:41: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 720 |         )
 721 | 
 722 |         let context = AcquisitionContext(
     |                                         `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 723 |             category: .informationTechnology,
 724 |             confidence: 0.85,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:723:13: error: missing argument for parameter 'from' in call
 721 | 
 722 |         let context = AcquisitionContext(
 723 |             category: .informationTechnology,
     |             `- error: missing argument for parameter 'from' in call
 724 |             confidence: 0.85,
 725 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:723:24: error: cannot infer contextual base in reference to member 'informationTechnology'
 721 | 
 722 |         let context = AcquisitionContext(
 723 |             category: .informationTechnology,
     |                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
 724 |             confidence: 0.85,
 725 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:733:23: error: cannot infer contextual base in reference to member 'normal'
 731 |             ),
 732 |             acquisitionValue: 300_000,
 733 |             urgency: .normal,
     |                       `- error: cannot infer contextual base in reference to member 'normal'
 734 |             complexity: .high,
 735 |             acquisitionId: acquisition.id

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:734:26: error: cannot infer contextual base in reference to member 'high'
 732 |             acquisitionValue: 300_000,
 733 |             urgency: .normal,
 734 |             complexity: .high,
     |                          `- error: cannot infer contextual base in reference to member 'high'
 735 |             acquisitionId: acquisition.id
 736 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:855:59: error: type 'Equatable' has no member 'green'
 853 |             switch confidenceLevel {
 854 |             case 0.8...:
 855 |                 XCTAssertEqual(displayInfo.displayColor, .green,
     |                                                           `- error: type 'Equatable' has no member 'green'
 856 |                                "High confidence should display in green")
 857 |                 XCTAssertEqual(displayInfo.displayText, "High Confidence",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:861:59: error: type 'Equatable' has no member 'orange'
 859 | 
 860 |             case 0.6 ..< 0.8:
 861 |                 XCTAssertEqual(displayInfo.displayColor, .orange,
     |                                                           `- error: type 'Equatable' has no member 'orange'
 862 |                                "Medium confidence should display in orange")
 863 |                 XCTAssertEqual(displayInfo.displayText, "Medium Confidence",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:867:59: error: type 'Equatable' has no member 'red'
 865 | 
 866 |             default:
 867 |                 XCTAssertEqual(displayInfo.displayColor, .red,
     |                                                           `- error: type 'Equatable' has no member 'red'
 868 |                                "Low confidence should display in red")
 869 |                 XCTAssertEqual(displayInfo.displayText, "Low Confidence",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:890:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 888 |             revision: "2024-01",
 889 |             fields: ["evaluationMethod": ""],
 890 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
 891 |         )
 892 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:896:23: error: cannot find 'ContextFeatures' in scope
 894 |             category: .informationTechnology,
 895 |             confidence: 0.7,
 896 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
 897 |                 estimatedValue: 150_000,
 898 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:893:41: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 891 |         )
 892 | 
 893 |         let context = AcquisitionContext(
     |                                         `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
 894 |             category: .informationTechnology,
 895 |             confidence: 0.7,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:894:13: error: missing argument for parameter 'from' in call
 892 | 
 893 |         let context = AcquisitionContext(
 894 |             category: .informationTechnology,
     |             `- error: missing argument for parameter 'from' in call
 895 |             confidence: 0.7,
 896 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:894:24: error: cannot infer contextual base in reference to member 'informationTechnology'
 892 | 
 893 |         let context = AcquisitionContext(
 894 |             category: .informationTechnology,
     |                        `- error: cannot infer contextual base in reference to member 'informationTechnology'
 895 |             confidence: 0.7,
 896 |             features: ContextFeatures(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:904:23: error: cannot infer contextual base in reference to member 'normal'
 902 |             ),
 903 |             acquisitionValue: 150_000,
 904 |             urgency: .normal,
     |                       `- error: cannot infer contextual base in reference to member 'normal'
 905 |             complexity: .medium,
 906 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:905:26: error: cannot infer contextual base in reference to member 'medium'
 903 |             acquisitionValue: 150_000,
 904 |             urgency: .normal,
 905 |             complexity: .medium,
     |                          `- error: cannot infer contextual base in reference to member 'medium'
 906 |             acquisitionId: UUID()
 907 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:934:49: error: cannot infer key path type from context; consider explicitly specifying a root type
 932 | 
 933 |         // Should provide distinct options
 934 |         let uniqueValues = Set(alternatives.map(\.suggestedValue))
     |                                                 `- error: cannot infer key path type from context; consider explicitly specifying a root type
 935 |         XCTAssertEqual(uniqueValues.count, alternatives.count,
 936 |                        "All alternatives should be distinct")

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:948:38: error: extra arguments at positions #1, #2, #3 in call
 946 |         }
 947 |         // Given: User with adaptive learning enabled
 948 |         let userProfile = UserProfile(id: UUID(), name: "Control Test User", email: "control@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
 949 | 
 950 |         // Verify initial enabled state

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:948:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 946 |         }
 947 |         // Given: User with adaptive learning enabled
 948 |         let userProfile = UserProfile(id: UUID(), name: "Control Test User", email: "control@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 949 | 
 950 |         // Verify initial enabled state

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:990:38: error: extra arguments at positions #1, #2, #3 in call
 988 |         }
 989 |         // Given: User with learning data
 990 |         let userProfile = UserProfile(id: UUID(), name: "Retention Test User", email: "retention@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
 991 | 
 992 |         // Generate learning data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:990:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 988 |         }
 989 |         // Given: User with learning data
 990 |         let userProfile = UserProfile(id: UUID(), name: "Retention Test User", email: "retention@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
 991 | 
 992 |         // Generate learning data

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1032:38: error: extra arguments at positions #1, #2, #3 in call
1030 |         }
1031 |         // Given: User with extensive learning data
1032 |         let userProfile = UserProfile(id: UUID(), name: "Deletion Test User", email: "deletion@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
1033 | 
1034 |         await generateUserLearningData(for: userProfile.id, interactions: 200)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1032:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1030 |         }
1031 |         // Given: User with extensive learning data
1032 |         let userProfile = UserProfile(id: UUID(), name: "Deletion Test User", email: "deletion@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1033 | 
1034 |         await generateUserLearningData(for: userProfile.id, interactions: 200)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1063:38: error: extra arguments at positions #1, #2, #3 in call
1061 |         }
1062 |         // Given: User with diverse learning data
1063 |         let userProfile = UserProfile(id: UUID(), name: "Export Test User", email: "export@test.com")
     |                                      `- error: extra arguments at positions #1, #2, #3 in call
1064 | 
1065 |         await generateDiverseUserLearningData(for: userProfile.id)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1063:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1061 |         }
1062 |         // Given: User with diverse learning data
1063 |         let userProfile = UserProfile(id: UUID(), name: "Export Test User", email: "export@test.com")
     |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1064 | 
1065 |         await generateDiverseUserLearningData(for: userProfile.id)

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1075:56: error: cannot infer contextual base in reference to member 'utf8'
1073 | 
1074 |         // Parse exported JSON
1075 |         guard let jsonData = exportedData.data(using: .utf8) else {
     |                                                        `- error: cannot infer contextual base in reference to member 'utf8'
1076 |             XCTFail("Failed to convert exported data to UTF-8")
1077 |             return

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1109:24: error: extra arguments at positions #1, #2, #3 in call
1107 |     private func createTestUserCohorts(count: Int) -> [UserProfile] {
1108 |         (1 ... count).map { i in
1109 |             UserProfile(
     |                        `- error: extra arguments at positions #1, #2, #3 in call
1110 |                 id: UUID(),
1111 |                 name: "Test User \(i)",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1109:24: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1107 |     private func createTestUserCohorts(count: Int) -> [UserProfile] {
1108 |         (1 ... count).map { i in
1109 |             UserProfile(
     |                        `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1110 |                 id: UUID(),
1111 |                 name: "Test User \(i)",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1135:36: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1133 |         let context = contexts[index % contexts.count]
1134 | 
1135 |         return AcquisitionAggregate(
     |                                    `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1136 |             id: UUID(),
1137 |             title: "\(context) Project \(index)",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1136:13: error: missing argument for parameter 'managedObject' in call
1134 | 
1135 |         return AcquisitionAggregate(
1136 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
1137 |             title: "\(context) Project \(index)",
1138 |             requirements: "Test requirements for \(context.lowercased()) project",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1154:23: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
1152 |                 "evaluationMethod": "",
1153 |             ],
1154 |             metadata: [:]
     |                       `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'FormMetadata'
1155 |         )
1156 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1186:41: error: extra arguments at positions #1, #2, #3 in call
1184 |                 formData2: createConstructionFormData(),
1185 |                 acquisition: createMixedAcquisition(),
1186 |                 userProfile: UserProfile(id: UUID(), name: "Confusion User", email: "confusion@test.com")
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
1187 |             ),
1188 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1186:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1184 |                 formData2: createConstructionFormData(),
1185 |                 acquisition: createMixedAcquisition(),
1186 |                 userProfile: UserProfile(id: UUID(), name: "Confusion User", email: "confusion@test.com")
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1187 |             ),
1188 |         ]

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1196:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1194 |             revision: "2024-01",
1195 |             fields: ["serviceType": "Software Development"],
1196 |             metadata: ["context_hint": "IT"]
     |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1197 |         )
1198 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1205:23: error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1203 |             revision: "2024-01",
1204 |             fields: ["serviceType": "Building Construction"],
1205 |             metadata: ["context_hint": "Construction"]
     |                       `- error: cannot convert value of type '[String : String]' to expected argument type 'FormMetadata'
1206 |         )
1207 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1210:29: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1208 | 
1209 |     private func createMixedAcquisition() -> AcquisitionAggregate {
1210 |         AcquisitionAggregate(
     |                             `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1211 |             id: UUID(),
1212 |             title: "Smart Building IT Infrastructure",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1211:13: error: missing argument for parameter 'managedObject' in call
1209 |     private func createMixedAcquisition() -> AcquisitionAggregate {
1210 |         AcquisitionAggregate(
1211 |             id: UUID(),
     |             `- error: missing argument for parameter 'managedObject' in call
1212 |             title: "Smart Building IT Infrastructure",
1213 |             requirements: "Need both software systems and building construction",

AIKO.AcquisitionAggregate.init:2:17: note: 'init(managedObject:)' declared here
1 | class AcquisitionAggregate {
2 | override public init(managedObject: AIKO.Acquisition)}
  |                 `- note: 'init(managedObject:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1226:45: error: cannot infer contextual base in reference to member 'informationTechnology'
1224 |                 fieldId: "paymentTerms",
1225 |                 suggestedValue: "NET-30",
1226 |                 context: createTestContext(.informationTechnology),
     |                                             `- error: cannot infer contextual base in reference to member 'informationTechnology'
1227 |                 userProfile: UserProfile(id: UUID(), name: "Test User", email: "test@example.com"),
1228 |                 expectedReasoning: "Standard IT payment terms",

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1227:41: error: extra arguments at positions #1, #2, #3 in call
1225 |                 suggestedValue: "NET-30",
1226 |                 context: createTestContext(.informationTechnology),
1227 |                 userProfile: UserProfile(id: UUID(), name: "Test User", email: "test@example.com"),
     |                                         `- error: extra arguments at positions #1, #2, #3 in call
1228 |                 expectedReasoning: "Standard IT payment terms",
1229 |                 actualSystemReasoning: "Based on IT context and user history"

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1227:41: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1225 |                 suggestedValue: "NET-30",
1226 |                 context: createTestContext(.informationTechnology),
1227 |                 userProfile: UserProfile(id: UUID(), name: "Test User", email: "test@example.com"),
     |                                         `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
1228 |                 expectedReasoning: "Standard IT payment terms",
1229 |                 actualSystemReasoning: "Based on IT context and user history"

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1238:23: error: cannot find 'ContextFeatures' in scope
1236 |             category: category,
1237 |             confidence: 0.8,
1238 |             features: ContextFeatures(
     |                       `- error: cannot find 'ContextFeatures' in scope
1239 |                 estimatedValue: 200_000,
1240 |                 hasUrgentDeadline: false,

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1235:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1233 | 
1234 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
1235 |         AcquisitionContext(
     |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7 in call
1236 |             category: category,
1237 |             confidence: 0.8,

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1236:13: error: missing argument for parameter 'from' in call
1234 |     private func createTestContext(_ category: ContextCategory) -> AcquisitionContext {
1235 |         AcquisitionContext(
1236 |             category: category,
     |             `- error: missing argument for parameter 'from' in call
1237 |             confidence: 0.8,
1238 |             features: ContextFeatures(

AIKO.AcquisitionContext.init:2:8: note: 'init(from:)' declared here
1 | struct AcquisitionContext {
2 | public init(from decoder: any Decoder) throws}
  |        `- note: 'init(from:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1246:23: error: cannot infer contextual base in reference to member 'normal'
1244 |             ),
1245 |             acquisitionValue: 200_000,
1246 |             urgency: .normal,
     |                       `- error: cannot infer contextual base in reference to member 'normal'
1247 |             complexity: .medium,
1248 |             acquisitionId: UUID()

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1247:26: error: cannot infer contextual base in reference to member 'medium'
1245 |             acquisitionValue: 200_000,
1246 |             urgency: .normal,
1247 |             complexity: .medium,
     |                          `- error: cannot infer contextual base in reference to member 'medium'
1248 |             acquisitionId: UUID()
1249 |         )

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormUserExperienceTests.swift:1497:44: error: 'nil' requires a contextual type
1495 | private func extractSuggestions(from result: FormPopulationResult) async -> [FormSuggestion] {
1496 |     result.fields.compactMap { key, value in
1497 |         guard !value.isEmpty else { return nil }
     |                                            `- error: 'nil' requires a contextual type
1498 |         return FormSuggestion(
1499 |             fieldId: key,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:11:14: error: cannot find type 'FormFieldQLearningAgent' in scope
  9 |     // MARK: - Test Infrastructure
 10 | 
 11 |     var sut: FormFieldQLearningAgent?
    |              `- error: cannot find type 'FormFieldQLearningAgent' in scope
 12 |     var mockCoreDataActor: MockCoreDataActor?
 13 |     var testScheduler: TestScheduler?

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:421:10: error: cannot find type 'QLearningState' in scope
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
421 |     ) -> QLearningState {
    |          `- error: cannot find type 'QLearningState' in scope
422 |         QLearningState(
423 |             fieldType: fieldType,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:417:20: error: cannot find type 'FieldType' in scope
415 | 
416 |     private func createTestQLearningState(
417 |         fieldType: FieldType,
    |                    `- error: cannot find type 'FieldType' in scope
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:418:18: error: cannot find type 'ContextCategory' in scope
416 |     private func createTestQLearningState(
417 |         fieldType: FieldType,
418 |         context: ContextCategory,
    |                  `- error: cannot find type 'ContextCategory' in scope
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:419:22: error: cannot find type 'UserSegment' in scope
417 |         fieldType: FieldType,
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,
    |                      `- error: cannot find type 'UserSegment' in scope
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
421 |     ) -> QLearningState {

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:420:26: error: cannot find type 'TemporalContext' in scope
418 |         context: ContextCategory,
419 |         userSegment: UserSegment = .intermediate,
420 |         temporalContext: TemporalContext = TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                          `- error: cannot find type 'TemporalContext' in scope
421 |     ) -> QLearningState {
422 |         QLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:430:82: error: cannot find type 'QLearningAction' in scope
428 |     }
429 | 
430 |     private func createTestQLearningAction(value: String, confidence: Double) -> QLearningAction {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
431 |         QLearningAction(
432 |             suggestedValue: value,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:437:56: error: cannot find type 'QLearningState' in scope
435 |     }
436 | 
437 |     private func createITContextStates(count: Int) -> [QLearningState] {
    |                                                        `- error: cannot find type 'QLearningState' in scope
438 |         (1 ... count).map { i in
439 |             createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:452:57: error: cannot find type 'QLearningAction' in scope
450 |     }
451 | 
452 |     private func createITContextActions(count: Int) -> [QLearningAction] {
    |                                                         `- error: cannot find type 'QLearningAction' in scope
453 |         let itValues = ["Cloud Services", "Software License", "IT Support", "Network Equipment", "Cybersecurity"]
454 |         return (1 ... count).map { i in

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:462:66: error: cannot find type 'QLearningState' in scope
460 |     }
461 | 
462 |     private func createConstructionContextStates(count: Int) -> [QLearningState] {
    |                                                                  `- error: cannot find type 'QLearningState' in scope
463 |         (1 ... count).map { i in
464 |             createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:477:67: error: cannot find type 'QLearningAction' in scope
475 |     }
476 | 
477 |     private func createConstructionContextActions(count: Int) -> [QLearningAction] {
    |                                                                   `- error: cannot find type 'QLearningAction' in scope
478 |         let constructionValues = ["Performance Bond", "Prevailing Wage", "Safety Requirements", "Building Materials", "Contractor Services"]
479 |         return (1 ... count).map { i in

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:507:55: error: cannot find type 'QLearningState' in scope
505 |     }
506 | 
507 |     private func calculateContextPerformance(states: [QLearningState], actions: [QLearningAction]) async -> Double {
    |                                                       `- error: cannot find type 'QLearningState' in scope
508 |         var totalQValue: Double = 0
509 |         var count = 0

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:507:82: error: cannot find type 'QLearningAction' in scope
505 |     }
506 | 
507 |     private func calculateContextPerformance(states: [QLearningState], actions: [QLearningAction]) async -> Double {
    |                                                                                  `- error: cannot find type 'QLearningAction' in scope
508 |         var totalQValue: Double = 0
509 |         var count = 0

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:526:32: error: cannot find type 'CoreDataActorProtocol' in scope
524 | 
525 | /// Mock Core Data actor for testing
526 | final class MockCoreDataActor: CoreDataActorProtocol {
    |                                `- error: cannot find type 'CoreDataActorProtocol' in scope
527 |     private var storage: [String: Any] = [:]
528 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:568:16: error: cannot find type 'QLearningState' in scope
566 | /// Q-Learning experience for replay buffer testing
567 | struct QLearningExperience {
568 |     let state: QLearningState
    |                `- error: cannot find type 'QLearningState' in scope
569 |     let action: QLearningAction
570 |     let reward: Double

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:569:17: error: cannot find type 'QLearningAction' in scope
567 | struct QLearningExperience {
568 |     let state: QLearningState
569 |     let action: QLearningAction
    |                 `- error: cannot find type 'QLearningAction' in scope
570 |     let reward: Double
571 |     let nextState: QLearningState

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:571:20: error: cannot find type 'QLearningState' in scope
569 |     let action: QLearningAction
570 |     let reward: Double
571 |     let nextState: QLearningState
    |                    `- error: cannot find type 'QLearningState' in scope
572 | }
573 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:576:11: error: cannot find type 'FieldType' in scope
574 | // MARK: - Extensions for Testing
575 | 
576 | extension FieldType: CaseIterable {
    |           `- error: cannot find type 'FieldType' in scope
577 |     public static let allCases: [FieldType] = [.textField, .dropdownField, .numberField, .dateField]
578 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:580:11: error: cannot find type 'ContextCategory' in scope
578 | }
579 | 
580 | extension ContextCategory: CaseIterable {
    |           `- error: cannot find type 'ContextCategory' in scope
581 |     public static let allCases: [ContextCategory] = [.informationTechnology, .construction, .professionalServices, .general]
582 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:584:11: error: cannot find type 'UserSegment' in scope
582 | }
583 | 
584 | extension UserSegment: CaseIterable {
    |           `- error: cannot find type 'UserSegment' in scope
585 |     public static let allCases: [UserSegment] = [.novice, .intermediate, .expert]
586 | }

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:23:15: error: cannot find 'FormFieldQLearningAgent' in scope
 21 | 
 22 |         // Create system under test
 23 |         sut = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
    |               `- error: cannot find 'FormFieldQLearningAgent' in scope
 24 | 
 25 |         // Wait for actor initialization

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:47:65: error: cannot infer contextual base in reference to member 'textField'
 45 |         }
 46 |         // Given: Initial state and action
 47 |         let initialState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                 `- error: cannot infer contextual base in reference to member 'textField'
 48 |         let testAction = createTestQLearningAction(value: "NET-30", confidence: 0.8)
 49 |         let reward = 1.0 // User accepted suggestion

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:47:86: error: cannot infer contextual base in reference to member 'informationTechnology'
 45 |         }
 46 |         // Given: Initial state and action
 47 |         let initialState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                      `- error: cannot infer contextual base in reference to member 'informationTechnology'
 48 |         let testAction = createTestQLearningAction(value: "NET-30", confidence: 0.8)
 49 |         let reward = 1.0 // User accepted suggestion

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:69:58: error: cannot infer contextual base in reference to member 'dropdownField'
 67 |         }
 68 |         // Given: Known Q-value and reward
 69 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                          `- error: cannot infer contextual base in reference to member 'dropdownField'
 70 |         let action = createTestQLearningAction(value: "Performance Bond Required", confidence: 0.9)
 71 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:69:83: error: cannot infer contextual base in reference to member 'construction'
 67 |         }
 68 |         // Given: Known Q-value and reward
 69 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'construction'
 70 |         let action = createTestQLearningAction(value: "Performance Bond Required", confidence: 0.9)
 71 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:96:59: error: cannot infer contextual base in reference to member 'textField'
 94 |         }
 95 |         // Given: Multi-step scenario with future rewards
 96 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:96:80: error: cannot infer contextual base in reference to member 'informationTechnology'
 94 |         }
 95 |         // Given: Multi-step scenario with future rewards
 96 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:99:59: error: cannot infer contextual base in reference to member 'textField'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 
 99 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
100 |         let action2 = createTestQLearningAction(value: "Annual Subscription", confidence: 0.8)
101 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:99:80: error: cannot infer contextual base in reference to member 'informationTechnology'
 97 |         let action1 = createTestQLearningAction(value: "Software License", confidence: 0.7)
 98 | 
 99 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
100 |         let action2 = createTestQLearningAction(value: "Annual Subscription", confidence: 0.8)
101 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:178:60: error: cannot infer contextual base in reference to member 'textField'
176 |         }
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                            `- error: cannot infer contextual base in reference to member 'textField'
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
180 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:178:81: error: cannot infer contextual base in reference to member 'informationTechnology'
176 |         }
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                 `- error: cannot infer contextual base in reference to member 'informationTechnology'
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
180 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:179:70: error: cannot infer contextual base in reference to member 'textField'
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                                      `- error: cannot infer contextual base in reference to member 'textField'
180 | 
181 |         let itAction = createTestQLearningAction(value: "Cloud Services", confidence: 0.9)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:179:91: error: cannot infer contextual base in reference to member 'construction'
177 |         // Given: Distinct context patterns
178 |         let itState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
179 |         let constructionState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                                                           `- error: cannot infer contextual base in reference to member 'construction'
180 | 
181 |         let itAction = createTestQLearningAction(value: "Cloud Services", confidence: 0.9)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:253:58: error: cannot infer contextual base in reference to member 'textField'
251 |         }
252 |         // Given: Known optimal action
253 |         let state = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                          `- error: cannot infer contextual base in reference to member 'textField'
254 |         let optimalAction = createTestQLearningAction(value: "Optimal Choice", confidence: 1.0)
255 |         let suboptimalAction = createTestQLearningAction(value: "Poor Choice", confidence: 0.3)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:253:79: error: cannot infer contextual base in reference to member 'informationTechnology'
251 |         }
252 |         // Given: Known optimal action
253 |         let state = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                               `- error: cannot infer contextual base in reference to member 'informationTechnology'
254 |         let optimalAction = createTestQLearningAction(value: "Optimal Choice", confidence: 1.0)
255 |         let suboptimalAction = createTestQLearningAction(value: "Poor Choice", confidence: 0.3)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:292:58: error: cannot infer contextual base in reference to member 'dropdownField'
290 |         }
291 |         // Given: State with multiple visits
292 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                          `- error: cannot infer contextual base in reference to member 'dropdownField'
293 |         let action = createTestQLearningAction(value: "Test Value", confidence: 0.7)
294 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:292:83: error: cannot infer contextual base in reference to member 'construction'
290 |         }
291 |         // Given: State with multiple visits
292 |         let state = createTestQLearningState(fieldType: .dropdownField, context: .construction)
    |                                                                                   `- error: cannot infer contextual base in reference to member 'construction'
293 |         let action = createTestQLearningAction(value: "Test Value", confidence: 0.7)
294 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:321:69: error: cannot infer contextual base in reference to member 'textField'
319 |         }
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                     `- error: cannot infer contextual base in reference to member 'textField'
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:321:90: error: cannot infer contextual base in reference to member 'informationTechnology'
319 |         }
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                          `- error: cannot infer contextual base in reference to member 'informationTechnology'
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:322:61: error: cannot infer contextual base in reference to member 'textField'
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                             `- error: cannot infer contextual base in reference to member 'textField'
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)
324 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:322:82: error: cannot infer contextual base in reference to member 'construction'
320 |         // Given: Two different states
321 |         let experiencedState = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
322 |         let newState = createTestQLearningState(fieldType: .textField, context: .construction)
    |                                                                                  `- error: cannot infer contextual base in reference to member 'construction'
323 |         let action = createTestQLearningAction(value: "Test", confidence: 0.5)
324 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:344:59: error: cannot infer contextual base in reference to member 'textField'
342 |     func testStateHashingConsistency() async throws {
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
346 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:344:80: error: cannot infer contextual base in reference to member 'informationTechnology'
342 |     func testStateHashingConsistency() async throws {
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
346 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:345:59: error: cannot infer contextual base in reference to member 'textField'
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                           `- error: cannot infer contextual base in reference to member 'textField'
346 | 
347 |         // When: Generate cache keys

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:345:80: error: cannot infer contextual base in reference to member 'informationTechnology'
343 |         // Given: Identical state parameters
344 |         let state1 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
345 |         let state2 = createTestQLearningState(fieldType: .textField, context: .informationTechnology)
    |                                                                                `- error: cannot infer contextual base in reference to member 'informationTechnology'
346 | 
347 |         // When: Generate cache keys

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:370:34: error: cannot find 'TemporalContext' in scope
368 |                 context: .general,
369 |                 userSegment: .novice,
370 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: (i % 7) + 1, isWeekend: false)
    |                                  `- error: cannot find 'TemporalContext' in scope
371 |             )
372 |             let action = createTestQLearningAction(value: "Value \(i)", confidence: 0.5)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:367:29: error: cannot infer contextual base in reference to member 'textField'
365 |         for i in 1 ... (maxCapacity + 1000) {
366 |             let state = createTestQLearningState(
367 |                 fieldType: .textField,
    |                             `- error: cannot infer contextual base in reference to member 'textField'
368 |                 context: .general,
369 |                 userSegment: .novice,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:368:27: error: cannot infer contextual base in reference to member 'general'
366 |             let state = createTestQLearningState(
367 |                 fieldType: .textField,
368 |                 context: .general,
    |                           `- error: cannot infer contextual base in reference to member 'general'
369 |                 userSegment: .novice,
370 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: (i % 7) + 1, isWeekend: false)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:369:31: error: cannot infer contextual base in reference to member 'novice'
367 |                 fieldType: .textField,
368 |                 context: .general,
369 |                 userSegment: .novice,
    |                               `- error: cannot infer contextual base in reference to member 'novice'
370 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: (i % 7) + 1, isWeekend: false)
371 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:400:34: error: cannot find 'TemporalContext' in scope
398 |                 context: .general,
399 |                 userSegment: .novice,
400 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: 1, isWeekend: false)
    |                                  `- error: cannot find 'TemporalContext' in scope
401 |             )
402 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:397:29: error: cannot infer contextual base in reference to member 'textField'
395 |         for i in 1 ... (cacheCapacity + 100) {
396 |             let state = createTestQLearningState(
397 |                 fieldType: .textField,
    |                             `- error: cannot infer contextual base in reference to member 'textField'
398 |                 context: .general,
399 |                 userSegment: .novice,

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:398:27: error: cannot infer contextual base in reference to member 'general'
396 |             let state = createTestQLearningState(
397 |                 fieldType: .textField,
398 |                 context: .general,
    |                           `- error: cannot infer contextual base in reference to member 'general'
399 |                 userSegment: .novice,
400 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: 1, isWeekend: false)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:399:31: error: cannot infer contextual base in reference to member 'novice'
397 |                 fieldType: .textField,
398 |                 context: .general,
399 |                 userSegment: .novice,
    |                               `- error: cannot infer contextual base in reference to member 'novice'
400 |                 temporalContext: TemporalContext(hourOfDay: i % 24, dayOfWeek: 1, isWeekend: false)
401 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:491:32: error: cannot find 'FieldType' in scope
489 |             QLearningExperience(
490 |                 state: createTestQLearningState(
491 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
    |                                `- error: cannot find 'FieldType' in scope
492 |                     context: ContextCategory.allCases.randomElement() ?? .general
493 |                 ),

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:492:30: error: cannot find 'ContextCategory' in scope
490 |                 state: createTestQLearningState(
491 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
492 |                     context: ContextCategory.allCases.randomElement() ?? .general
    |                              `- error: cannot find 'ContextCategory' in scope
493 |                 ),
494 |                 action: createTestQLearningAction(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:500:32: error: cannot find 'FieldType' in scope
498 |                 reward: Double.random(in: -1.0 ... 1.0),
499 |                 nextState: createTestQLearningState(
500 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
    |                                `- error: cannot find 'FieldType' in scope
501 |                     context: ContextCategory.allCases.randomElement() ?? .general
502 |                 )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:501:30: error: cannot find 'ContextCategory' in scope
499 |                 nextState: createTestQLearningState(
500 |                     fieldType: FieldType.allCases.randomElement() ?? .textField,
501 |                     context: ContextCategory.allCases.randomElement() ?? .general
    |                              `- error: cannot find 'ContextCategory' in scope
502 |                 )
503 |             )

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:488:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
486 | 
487 |     private func createRandomExperiences(count: Int) -> [QLearningExperience] {
488 |         (1 ... count).map { i in
    |         `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions
489 |             QLearningExperience(
490 |                 state: createTestQLearningState(

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:519:17: error: cannot find 'isEmpty' in scope
517 |         }
518 | 
519 |         return !isEmpty ? totalQValue / Double(count) : 0.0
    |                 `- error: cannot find 'isEmpty' in scope
520 |     }
521 | }

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:28:69: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 26 |             return
 27 |         }
 28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 29 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
 30 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:29:74: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 27 |         }
 28 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
 29 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
    |                                                                          `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
 30 |         let explanationEngine = ValueExplanationEngine()
 31 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:32:35: error: ambiguous use of 'init()'
 30 |         let explanationEngine = ValueExplanationEngine()
 31 |         let metricsCollector = AdaptiveFormMetricsCollector()
 32 |         let agenticOrchestrator = MockAgenticOrchestrator()
    |                                   `- error: ambiguous use of 'init()'
 33 | 
 34 |         let adaptiveFormService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate 
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate 
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate 
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate 
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:48:44: error: extra arguments at positions #1, #4, #5, #6, #7 in call
 46 |     func testAcquisitionContextClassifier_canClassifyContext() async throws {
 47 |         let classifier = AcquisitionContextClassifier()
 48 |         let testData = AcquisitionAggregate(
    |                                            `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
 49 |             id: UUID(),
 50 |             title: "IT Services Contract",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:49:23: error: missing argument for parameter 'description' in call
 47 |         let classifier = AcquisitionContextClassifier()
 48 |         let testData = AcquisitionAggregate(
 49 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
 50 |             title: "IT Services Contract",
 51 |             requirements: "Software development with cloud computing. We need cloud hosting and database management services.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:51:27: error: cannot convert value of type 'String' to expected argument type '[String]'
 49 |             id: UUID(),
 50 |             title: "IT Services Contract",
 51 |             requirements: "Software development with cloud computing. We need cloud hosting and database management services.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
 52 |             projectDescription: "Software development with cloud computing",
 53 |             estimatedValue: 100_000,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:58:43: error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 56 |         )
 57 | 
 58 |         let result = try await classifier.classifyAcquisition(testData)
    |                                           `- error: value of type 'AcquisitionContextClassifier' has no member 'classifyAcquisition'
 59 | 
 60 |         XCTAssertEqual(result.category, .informationTechnology)

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:60:42: error: type 'Equatable' has no member 'informationTechnology'
 58 |         let result = try await classifier.classifyAcquisition(testData)
 59 | 
 60 |         XCTAssertEqual(result.category, .informationTechnology)
    |                                          `- error: type 'Equatable' has no member 'informationTechnology'
 61 |         XCTAssertGreaterThan(result.confidence, 0.5)
 62 |     }

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:65:69: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 63 | 
 64 |     func testFormFieldQLearningAgent_canPredictFieldValue() async throws {
 65 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: mockCoreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 66 | 
 67 |         // Create test state

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:72:30: error: value of optional type 'TemporalContext?' must be unwrapped to a value of type 'TemporalContext'
 70 |             contextCategory: .informationTechnology,
 71 |             userSegment: .intermediate,
 72 |             temporalContext: TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                              |- error: value of optional type 'TemporalContext?' must be unwrapped to a value of type 'TemporalContext'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 73 |         )
 74 | 

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:72:45: error: extra arguments at positions #1, #2, #3 in call
 70 |             contextCategory: .informationTechnology,
 71 |             userSegment: .intermediate,
 72 |             temporalContext: TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                                             `- error: extra arguments at positions #1, #2, #3 in call
 73 |         )
 74 | 

AppCore.TemporalContext.init:2:19: note: 'init(rawValue:)' declared here
1 | enum TemporalContext {
2 | @inlinable public init?(rawValue: String)}
  |                   `- note: 'init(rawValue:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:72:46: error: missing argument for parameter 'rawValue' in call
 70 |             contextCategory: .informationTechnology,
 71 |             userSegment: .intermediate,
 72 |             temporalContext: TemporalContext(hourOfDay: 12, dayOfWeek: 3, isWeekend: false)
    |                                              `- error: missing argument for parameter 'rawValue' in call
 73 |         )
 74 | 

AppCore.TemporalContext.init:2:19: note: 'init(rawValue:)' declared here
1 | enum TemporalContext {
2 | @inlinable public init?(rawValue: String)}
  |                   `- note: 'init(rawValue:)' declared here
3 | 

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:83:62: error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 81 | 
 82 |     func testFormModificationTracker_canTrackModifications() async throws {
 83 |         let tracker = FormModificationTracker(coreDataActor: mockCoreDataActor)
    |                                                              `- error: argument type 'MockCoreDataActor?' does not conform to expected type 'CoreDataActor'
 84 | 
 85 |         // Test basic modification tracking

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:129:38: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
127 |         let engine = ValueExplanationEngine()
128 | 
129 |         let userProfile = UserProfile(
    |                                      `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
130 |             id: UUID(),
131 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:129:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
127 |         let engine = ValueExplanationEngine()
128 | 
129 |         let userProfile = UserProfile(
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
130 |             id: UUID(),
131 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:144:31: error: 'nil' requires a contextual type
142 |             defaultPaymentAddress: Address(),
143 |             defaultDeliveryAddress: Address(),
144 |             profileImageData: nil,
    |                               `- error: 'nil' requires a contextual type
145 |             organizationLogoData: nil,
146 |             website: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:145:35: error: 'nil' requires a contextual type
143 |             defaultDeliveryAddress: Address(),
144 |             profileImageData: nil,
145 |             organizationLogoData: nil,
    |                                   `- error: 'nil' requires a contextual type
146 |             website: "",
147 |             linkedIn: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:161:53: error: extra arguments at positions #1, #2, #3, #4, #5 in call
159 |         let confidence = 0.85
160 | 
161 |         let explanation = engine.generateExplanation(
    |                                                     `- error: extra arguments at positions #1, #2, #3, #4, #5 in call
162 |             fieldName: fieldName,
163 |             suggestedValue: suggestedValue,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/ValueExplanationEngine.swift:39:17: note: 'generateExplanation(for:)' declared here
 37 | 
 38 |     /// Generate explanation for a field prediction
 39 |     public func generateExplanation(for prediction: FieldPrediction) -> FieldExplanation {
    |                 `- note: 'generateExplanation(for:)' declared here
 40 |         let explanation = createExplanation(
 41 |             fieldId: prediction.fieldId,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:162:13: error: missing argument for parameter 'for' in call
160 | 
161 |         let explanation = engine.generateExplanation(
162 |             fieldName: fieldName,
    |             `- error: missing argument for parameter 'for' in call
163 |             suggestedValue: suggestedValue,
164 |             confidence: confidence,

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/ValueExplanationEngine.swift:39:17: note: 'generateExplanation(for:)' declared here
 37 | 
 38 |     /// Generate explanation for a field prediction
 39 |     public func generateExplanation(for prediction: FieldPrediction) -> FieldExplanation {
    |                 `- note: 'generateExplanation(for:)' declared here
 40 |         let explanation = createExplanation(
 41 |             fieldId: prediction.fieldId,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:223:38: error: value of type 'PrivacyComplianceValidator' has no member 'validateDataPrivacy'
221 |         ]
222 | 
223 |         let result = await validator.validateDataPrivacy(testData)
    |                                      `- error: value of type 'PrivacyComplianceValidator' has no member 'validateDataPrivacy'
224 | 
225 |         XCTAssertFalse(result.hasPrivacyViolations)

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:238:69: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
236 |             return
237 |         }
238 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
    |                                                                     `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
239 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
240 |         let explanationEngine = ValueExplanationEngine()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:239:74: error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
237 |         }
238 |         let qLearningAgent = FormFieldQLearningAgent(coreDataActor: coreDataActor)
239 |         let modificationTracker = FormModificationTracker(coreDataActor: coreDataActor)
    |                                                                          `- error: argument type 'MockCoreDataActor' does not conform to expected type 'CoreDataActor'
240 |         let explanationEngine = ValueExplanationEngine()
241 |         let metricsCollector = AdaptiveFormMetricsCollector()

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:242:35: error: ambiguous use of 'init()'
240 |         let explanationEngine = ValueExplanationEngine()
241 |         let metricsCollector = AdaptiveFormMetricsCollector()
242 |         let agenticOrchestrator = MockAgenticOrchestrator()
    |                                   `- error: ambiguous use of 'init()'
243 | 
244 |         let adaptiveFormService = AdaptiveFormPopulationService(

/Users/J/aiko/Tests/AdaptiveFormRL/AdaptiveFormPrivacyTests.swift:905:13: note: found this candidate 
903 | // MARK: - Mock Classes
904 | 
905 | final class MockAgenticOrchestrator: AgenticOrchestratorProtocol {
    |             `- note: found this candidate 
906 |     func recordLearningEvent(agentId _: String, outcome _: LearningOutcome, confidence _: Double) async {
907 |         // Mock implementation

/Users/J/aiko/Tests/AgenticSuggestionUI/AgenticOrchestratorIntegrationTests.swift:311:7: note: found this candidate 
309 | // MARK: - Enhanced Mock Classes for Integration Testing
310 | 
311 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
312 |     var makeDecisionCallCount = 0
313 |     var provideFeedbackCallCount = 0

/Users/J/aiko/Tests/AgenticSuggestionUI/SuggestionViewModelTests.swift:399:7: note: found this candidate 
397 | // MARK: - Enhanced Mock Types
398 | 
399 | class MockAgenticOrchestrator: Sendable {
    |       `- note: found this candidate 
400 |     var shouldThrowError = false
401 |     var networkError = false

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:262:38: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
260 |         ])
261 | 
262 |         let userProfile = UserProfile(
    |                                      `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25 in call
263 |             id: UUID(),
264 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:262:38: error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
260 |         ])
261 | 
262 |         let userProfile = UserProfile(
    |                                      `- error: missing arguments for parameters 'userId', 'clearanceLevel', 'roles', 'accessLevel' in call
263 |             id: UUID(),
264 |             fullName: "Test User",

/Users/J/aiko/Tests/AgenticSuggestionUI/SecurityTests.swift:717:8: note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 715 | }
 716 | 
 717 | struct UserProfile {
     |        `- note: 'init(userId:clearanceLevel:roles:accessLevel:)' declared here
 718 |     let userId: String
 719 |     let clearanceLevel: ClearanceLevel

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:277:31: error: 'nil' requires a contextual type
275 |             defaultPaymentAddress: Address(),
276 |             defaultDeliveryAddress: Address(),
277 |             profileImageData: nil,
    |                               `- error: 'nil' requires a contextual type
278 |             organizationLogoData: nil,
279 |             website: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:278:35: error: 'nil' requires a contextual type
276 |             defaultDeliveryAddress: Address(),
277 |             profileImageData: nil,
278 |             organizationLogoData: nil,
    |                                   `- error: 'nil' requires a contextual type
279 |             website: "",
280 |             linkedIn: "",

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:290:56: error: extra arguments at positions #1, #4, #5, #6, #7 in call
288 |         )
289 | 
290 |         let acquisitionAggregate = AcquisitionAggregate(
    |                                                        `- error: extra arguments at positions #1, #4, #5, #6, #7 in call
291 |             id: UUID(),
292 |             title: "IT Services Contract",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:291:23: error: missing argument for parameter 'description' in call
289 | 
290 |         let acquisitionAggregate = AcquisitionAggregate(
291 |             id: UUID(),
    |                       `- error: missing argument for parameter 'description' in call
292 |             title: "IT Services Contract",
293 |             requirements: "Software development with cloud hosting. We need cloud services and software development expertise.",

/Users/J/aiko/Sources/AppCore/Services/AdaptiveFormRL/AcquisitionContextClassifier.swift:300:12: note: 'init(title:description:requirements:)' declared here
298 |     public let requirements: [String]?
299 | 
300 |     public init(title: String?, description: String?, requirements: [String]?) {
    |            `- note: 'init(title:description:requirements:)' declared here
301 |         self.title = title
302 |         self.description = description

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:293:27: error: cannot convert value of type 'String' to expected argument type '[String]'
291 |             id: UUID(),
292 |             title: "IT Services Contract",
293 |             requirements: "Software development with cloud hosting. We need cloud services and software development expertise.",
    |                           `- error: cannot convert value of type 'String' to expected argument type '[String]'
294 |             projectDescription: "Software development with cloud hosting",
295 |             estimatedValue: 150_000,

/Users/J/aiko/Tests/AdaptiveFormRL/SimpleAdaptiveFormRLTests.swift:307:40: error: type 'Equatable' has no member 'adaptive'
305 |         )
306 | 
307 |         XCTAssertEqual(result.source, .adaptive)
    |                                        `- error: type 'Equatable' has no member 'adaptive'
308 |         XCTAssertFalse(result.predictions.isEmpty)
309 |         XCTAssertGreaterThan(result.confidence, 0.0)

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:577:34: error: cannot find type 'FieldType' in scope
575 | 
576 | extension FieldType: CaseIterable {
577 |     public static let allCases: [FieldType] = [.textField, .dropdownField, .numberField, .dateField]
    |                                  `- error: cannot find type 'FieldType' in scope
578 | }
579 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:581:34: error: cannot find type 'ContextCategory' in scope
579 | 
580 | extension ContextCategory: CaseIterable {
581 |     public static let allCases: [ContextCategory] = [.informationTechnology, .construction, .professionalServices, .general]
    |                                  `- error: cannot find type 'ContextCategory' in scope
582 | }
583 | 

/Users/J/aiko/Tests/AdaptiveFormRL/FormFieldQLearningAgentTests.swift:585:34: error: cannot find type 'UserSegment' in scope
583 | 
584 | extension UserSegment: CaseIterable {
585 |     public static let allCases: [UserSegment] = [.novice, .intermediate, .expert]
    |                                  `- error: cannot find type 'UserSegment' in scope
586 | }
587 | 
[31/35] Compiling AIKOTests LLMProviderSettingsProtocolTests.swift
/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:778:6: error: invalid redeclaration of 'TestError'
776 | }
777 | 
778 | enum TestError: Error, LocalizedError {
    |      `- error: invalid redeclaration of 'TestError'
779 |     case configurationFailed
780 |     case networkError

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:34:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 32 |         mockService = MockLLMProviderSettingsService(
 33 |             biometricService: mockBiometricService,
 34 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 35 |             configurationService: mockConfigService
 36 |         )

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:35:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 33 |             biometricService: mockBiometricService,
 34 |             keychainService: mockKeychainService,
 35 |             configurationService: mockConfigService
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 36 |         )
 37 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:39:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 37 | 
 38 |         viewModel = LLMProviderSettingsViewModel(
 39 |             configurationService: mockConfigService,
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 40 |             keychainService: mockKeychainService,
 41 |             settingsService: mockService

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:40:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 38 |         viewModel = LLMProviderSettingsViewModel(
 39 |             configurationService: mockConfigService,
 40 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 41 |             settingsService: mockService
 42 |         )

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:41:30: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
 39 |             configurationService: mockConfigService,
 40 |             keychainService: mockKeychainService,
 41 |             settingsService: mockService
    |                              |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 42 |         )
 43 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:61:33: warning: 'is' test is always true
 59 |             return
 60 |         }
 61 |         XCTAssertTrue(viewModel is any LLMProviderSettingsViewModelProtocol)
    |                                 `- warning: 'is' test is always true
 62 |     }
 63 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:175:33: warning: 'is' test is always true
173 |             return
174 |         }
175 |         XCTAssertTrue(viewModel is ObservableObject)
    |                                 `- warning: 'is' test is always true
176 | 
177 |         // Test that property changes trigger objectWillChange

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:175:36: warning: use of 'ObservableObject' as a type must be written 'any ObservableObject'; this will be an error in a future Swift language mode
173 |             return
174 |         }
175 |         XCTAssertTrue(viewModel is ObservableObject)
    |                                    `- warning: use of 'ObservableObject' as a type must be written 'any ObservableObject'; this will be an error in a future Swift language mode
176 | 
177 |         // Test that property changes trigger objectWillChange

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:252:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
250 |     func test_loadConfigurations_stateTransition_idleToLoading() async {
251 |         // RED: Should fail - state management not implemented
252 |         XCTAssertEqual(viewModel.uiState, .idle)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
253 | 
254 |         let task = Task {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:255:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
253 | 
254 |         let task = Task {
255 |             await viewModel.loadConfigurations()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
256 |         }
257 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:263:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
261 | 
262 |         // This will fail in RED phase as state management is not implemented
263 |         XCTAssertNotEqual(viewModel.uiState, .idle)
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
264 |     }
265 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:260:9: warning: no 'async' operations occur within 'await' expression
258 |         // State should transition to loading (but will fail in RED phase)
259 |         try? await Task.sleep(nanoseconds: 10_000_000) // 10ms
260 |         await task.value
    |         `- warning: no 'async' operations occur within 'await' expression
261 | 
262 |         // This will fail in RED phase as state management is not implemented

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:268:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
266 |     func test_loadConfigurations_stateTransition_loadingToLoaded() async {
267 |         // RED: Should fail - state transitions not implemented
268 |         mockConfigService.shouldSucceed = true
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
269 | 
270 |         await viewModel.loadConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:270:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
268 |         mockConfigService.shouldSucceed = true
269 | 
270 |         await viewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
271 | 
272 |         // Should be loaded state (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:273:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
271 | 
272 |         // Should be loaded state (will fail in RED phase)
273 |         XCTAssertEqual(viewModel.uiState, .loaded)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
274 |     }
275 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:278:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
276 |     func test_loadConfigurations_stateTransition_loadingToError() async {
277 |         // RED: Should fail - error handling not implemented
278 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
279 |         mockConfigService.errorToThrow = TestError.configurationFailed
280 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:279:52: error: type 'TestError' has no member 'configurationFailed'
277 |         // RED: Should fail - error handling not implemented
278 |         mockConfigService.shouldSucceed = false
279 |         mockConfigService.errorToThrow = TestError.configurationFailed
    |                                                    `- error: type 'TestError' has no member 'configurationFailed'
280 | 
281 |         await viewModel.loadConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:281:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
279 |         mockConfigService.errorToThrow = TestError.configurationFailed
280 | 
281 |         await viewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
282 | 
283 |         // Should be error state (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:284:39: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
282 | 
283 |         // Should be error state (will fail in RED phase)
284 |         if case let .error(message) = viewModel.uiState {
    |                                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                       |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
285 |             XCTAssertFalse(message.isEmpty)
286 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:293:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
291 |     func test_saveConfiguration_stateTransition_loadedToSaving() async {
292 |         // RED: Should fail - saving state not implemented
293 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
294 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
295 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:294:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
292 |         // RED: Should fail - saving state not implemented
293 |         viewModel.selectedProvider = .claude
294 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
295 | 
296 |         let task = Task {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:297:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
295 | 
296 |         let task = Task {
297 |             await viewModel.saveProviderConfiguration()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
298 |         }
299 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:305:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
303 | 
304 |         // This will fail in RED phase
305 |         XCTAssertTrue(viewModel.providerConfigState?.isSaving == true || viewModel.uiState == .saving)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
306 |     }
307 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:305:74: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
303 | 
304 |         // This will fail in RED phase
305 |         XCTAssertTrue(viewModel.providerConfigState?.isSaving == true || viewModel.uiState == .saving)
    |                                                                          |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                                                          |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                                                                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
306 |     }
307 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:311:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
309 |         // RED: Should pass - @Observable should trigger updates
310 |         let expectation = XCTestExpectation(description: "State change triggers update")
311 |         let cancellable = viewModel.objectWillChange.sink {
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'objectWillChange' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
312 |             expectation.fulfill()
313 |         }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:315:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
313 |         }
314 | 
315 |         viewModel.uiState = .loading
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
316 |         wait(for: [expectation], timeout: 1.0)
317 |         cancellable.cancel()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:324:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
322 |         let tasks = (0 ..< 10).map { _ in
323 |             Task {
324 |                 await viewModel.loadConfigurations()
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
325 |             }
326 |         }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:338:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
336 |         // State should be consistent (will fail in RED phase)
337 |         // Note: This test is designed to fail as concurrent state management is not implemented
338 |         XCTAssertFalse(viewModel.uiState == .loading, "Should not be stuck in loading state after concurrent operations")
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
339 |     }
340 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:343:29: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
341 |     func test_stateRollback_onOperationFailure() async {
342 |         // RED: Should fail - rollback not implemented
343 |         let originalState = viewModel.uiState
    |                             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                             |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
344 |         mockConfigService.shouldSucceed = false
345 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:344:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
342 |         // RED: Should fail - rollback not implemented
343 |         let originalState = viewModel.uiState
344 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
345 | 
346 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:346:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
344 |         mockConfigService.shouldSucceed = false
345 | 
346 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
347 | 
348 |         // State should rollback on failure (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:349:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
347 | 
348 |         // State should rollback on failure (will fail in RED phase)
349 |         XCTAssertEqual(viewModel.uiState, originalState)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
350 |     }
351 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:354:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
352 |     func test_stateConsistency_acrossAsyncOperations() async {
353 |         // RED: Should fail - state consistency not guaranteed
354 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
355 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
356 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:355:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
353 |         // RED: Should fail - state consistency not guaranteed
354 |         viewModel.selectedProvider = .claude
355 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
356 | 
357 |         // Start multiple operations - capture viewModel to avoid concurrent access issues

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:362:19: warning: constant 'load' inferred to have type '()', which may be unexpected
360 |             return
361 |         }
362 |         async let load = localViewModel.loadConfigurations()
    |                   |- warning: constant 'load' inferred to have type '()', which may be unexpected
    |                   `- note: add an explicit type annotation to silence this warning
363 |         async let save = localViewModel.saveProviderConfiguration()
364 |         async let clear = localViewModel.clearAllConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:363:19: warning: constant 'save' inferred to have type '()', which may be unexpected
361 |         }
362 |         async let load = localViewModel.loadConfigurations()
363 |         async let save = localViewModel.saveProviderConfiguration()
    |                   |- warning: constant 'save' inferred to have type '()', which may be unexpected
    |                   `- note: add an explicit type annotation to silence this warning
364 |         async let clear = localViewModel.clearAllConfigurations()
365 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:364:19: warning: constant 'clear' inferred to have type '()', which may be unexpected
362 |         async let load = localViewModel.loadConfigurations()
363 |         async let save = localViewModel.saveProviderConfiguration()
364 |         async let clear = localViewModel.clearAllConfigurations()
    |                   |- warning: constant 'clear' inferred to have type '()', which may be unexpected
    |                   `- note: add an explicit type annotation to silence this warning
365 | 
366 |         await load

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:371:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
369 | 
370 |         // State should be consistent (will fail in RED phase)
371 |         XCTAssertNotEqual(viewModel.uiState, .loading) // Should not be stuck in loading
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
372 |     }
373 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:378:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
376 |     func test_selectProvider_updatesSelectedProvider() {
377 |         // RED: Should pass - basic property setting
378 |         viewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
379 |         XCTAssertEqual(viewModel.selectedProvider, .claude)
380 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:379:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
377 |         // RED: Should pass - basic property setting
378 |         viewModel.selectProvider(.claude)
379 |         XCTAssertEqual(viewModel.selectedProvider, .claude)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
380 |     }
381 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:384:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
382 |     func test_selectProvider_presentsConfigurationSheet() {
383 |         // RED: Should fail - sheet presentation logic not implemented
384 |         viewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
385 |         XCTAssertTrue(viewModel.isProviderConfigSheetPresented)
386 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:385:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
383 |         // RED: Should fail - sheet presentation logic not implemented
384 |         viewModel.selectProvider(.claude)
385 |         XCTAssertTrue(viewModel.isProviderConfigSheetPresented)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
386 |     }
387 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:390:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
388 |     func test_selectProvider_initializesProviderConfigState() {
389 |         // RED: Should fail - config state initialization not implemented
390 |         viewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
391 | 
392 |         XCTAssertNotNil(viewModel.providerConfigState)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:392:25: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
390 |         viewModel.selectProvider(.claude)
391 | 
392 |         XCTAssertNotNil(viewModel.providerConfigState)
    |                         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:393:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
391 | 
392 |         XCTAssertNotNil(viewModel.providerConfigState)
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:394:25: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
392 |         XCTAssertNotNil(viewModel.providerConfigState)
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
    |                         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)
396 |         XCTAssertFalse(viewModel.providerConfigState?.customEndpoint.isEmpty == false)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:395:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
396 |         XCTAssertFalse(viewModel.providerConfigState?.customEndpoint.isEmpty == false)
397 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:396:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)
396 |         XCTAssertFalse(viewModel.providerConfigState?.customEndpoint.isEmpty == false)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
397 |     }
398 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:402:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
400 |         // RED: Should fail - error handling for no models not implemented
401 |         // This test simulates a provider with no available models
402 |         viewModel.selectProvider(.custom) // Custom provider might have no models
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
403 | 
404 |         // Should show error for no models (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:405:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
403 | 
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
406 |         if case let .error(message) = viewModel.alert {
407 |             XCTAssertTrue(message.contains("No models available"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:406:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
406 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
407 |             XCTAssertTrue(message.contains("No models available"))
408 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:406:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
406 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
407 |             XCTAssertTrue(message.contains("No models available"))
408 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:406:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
406 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
407 |             XCTAssertTrue(message.contains("No models available"))
408 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:415:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
413 |     func test_updateAPIKey_updatesProviderConfigState() {
414 |         // RED: Should fail - API key update not implemented
415 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
416 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
417 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:416:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
414 |         // RED: Should fail - API key update not implemented
415 |         viewModel.selectedProvider = .claude
416 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
417 | 
418 |         viewModel.updateAPIKey("sk-ant-test123")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:418:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateAPIKey' of wrapped base type 'LLMProviderSettingsViewModel'
416 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
417 | 
418 |         viewModel.updateAPIKey("sk-ant-test123")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateAPIKey' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateAPIKey' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
419 | 
420 |         XCTAssertEqual(viewModel.providerConfigState?.apiKey, "sk-ant-test123")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:420:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
418 |         viewModel.updateAPIKey("sk-ant-test123")
419 | 
420 |         XCTAssertEqual(viewModel.providerConfigState?.apiKey, "sk-ant-test123")
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
421 |     }
422 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:425:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
423 |     func test_updateSelectedModel_updatesProviderConfigState() {
424 |         // RED: Should fail - model update not implemented
425 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
426 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
427 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:426:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
424 |         // RED: Should fail - model update not implemented
425 |         viewModel.selectedProvider = .claude
426 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
427 | 
428 |         let newModel = TestFixtures.testModel

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:429:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
427 | 
428 |         let newModel = TestFixtures.testModel
429 |         viewModel.updateSelectedModel(newModel)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateSelectedModel' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
430 | 
431 |         XCTAssertEqual(viewModel.providerConfigState?.selectedModel, newModel)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:431:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
429 |         viewModel.updateSelectedModel(newModel)
430 | 
431 |         XCTAssertEqual(viewModel.providerConfigState?.selectedModel, newModel)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
432 |     }
433 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:436:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
434 |     func test_updateTemperature_validatesRange() {
435 |         // RED: Should fail - temperature validation not implemented
436 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
437 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
438 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:437:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
435 |         // RED: Should fail - temperature validation not implemented
436 |         viewModel.selectedProvider = .claude
437 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
438 | 
439 |         viewModel.updateTemperature(0.5)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:439:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
437 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
438 | 
439 |         viewModel.updateTemperature(0.5)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
440 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.5)
441 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:440:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
438 | 
439 |         viewModel.updateTemperature(0.5)
440 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.5)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
441 | 
442 |         // Test boundary values

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:443:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
441 | 
442 |         // Test boundary values
443 |         viewModel.updateTemperature(0.0)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
444 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.0)
445 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:444:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
442 |         // Test boundary values
443 |         viewModel.updateTemperature(0.0)
444 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.0)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
445 | 
446 |         viewModel.updateTemperature(1.0)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:446:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
444 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.0)
445 | 
446 |         viewModel.updateTemperature(1.0)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
447 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 1.0)
448 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:447:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
445 | 
446 |         viewModel.updateTemperature(1.0)
447 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 1.0)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
448 | 
449 |         // Test invalid values (should be clamped or rejected)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:450:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
448 | 
449 |         // Test invalid values (should be clamped or rejected)
450 |         viewModel.updateTemperature(-0.1)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
451 |         XCTAssertGreaterThanOrEqual(viewModel.providerConfigState?.temperature ?? 0, 0.0)
452 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:451:37: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
449 |         // Test invalid values (should be clamped or rejected)
450 |         viewModel.updateTemperature(-0.1)
451 |         XCTAssertGreaterThanOrEqual(viewModel.providerConfigState?.temperature ?? 0, 0.0)
    |                                     |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                     |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
452 | 
453 |         viewModel.updateTemperature(1.1)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:453:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
451 |         XCTAssertGreaterThanOrEqual(viewModel.providerConfigState?.temperature ?? 0, 0.0)
452 | 
453 |         viewModel.updateTemperature(1.1)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
454 |         XCTAssertLessThanOrEqual(viewModel.providerConfigState?.temperature ?? 1, 1.0)
455 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:454:34: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
452 | 
453 |         viewModel.updateTemperature(1.1)
454 |         XCTAssertLessThanOrEqual(viewModel.providerConfigState?.temperature ?? 1, 1.0)
    |                                  |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                  |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                  `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
455 |     }
456 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:459:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
457 |     func test_updateCustomEndpoint_validatesURL() {
458 |         // RED: Should fail - URL validation not implemented
459 |         viewModel.selectedProvider = .custom
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
460 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
461 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:460:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
458 |         // RED: Should fail - URL validation not implemented
459 |         viewModel.selectedProvider = .custom
460 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
461 | 
462 |         viewModel.updateCustomEndpoint("https://api.test.com")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:462:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
460 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
461 | 
462 |         viewModel.updateCustomEndpoint("https://api.test.com")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
463 |         XCTAssertEqual(viewModel.providerConfigState?.customEndpoint, "https://api.test.com")
464 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:463:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
461 | 
462 |         viewModel.updateCustomEndpoint("https://api.test.com")
463 |         XCTAssertEqual(viewModel.providerConfigState?.customEndpoint, "https://api.test.com")
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
464 | 
465 |         // Test invalid URLs (should show error or reject)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:466:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
464 | 
465 |         // Test invalid URLs (should show error or reject)
466 |         viewModel.updateCustomEndpoint("invalid-url")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
467 |         // Should either reject or show error (will fail in RED phase)
468 |         XCTAssertTrue(viewModel.alert != nil || viewModel.providerConfigState?.customEndpoint != "invalid-url")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:468:33: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
466 |         viewModel.updateCustomEndpoint("invalid-url")
467 |         // Should either reject or show error (will fail in RED phase)
468 |         XCTAssertTrue(viewModel.alert != nil || viewModel.providerConfigState?.customEndpoint != "invalid-url")
    |                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
469 |     }
470 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:468:49: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
466 |         viewModel.updateCustomEndpoint("invalid-url")
467 |         // Should either reject or show error (will fail in RED phase)
468 |         XCTAssertTrue(viewModel.alert != nil || viewModel.providerConfigState?.customEndpoint != "invalid-url")
    |                                                 |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                                 |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
469 |     }
470 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:473:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
471 |     func test_saveConfiguration_callsServiceWithCorrectParameters() async {
472 |         // RED: Should fail - service integration not implemented
473 |         mockService.shouldAuthenticate = true
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldAuthenticate' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
474 |         viewModel.selectedProvider = .claude
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:474:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
472 |         // RED: Should fail - service integration not implemented
473 |         mockService.shouldAuthenticate = true
474 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:475:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
473 |         mockService.shouldAuthenticate = true
474 |         viewModel.selectedProvider = .claude
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
477 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:476:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
474 |         viewModel.selectedProvider = .claude
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
477 | 
478 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:478:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
477 | 
478 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
479 | 
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:480:23: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
478 |         await viewModel.saveProviderConfiguration()
479 | 
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)
    |                       |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
    |                       |- note: chain the optional using '?' to access member 'authenticateAndSaveAPICalled' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
481 |         XCTAssertEqual(mockService.lastSavedAPIKey, "sk-ant-test123")
482 |         XCTAssertEqual(mockService.lastSavedProvider, .claude)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:481:24: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedAPIKey' of wrapped base type 'MockLLMProviderSettingsService'
479 | 
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)
481 |         XCTAssertEqual(mockService.lastSavedAPIKey, "sk-ant-test123")
    |                        |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedAPIKey' of wrapped base type 'MockLLMProviderSettingsService'
    |                        |- note: chain the optional using '?' to access member 'lastSavedAPIKey' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
482 |         XCTAssertEqual(mockService.lastSavedProvider, .claude)
483 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:482:24: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedProvider' of wrapped base type 'MockLLMProviderSettingsService'
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)
481 |         XCTAssertEqual(mockService.lastSavedAPIKey, "sk-ant-test123")
482 |         XCTAssertEqual(mockService.lastSavedProvider, .claude)
    |                        |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedProvider' of wrapped base type 'MockLLMProviderSettingsService'
    |                        |- note: chain the optional using '?' to access member 'lastSavedProvider' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
483 |     }
484 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:487:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
485 |     func test_removeConfiguration_clearsProviderState() async {
486 |         // RED: Should fail - remove configuration not implemented
487 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
488 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
489 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:488:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
486 |         // RED: Should fail - remove configuration not implemented
487 |         viewModel.selectedProvider = .claude
488 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
489 | 
490 |         await viewModel.removeProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:490:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
488 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
489 | 
490 |         await viewModel.removeProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'removeProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
491 | 
492 |         // Should clear state and update UI (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:493:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
491 | 
492 |         // Should clear state and update UI (will fail in RED phase)
493 |         XCTAssertFalse(viewModel.isProviderConfigSheetPresented)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
494 |         XCTAssertNil(viewModel.selectedProvider)
495 |         XCTAssertNil(viewModel.providerConfigState)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:494:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
492 |         // Should clear state and update UI (will fail in RED phase)
493 |         XCTAssertFalse(viewModel.isProviderConfigSheetPresented)
494 |         XCTAssertNil(viewModel.selectedProvider)
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
495 |         XCTAssertNil(viewModel.providerConfigState)
496 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:495:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
493 |         XCTAssertFalse(viewModel.isProviderConfigSheetPresented)
494 |         XCTAssertNil(viewModel.selectedProvider)
495 |         XCTAssertNil(viewModel.providerConfigState)
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
496 |     }
497 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:502:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
500 |     func test_saveConfiguration_emptyAPIKey_showsValidationError() async {
501 |         // RED: Should fail - validation not implemented
502 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
503 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
504 |         viewModel.providerConfigState?.apiKey = ""

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:503:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
501 |         // RED: Should fail - validation not implemented
502 |         viewModel.selectedProvider = .claude
503 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
504 |         viewModel.providerConfigState?.apiKey = ""
505 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:504:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
502 |         viewModel.selectedProvider = .claude
503 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
504 |         viewModel.providerConfigState?.apiKey = ""
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
505 | 
506 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:506:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
504 |         viewModel.providerConfigState?.apiKey = ""
505 | 
506 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
507 | 
508 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:508:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
506 |         await viewModel.saveProviderConfiguration()
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
509 |         if case let .error(message) = viewModel.alert {
510 |             XCTAssertTrue(message.contains("API key is required"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:509:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
509 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
510 |             XCTAssertTrue(message.contains("API key is required"))
511 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:509:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
509 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
510 |             XCTAssertTrue(message.contains("API key is required"))
511 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:509:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
509 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
510 |             XCTAssertTrue(message.contains("API key is required"))
511 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:518:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldValidateFormat' of wrapped base type 'MockLLMProviderSettingsService'
516 |     func test_saveConfiguration_invalidAPIKeyFormat_showsError() async {
517 |         // RED: Should fail - format validation not implemented
518 |         mockService.shouldValidateFormat = false
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldValidateFormat' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldValidateFormat' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
519 |         viewModel.selectedProvider = .claude
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:519:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
517 |         // RED: Should fail - format validation not implemented
518 |         mockService.shouldValidateFormat = false
519 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:520:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
518 |         mockService.shouldValidateFormat = false
519 |         viewModel.selectedProvider = .claude
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"
522 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:521:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
519 |         viewModel.selectedProvider = .claude
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
522 | 
523 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:523:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"
522 | 
523 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
524 | 
525 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:525:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
523 |         await viewModel.saveProviderConfiguration()
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
526 |         if case let .error(message) = viewModel.alert {
527 |             XCTAssertTrue(message.contains("Invalid API key format"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:526:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
526 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
527 |             XCTAssertTrue(message.contains("Invalid API key format"))
528 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:526:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
526 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
527 |             XCTAssertTrue(message.contains("Invalid API key format"))
528 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:526:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
526 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
527 |             XCTAssertTrue(message.contains("Invalid API key format"))
528 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:535:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
533 |     func test_updateTemperature_invalidRange_showsError() {
534 |         // RED: Should fail - range validation not implemented
535 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
536 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
537 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:536:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
534 |         // RED: Should fail - range validation not implemented
535 |         viewModel.selectedProvider = .claude
536 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
537 | 
538 |         viewModel.updateTemperature(-1.0)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:538:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
536 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
537 | 
538 |         viewModel.updateTemperature(-1.0)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
539 | 
540 |         // Should show error for invalid range (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:541:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
539 | 
540 |         // Should show error for invalid range (will fail in RED phase)
541 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
542 |     }
543 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:546:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
544 |     func test_updateCustomEndpoint_invalidURL_showsError() {
545 |         // RED: Should fail - URL validation not implemented
546 |         viewModel.selectedProvider = .custom
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
547 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
548 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:547:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
545 |         // RED: Should fail - URL validation not implemented
546 |         viewModel.selectedProvider = .custom
547 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
548 | 
549 |         viewModel.updateCustomEndpoint("not-a-url")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:549:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
547 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
548 | 
549 |         viewModel.updateCustomEndpoint("not-a-url")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
550 | 
551 |         // Should show error for invalid URL (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:552:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
550 | 
551 |         // Should show error for invalid URL (will fail in RED phase)
552 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
553 |     }
554 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:557:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
555 |     func test_loadConfigurations_serviceError_setsErrorState() async {
556 |         // RED: Should fail - error handling not implemented
557 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
558 |         mockConfigService.errorToThrow = TestError.networkError
559 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:558:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'errorToThrow' of wrapped base type 'MockLLMConfigurationService'
556 |         // RED: Should fail - error handling not implemented
557 |         mockConfigService.shouldSucceed = false
558 |         mockConfigService.errorToThrow = TestError.networkError
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'errorToThrow' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'errorToThrow' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
559 | 
560 |         await viewModel.loadConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:560:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
558 |         mockConfigService.errorToThrow = TestError.networkError
559 | 
560 |         await viewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
561 | 
562 |         if case let .error(message) = viewModel.uiState {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:562:39: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
560 |         await viewModel.loadConfigurations()
561 | 
562 |         if case let .error(message) = viewModel.uiState {
    |                                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                       |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
563 |             XCTAssertFalse(message.isEmpty)
564 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:571:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
569 |     func test_saveConfiguration_serviceError_showsAlert() async {
570 |         // RED: Should fail - error handling not implemented
571 |         mockService.shouldAuthenticate = false
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldAuthenticate' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
572 |         mockService.errorToThrow = TestError.authenticationFailed
573 |         viewModel.selectedProvider = .claude

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:572:46: error: type 'TestError' has no member 'authenticationFailed'
570 |         // RED: Should fail - error handling not implemented
571 |         mockService.shouldAuthenticate = false
572 |         mockService.errorToThrow = TestError.authenticationFailed
    |                                              `- error: type 'TestError' has no member 'authenticationFailed'
573 |         viewModel.selectedProvider = .claude
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:573:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
571 |         mockService.shouldAuthenticate = false
572 |         mockService.errorToThrow = TestError.authenticationFailed
573 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:574:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
572 |         mockService.errorToThrow = TestError.authenticationFailed
573 |         viewModel.selectedProvider = .claude
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
576 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:575:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
573 |         viewModel.selectedProvider = .claude
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
576 | 
577 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:577:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
576 | 
577 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
578 | 
579 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:579:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
577 |         await viewModel.saveProviderConfiguration()
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
580 |         if case let .error(message) = viewModel.alert {
581 |             XCTAssertTrue(message.contains("Authentication failed"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:580:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
580 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
581 |             XCTAssertTrue(message.contains("Authentication failed"))
582 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:580:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
580 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
581 |             XCTAssertTrue(message.contains("Authentication failed"))
582 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:580:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
580 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
581 |             XCTAssertTrue(message.contains("Authentication failed"))
582 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:589:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
587 |     func test_removeConfiguration_serviceError_maintainsState() async {
588 |         // RED: Should fail - error recovery not implemented
589 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
590 |         mockConfigService.errorToThrow = TestError.configurationFailed
591 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:590:52: error: type 'TestError' has no member 'configurationFailed'
588 |         // RED: Should fail - error recovery not implemented
589 |         mockConfigService.shouldSucceed = false
590 |         mockConfigService.errorToThrow = TestError.configurationFailed
    |                                                    `- error: type 'TestError' has no member 'configurationFailed'
591 | 
592 |         let originalConfigState = viewModel.providerConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:592:35: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
590 |         mockConfigService.errorToThrow = TestError.configurationFailed
591 | 
592 |         let originalConfigState = viewModel.providerConfigState
    |                                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                   |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
593 | 
594 |         await viewModel.removeProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:594:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
592 |         let originalConfigState = viewModel.providerConfigState
593 | 
594 |         await viewModel.removeProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'removeProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
595 | 
596 |         // Should maintain state on error (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:597:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
595 | 
596 |         // Should maintain state on error (will fail in RED phase)
597 |         XCTAssertEqual(viewModel.providerConfigState, originalConfigState)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
598 |     }
599 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:602:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMProviderSettingsService'
600 |     func test_clearAllConfigurations_serviceError_showsAlert() async {
601 |         // RED: Should fail - error handling not implemented
602 |         mockService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
603 |         mockService.errorToThrow = TestError.configurationFailed
604 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:603:46: error: type 'TestError' has no member 'configurationFailed'
601 |         // RED: Should fail - error handling not implemented
602 |         mockService.shouldSucceed = false
603 |         mockService.errorToThrow = TestError.configurationFailed
    |                                              `- error: type 'TestError' has no member 'configurationFailed'
604 | 
605 |         await viewModel.clearAllConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:605:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
603 |         mockService.errorToThrow = TestError.configurationFailed
604 | 
605 |         await viewModel.clearAllConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'clearAllConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
606 | 
607 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:607:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
605 |         await viewModel.clearAllConfigurations()
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
608 |         if case let .error(message) = viewModel.alert {
609 |             XCTAssertFalse(message.isEmpty)

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:608:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
608 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
609 |             XCTAssertFalse(message.isEmpty)
610 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:608:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
608 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
609 |             XCTAssertFalse(message.isEmpty)
610 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:608:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
608 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
609 |             XCTAssertFalse(message.isEmpty)
610 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:620:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
618 |         // RED: Should pass - @Observable should trigger updates
619 |         let expectation = XCTestExpectation(description: "Alert update triggers UI update")
620 |         let cancellable = viewModel.objectWillChange.sink {
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'objectWillChange' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
621 |             expectation.fulfill()
622 |         }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:624:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
622 |         }
623 | 
624 |         viewModel.alert = .error("Test error")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
625 |         wait(for: [expectation], timeout: 1.0)
626 |         cancellable.cancel()

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:624:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
622 |         }
623 | 
624 |         viewModel.alert = .error("Test error")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
625 |         wait(for: [expectation], timeout: 1.0)
626 |         cancellable.cancel()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:631:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
629 |     func test_dismissAlert_clearsAlertState() {
630 |         // RED: Should pass - basic property clearing
631 |         viewModel.alert = .error("Test error")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:631:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
629 |     func test_dismissAlert_clearsAlertState() {
630 |         // RED: Should pass - basic property clearing
631 |         viewModel.alert = .error("Test error")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:632:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
630 |         // RED: Should pass - basic property clearing
631 |         viewModel.alert = .error("Test error")
632 |         viewModel.dismissAlert()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'dismissAlert' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
633 |         XCTAssertNil(viewModel.alert)
634 |         XCTAssertFalse(viewModel.isAlertPresented)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:633:32: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
631 |         viewModel.alert = .error("Test error")
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)
    |                                `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
634 |         XCTAssertFalse(viewModel.isAlertPresented)
635 |     }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:634:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)
634 |         XCTAssertFalse(viewModel.isAlertPresented)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
635 |     }
636 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:639:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
637 |     func test_multipleAlerts_latestOverridesPrevious() {
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
640 |         viewModel.alert = .success("Success message")
641 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:639:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
637 |     func test_multipleAlerts_latestOverridesPrevious() {
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
640 |         viewModel.alert = .success("Success message")
641 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:640:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
640 |         viewModel.alert = .success("Success message")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
641 | 
642 |         if case let .success(message) = viewModel.alert {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:640:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
640 |         viewModel.alert = .success("Success message")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
641 | 
642 |         if case let .success(message) = viewModel.alert {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:642:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
640 |         viewModel.alert = .success("Success message")
641 | 
642 |         if case let .success(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
643 |             XCTAssertEqual(message, "Success message")
644 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:642:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
640 |         viewModel.alert = .success("Success message")
641 | 
642 |         if case let .success(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
643 |             XCTAssertEqual(message, "Success message")
644 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:642:51: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
640 |         viewModel.alert = .success("Success message")
641 | 
642 |         if case let .success(message) = viewModel.alert {
    |                                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
643 |             XCTAssertEqual(message, "Success message")
644 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:651:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
649 |     func test_errorAlert_setsCorrectMessage() {
650 |         // RED: Should pass - basic property setting
651 |         viewModel.showError("Test error message")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showError' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
652 | 
653 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:653:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
651 |         viewModel.showError("Test error message")
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
654 |         if case let .error(message) = viewModel.alert {
655 |             XCTAssertEqual(message, "Test error message")

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:654:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
654 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
655 |             XCTAssertEqual(message, "Test error message")
656 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:654:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
654 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
655 |             XCTAssertEqual(message, "Test error message")
656 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:654:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
654 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
655 |             XCTAssertEqual(message, "Test error message")
656 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:663:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showSuccess' of wrapped base type 'LLMProviderSettingsViewModel'
661 |     func test_successAlert_setsCorrectMessage() {
662 |         // RED: Should pass - basic property setting
663 |         viewModel.showSuccess("Test success message")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showSuccess' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showSuccess' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
664 | 
665 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:665:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
663 |         viewModel.showSuccess("Test success message")
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
666 |         if case let .success(message) = viewModel.alert {
667 |             XCTAssertEqual(message, "Test success message")

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:666:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
666 |         if case let .success(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
667 |             XCTAssertEqual(message, "Test success message")
668 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:666:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
666 |         if case let .success(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
667 |             XCTAssertEqual(message, "Test success message")
668 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:666:51: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
666 |         if case let .success(message) = viewModel.alert {
    |                                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
667 |             XCTAssertEqual(message, "Test success message")
668 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:675:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
673 |     func test_clearConfirmationAlert_setsCorrectActions() {
674 |         // RED: Should pass - basic property setting
675 |         viewModel.showClearConfirmation()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showClearConfirmation' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:677:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
675 |         viewModel.showClearConfirmation()
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
678 |         if case .clearConfirmation = viewModel.alert {
679 |             // Correct alert type set

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:678:18: error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
678 |         if case .clearConfirmation = viewModel.alert {
    |                  `- error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
679 |             // Correct alert type set
680 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:678:18: error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
678 |         if case .clearConfirmation = viewModel.alert {
    |                  `- error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
679 |             // Correct alert type set
680 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:678:48: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
678 |         if case .clearConfirmation = viewModel.alert {
    |                                                `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
679 |             // Correct alert type set
680 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:812:45: error: type 'TestError' has no member 'authenticationFailed'
810 | 
811 |         if !shouldAuthenticate {
812 |             throw errorToThrow ?? TestError.authenticationFailed
    |                                             `- error: type 'TestError' has no member 'authenticationFailed'
813 |         }
814 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:816:45: error: type 'TestError' has no member 'configurationFailed'
814 | 
815 |         if !shouldSucceed {
816 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
817 |         }
818 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:838:45: error: type 'TestError' has no member 'configurationFailed'
836 |     func getActiveProvider() async throws -> LLMProviderConfig? {
837 |         if !shouldSucceed {
838 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
839 |         }
840 |         return nil

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:845:45: error: type 'TestError' has no member 'configurationFailed'
843 |     func getAvailableProviders() async throws -> [LLMProvider] {
844 |         if !shouldSucceed {
845 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
846 |         }
847 |         return []

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:852:45: error: type 'TestError' has no member 'configurationFailed'
850 |     func getProviderPriority() async throws -> LLMProviderSettingsViewModel.ProviderPriority? {
851 |         if !shouldSucceed {
852 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
853 |         }
854 |         return nil

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:859:45: error: type 'TestError' has no member 'configurationFailed'
857 |     func configureProvider(_: LLMProvider, apiKey _: String, config _: LLMProviderConfig) async throws {
858 |         if !shouldSucceed {
859 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
860 |         }
861 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:865:45: error: type 'TestError' has no member 'configurationFailed'
863 |     func removeProvider(_: LLMProvider) async throws {
864 |         if !shouldSucceed {
865 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
866 |         }
867 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:871:45: error: type 'TestError' has no member 'configurationFailed'
869 |     func clearAllConfigurations() async throws {
870 |         if !shouldSucceed {
871 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
872 |         }
873 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:877:45: error: type 'TestError' has no member 'configurationFailed'
875 |     func updateProviderPriority(_: LLMProviderSettingsViewModel.ProviderPriority) async throws {
876 |         if !shouldSucceed {
877 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
878 |         }
879 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:35:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 33 |         mockService = MockLLMProviderSettingsService(
 34 |             biometricService: mockBiometricService,
 35 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 36 |             configurationService: mockConfigService
 37 |         )

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:36:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 34 |             biometricService: mockBiometricService,
 35 |             keychainService: mockKeychainService,
 36 |             configurationService: mockConfigService
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 37 |         )
 38 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:40:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 38 | 
 39 |         modernViewModel = LLMProviderSettingsViewModel(
 40 |             configurationService: mockConfigService,
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 41 |             keychainService: mockKeychainService,
 42 |             settingsService: mockService

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:41:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 39 |         modernViewModel = LLMProviderSettingsViewModel(
 40 |             configurationService: mockConfigService,
 41 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 42 |             settingsService: mockService
 43 |         )

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:42:30: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
 40 |             configurationService: mockConfigService,
 41 |             keychainService: mockKeychainService,
 42 |             settingsService: mockService
    |                              |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 43 |         )
 44 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:73:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
 71 | 
 72 |         // Test provider selection
 73 |         modernViewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 74 |         if modernViewModel.selectedProvider == .claude,
 75 |            modernViewModel.isProviderConfigSheetPresented {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:74:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
 72 |         // Test provider selection
 73 |         modernViewModel.selectProvider(.claude)
 74 |         if modernViewModel.selectedProvider == .claude,
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 75 |            modernViewModel.isProviderConfigSheetPresented {
 76 |             implementedFeatures.append("Provider selection and configuration")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:75:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
 73 |         modernViewModel.selectProvider(.claude)
 74 |         if modernViewModel.selectedProvider == .claude,
 75 |            modernViewModel.isProviderConfigSheetPresented {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 76 |             implementedFeatures.append("Provider selection and configuration")
 77 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:80:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
 78 | 
 79 |         // Test biometric authentication
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'isAuthenticating' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 81 |             await modernViewModel.authenticateAndSave()
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:81:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
 79 |         // Test biometric authentication
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
 81 |             await modernViewModel.authenticateAndSave()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'authenticateAndSave' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {
 83 |                 implementedFeatures.append("Biometric authentication for API key saving")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:82:16: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
 81 |             await modernViewModel.authenticateAndSave()
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {
    |                |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
    |                |- note: chain the optional using '?' to access member 'isAuthenticating' only for non-'nil' base values
    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 83 |                 implementedFeatures.append("Biometric authentication for API key saving")
 84 |             }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:82:52: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
 81 |             await modernViewModel.authenticateAndSave()
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {
    |                                                    |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
    |                                                    |- note: chain the optional using '?' to access member 'authenticateAndSaveAPICalled' only for non-'nil' base values
    |                                                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 83 |                 implementedFeatures.append("Biometric authentication for API key saving")
 84 |             }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:88:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
 86 | 
 87 |         // Test provider priority
 88 |         await modernViewModel.updateFallbackBehavior(.loadBalanced)
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'updateFallbackBehavior' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 89 |         if modernViewModel.providerPriority.fallbackBehavior == .loadBalanced {
 90 |             implementedFeatures.append("Provider priority management")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:89:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
 87 |         // Test provider priority
 88 |         await modernViewModel.updateFallbackBehavior(.loadBalanced)
 89 |         if modernViewModel.providerPriority.fallbackBehavior == .loadBalanced {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 90 |             implementedFeatures.append("Provider priority management")
 91 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:94:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
 92 | 
 93 |         // Test clear all
 94 |         await modernViewModel.clearAllConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'clearAllConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 95 |         if modernViewModel.configuredProviders.isEmpty {
 96 |             implementedFeatures.append("Clear all configurations")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:95:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'configuredProviders' of wrapped base type 'LLMProviderSettingsViewModel'
 93 |         // Test clear all
 94 |         await modernViewModel.clearAllConfigurations()
 95 |         if modernViewModel.configuredProviders.isEmpty {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'configuredProviders' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'configuredProviders' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 96 |             implementedFeatures.append("Clear all configurations")
 97 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:100:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
 98 | 
 99 |         // Test model selection
100 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
101 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
102 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:101:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
 99 |         // Test model selection
100 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
101 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateSelectedModel' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
102 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {
103 |             implementedFeatures.append("Model selection and temperature adjustment")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:102:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
100 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
101 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
102 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
103 |             implementedFeatures.append("Model selection and temperature adjustment")
104 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:107:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
105 | 
106 |         // Test custom endpoint
107 |         modernViewModel.updateCustomEndpoint("https://api.test.com")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
108 |         if modernViewModel.providerConfigState?.customEndpoint == "https://api.test.com" {
109 |             implementedFeatures.append("Custom endpoint configuration")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:108:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
106 |         // Test custom endpoint
107 |         modernViewModel.updateCustomEndpoint("https://api.test.com")
108 |         if modernViewModel.providerConfigState?.customEndpoint == "https://api.test.com" {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
109 |             implementedFeatures.append("Custom endpoint configuration")
110 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:113:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
111 | 
112 |         // Test validation and error handling
113 |         modernViewModel.showError("Test error")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showError' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
114 |         if modernViewModel.alert != nil {
115 |             implementedFeatures.append("Real-time validation and error handling")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:114:28: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
112 |         // Test validation and error handling
113 |         modernViewModel.showError("Test error")
114 |         if modernViewModel.alert != nil {
    |                            `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
115 |             implementedFeatures.append("Real-time validation and error handling")
116 |         }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:141:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
139 | 
140 |         // Tap provider to configure
141 |         modernViewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
142 |         if modernViewModel.isProviderConfigSheetPresented {
143 |             workingInteractions.append("Tap provider to configure")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:142:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
140 |         // Tap provider to configure
141 |         modernViewModel.selectProvider(.claude)
142 |         if modernViewModel.isProviderConfigSheetPresented {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
143 |             workingInteractions.append("Tap provider to configure")
144 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:147:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
145 | 
146 |         // API key field (simulated - actual implementation in view)
147 |         if modernViewModel.providerConfigState != nil {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
148 |             workingInteractions.append("Show/hide API key in secure field")
149 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:152:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'getModelsForProvider' of wrapped base type 'LLMProviderSettingsViewModel'
150 | 
151 |         // Model selection
152 |         let models = modernViewModel.getModelsForProvider(.claude)
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'getModelsForProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'getModelsForProvider' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
153 |         if !models.isEmpty {
154 |             workingInteractions.append("Select model from picker")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:158:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
156 | 
157 |         // Temperature adjustment
158 |         modernViewModel.updateTemperature(0.8)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
159 |         if modernViewModel.providerConfigState?.temperature == 0.8 {
160 |             workingInteractions.append("Adjust temperature slider")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:159:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
157 |         // Temperature adjustment
158 |         modernViewModel.updateTemperature(0.8)
159 |         if modernViewModel.providerConfigState?.temperature == 0.8 {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
160 |             workingInteractions.append("Adjust temperature slider")
161 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:164:12: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
162 | 
163 |         // Biometric auth (simulated)
164 |         if mockService.shouldAuthenticate {
    |            |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
    |            |- note: chain the optional using '?' to access member 'shouldAuthenticate' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
165 |             workingInteractions.append("Save configuration with biometric auth")
166 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:174:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'moveProvider' of wrapped base type 'LLMProviderSettingsViewModel'
172 |         let indexSet = IndexSet([0])
173 |         Task {
174 |             await modernViewModel.moveProvider(from: indexSet, to: 1)
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'moveProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'moveProvider' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
175 |         }
176 |         workingInteractions.append("Drag to reorder providers")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:179:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
177 | 
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showClearConfirmation' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
180 |         if case .clearConfirmation = modernViewModel.alert {
181 |             workingInteractions.append("Clear all with confirmation")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:180:18: error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
180 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
181 |             workingInteractions.append("Clear all with confirmation")
182 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:180:18: error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
180 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
181 |             workingInteractions.append("Clear all with confirmation")
182 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:180:54: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
180 |         if case .clearConfirmation = modernViewModel.alert {
    |                                                      `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
181 |             workingInteractions.append("Clear all with confirmation")
182 |         }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:193:29: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
191 | 
192 |         // Test state transitions match TCA behavior
193 |         let originalState = modernViewModel.uiState
    |                             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                             |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
194 |         XCTAssertEqual(originalState, .idle)
195 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:194:40: error: type 'Equatable' has no member 'idle'
192 |         // Test state transitions match TCA behavior
193 |         let originalState = modernViewModel.uiState
194 |         XCTAssertEqual(originalState, .idle)
    |                                        `- error: type 'Equatable' has no member 'idle'
195 | 
196 |         // Loading state

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:198:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
196 |         // Loading state
197 |         let loadTask = Task {
198 |             await modernViewModel.loadConfigurations()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
199 |         }
200 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:206:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
204 | 
205 |         // State should be loaded or error (not idle)
206 |         XCTAssertNotEqual(modernViewModel.uiState, .idle)
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
207 | 
208 |         // Error state handling

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:209:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
207 | 
208 |         // Error state handling
209 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
210 |         await modernViewModel.loadConfigurations()
211 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:210:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
208 |         // Error state handling
209 |         mockConfigService.shouldSucceed = false
210 |         await modernViewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
211 | 
212 |         if case .error = modernViewModel.uiState {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:212:26: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
210 |         await modernViewModel.loadConfigurations()
211 | 
212 |         if case .error = modernViewModel.uiState {
    |                          |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                          |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
213 |             // Error state correctly set
214 |         } else {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:219:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
217 | 
218 |         // Alert state management
219 |         modernViewModel.showError("Test error")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showError' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
220 |         XCTAssertTrue(modernViewModel.isAlertPresented)
221 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:220:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
218 |         // Alert state management
219 |         modernViewModel.showError("Test error")
220 |         XCTAssertTrue(modernViewModel.isAlertPresented)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
221 | 
222 |         modernViewModel.dismissAlert()

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:222:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
220 |         XCTAssertTrue(modernViewModel.isAlertPresented)
221 | 
222 |         modernViewModel.dismissAlert()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'dismissAlert' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
223 |         XCTAssertFalse(modernViewModel.isAlertPresented)
224 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:223:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
221 | 
222 |         modernViewModel.dismissAlert()
223 |         XCTAssertFalse(modernViewModel.isAlertPresented)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
224 |     }
225 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:247:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
245 | 
246 |         // Test each mapping
247 |         modernViewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
248 |         if modernViewModel.selectedProvider == .claude {
249 |             mappedActions.append("providerTapped")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:248:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
246 |         // Test each mapping
247 |         modernViewModel.selectProvider(.claude)
248 |         if modernViewModel.selectedProvider == .claude {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
249 |             mappedActions.append("providerTapped")
250 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:252:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
250 |         }
251 | 
252 |         modernViewModel.showClearConfirmation()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showClearConfirmation' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
253 |         if case .clearConfirmation = modernViewModel.alert {
254 |             mappedActions.append("clearAllTapped")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:253:18: error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
251 | 
252 |         modernViewModel.showClearConfirmation()
253 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
254 |             mappedActions.append("clearAllTapped")
255 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:253:18: error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
251 | 
252 |         modernViewModel.showClearConfirmation()
253 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
254 |             mappedActions.append("clearAllTapped")
255 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:253:54: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
251 | 
252 |         modernViewModel.showClearConfirmation()
253 |         if case .clearConfirmation = modernViewModel.alert {
    |                                                      `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
254 |             mappedActions.append("clearAllTapped")
255 |         }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:258:13: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
256 | 
257 |         // Sheet binding (property access)
258 |         _ = modernViewModel.isProviderConfigSheetPresented
    |             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |             |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
259 |         mappedActions.append("setProviderConfigSheet")
260 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:263:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
261 |         // Configuration methods exist (compilation test)
262 |         Task {
263 |             await modernViewModel.saveProviderConfiguration()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
264 |             await modernViewModel.removeProviderConfiguration()
265 |             await modernViewModel.updateFallbackBehavior(.sequential)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:272:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
270 | 
271 |         // Model and config updates
272 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
274 |         modernViewModel.updateTemperature(0.5)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:273:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
271 |         // Model and config updates
272 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateSelectedModel' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
274 |         modernViewModel.updateTemperature(0.5)
275 |         modernViewModel.updateCustomEndpoint("https://test.com")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:274:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
272 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
274 |         modernViewModel.updateTemperature(0.5)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
275 |         modernViewModel.updateCustomEndpoint("https://test.com")
276 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:275:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
274 |         modernViewModel.updateTemperature(0.5)
275 |         modernViewModel.updateCustomEndpoint("https://test.com")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
276 | 
277 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:277:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
275 |         modernViewModel.updateCustomEndpoint("https://test.com")
276 | 
277 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
278 |             mappedActions.append("modelSelected")
279 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:280:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
278 |             mappedActions.append("modelSelected")
279 |         }
280 |         if modernViewModel.providerConfigState?.temperature == 0.5 {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
281 |             mappedActions.append("temperatureChanged")
282 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:283:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
281 |             mappedActions.append("temperatureChanged")
282 |         }
283 |         if modernViewModel.providerConfigState?.customEndpoint == "https://test.com" {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
284 |             mappedActions.append("customEndpointChanged")
285 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:307:41: warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any ObservableObject' is equivalent to an implicit conversion to an optional 'any ObservableObject'
305 | 
306 |         // Protocol conformance should be to SwiftUI protocols, not TCA
307 |         XCTAssertNotNil(modernViewModel as? any ObservableObject)
    |                                         `- warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any ObservableObject' is equivalent to an implicit conversion to an optional 'any ObservableObject'
308 |         XCTAssertNotNil(modernViewModel as? any LLMProviderSettingsViewModelProtocol)
309 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:308:41: warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any LLMProviderSettingsViewModelProtocol' is equivalent to an implicit conversion to an optional 'any LLMProviderSettingsViewModelProtocol'
306 |         // Protocol conformance should be to SwiftUI protocols, not TCA
307 |         XCTAssertNotNil(modernViewModel as? any ObservableObject)
308 |         XCTAssertNotNil(modernViewModel as? any LLMProviderSettingsViewModelProtocol)
    |                                         `- warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any LLMProviderSettingsViewModelProtocol' is equivalent to an implicit conversion to an optional 'any LLMProviderSettingsViewModelProtocol'
309 | 
310 |         // State management should be @Observable, not TCA State

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:320:39: warning: checking a value with optional type 'LLMProviderSettingsViewModel?' against type 'any ObservableObject' succeeds whenever the value is non-nil; did you mean to use '!= nil'?
318 | 
319 |         // @Observable pattern
320 |         XCTAssertTrue(modernViewModel is any ObservableObject)
    |                                       `- warning: checking a value with optional type 'LLMProviderSettingsViewModel?' against type 'any ObservableObject' succeeds whenever the value is non-nil; did you mean to use '!= nil'?
321 | 
322 |         // Property wrappers (simulated - actual test in view)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:324:13: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
322 |         // Property wrappers (simulated - actual test in view)
323 |         let hasBindableProperties = [
324 |             modernViewModel.isProviderConfigSheetPresented,
    |             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |             |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
325 |             modernViewModel.selectedProvider != nil,
326 |             modernViewModel.alert != nil,

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:325:13: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
323 |         let hasBindableProperties = [
324 |             modernViewModel.isProviderConfigSheetPresented,
325 |             modernViewModel.selectedProvider != nil,
    |             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |             |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
326 |             modernViewModel.alert != nil,
327 |         ].contains(true)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:326:29: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
324 |             modernViewModel.isProviderConfigSheetPresented,
325 |             modernViewModel.selectedProvider != nil,
326 |             modernViewModel.alert != nil,
    |                             `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
327 |         ].contains(true)
328 |         XCTAssertTrue(hasBindableProperties)

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:332:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
330 |         // Async/await pattern
331 |         Task {
332 |             await modernViewModel.loadConfigurations()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
333 |             await modernViewModel.saveProviderConfiguration()
334 |             await modernViewModel.clearAllConfigurations()

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:339:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'testProviderConnection' of wrapped base type 'LLMProviderSettingsViewModel'
337 |         // Error handling with Result/throwing functions
338 |         do {
339 |             _ = try await modernViewModel.testProviderConnection(TestFixtures.testConfig)
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'testProviderConnection' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'testProviderConnection' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
340 |         } catch {
341 |             // Expected to fail in RED phase

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:345:33: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
343 | 
344 |         // State consistency
345 |         let stateIsConsistent = modernViewModel.isAlertPresented == (modernViewModel.alert != nil)
    |                                 |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                 |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
346 |         XCTAssertTrue(stateIsConsistent)
347 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:345:86: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
343 | 
344 |         // State consistency
345 |         let stateIsConsistent = modernViewModel.isAlertPresented == (modernViewModel.alert != nil)
    |                                                                                      `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
346 |         XCTAssertTrue(stateIsConsistent)
347 |     }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:355:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
353 | 
354 |         // Simulate existing configuration
355 |         mockConfigService.shouldSucceed = true
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
356 |         _ = TestFixtures.testConfig
357 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:358:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
356 |         _ = TestFixtures.testConfig
357 | 
358 |         await modernViewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
359 | 
360 |         // Existing configuration should be loaded (will fail in RED phase)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:362:25: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'activeProvider' of wrapped base type 'LLMProviderSettingsViewModel'
360 |         // Existing configuration should be loaded (will fail in RED phase)
361 |         // This test ensures no data loss during migration
362 |         XCTAssertNotNil(modernViewModel.activeProvider ?? mockConfigService.mockActiveProvider)
    |                         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'activeProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                         `- note: chain the optional using '?' to access member 'activeProvider' only for non-'nil' base values
363 |     }
364 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:362:59: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'mockActiveProvider' of wrapped base type 'MockLLMConfigurationService'
360 |         // Existing configuration should be loaded (will fail in RED phase)
361 |         // This test ensures no data loss during migration
362 |         XCTAssertNotNil(modernViewModel.activeProvider ?? mockConfigService.mockActiveProvider)
    |                                                           |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'mockActiveProvider' of wrapped base type 'MockLLMConfigurationService'
    |                                                           `- note: chain the optional using '?' to access member 'mockActiveProvider' only for non-'nil' base values
363 |     }
364 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:370:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'validateAPIKeyFormat' of wrapped base type 'LLMProviderSettingsViewModel'
368 |         // Simulate existing API keys in keychain (property is read-only, simulated via mock setup)
369 | 
370 |         let isValid = modernViewModel.validateAPIKeyFormat("sk-ant-test123", for: .claude)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'validateAPIKeyFormat' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'validateAPIKeyFormat' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
371 |         XCTAssertTrue(isValid)
372 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:375:23: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'hasStoredKeys' of wrapped base type 'MockLLMKeychainService'
373 |         // Keys should remain accessible after migration
374 |         // This test ensures no security data loss
375 |         XCTAssertTrue(mockKeychainService.hasStoredKeys)
    |                       |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'hasStoredKeys' of wrapped base type 'MockLLMKeychainService'
    |                       |- note: chain the optional using '?' to access member 'hasStoredKeys' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
376 |     }
377 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:387:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
385 |         )
386 | 
387 |         modernViewModel.providerPriority = testPriority
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
388 |         await modernViewModel.updateFallbackBehavior(.costOptimized)
389 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:388:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
386 | 
387 |         modernViewModel.providerPriority = testPriority
388 |         await modernViewModel.updateFallbackBehavior(.costOptimized)
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'updateFallbackBehavior' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
389 | 
390 |         // Priority should be preserved (will fail in RED phase)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:391:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
389 | 
390 |         // Priority should be preserved (will fail in RED phase)
391 |         XCTAssertEqual(modernViewModel.providerPriority.fallbackBehavior, .costOptimized)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
392 |         XCTAssertEqual(modernViewModel.providerPriority.providers, [.claude, .openAI, .gemini])
393 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:392:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
390 |         // Priority should be preserved (will fail in RED phase)
391 |         XCTAssertEqual(modernViewModel.providerPriority.fallbackBehavior, .costOptimized)
392 |         XCTAssertEqual(modernViewModel.providerPriority.providers, [.claude, .openAI, .gemini])
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
393 |     }
394 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:410:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
408 | 
409 |         // Test biometric authentication
410 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
411 |         await modernViewModel.authenticateAndSave()
412 |         if mockService.authenticateAndSaveAPICalled {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:411:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
409 |         // Test biometric authentication
410 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
411 |         await modernViewModel.authenticateAndSave()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'authenticateAndSave' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
412 |         if mockService.authenticateAndSaveAPICalled {
413 |             validatedFeatures["Biometric authentication required"] = true

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:412:12: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
410 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
411 |         await modernViewModel.authenticateAndSave()
412 |         if mockService.authenticateAndSaveAPICalled {
    |            |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
    |            |- note: chain the optional using '?' to access member 'authenticateAndSaveAPICalled' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
413 |             validatedFeatures["Biometric authentication required"] = true
414 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:417:12: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'usesEncryption' of wrapped base type 'MockLLMKeychainService'
415 | 
416 |         // Test encrypted storage (simulated)
417 |         if mockKeychainService.usesEncryption {
    |            |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'usesEncryption' of wrapped base type 'MockLLMKeychainService'
    |            |- note: chain the optional using '?' to access member 'usesEncryption' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
418 |             validatedFeatures["API keys encrypted in keychain"] = true
419 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:422:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
420 | 
421 |         // Test no plaintext storage
422 |         let apiKey = modernViewModel.providerConfigState?.apiKey ?? ""
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
423 |         if apiKey.isEmpty || !apiKey.contains("plaintext") {
424 |             validatedFeatures["No plaintext key storage"] = true
[32/35] Compiling AIKOTests Migration_TCAToSwiftUIValidationTests.swift
/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:778:6: error: invalid redeclaration of 'TestError'
776 | }
777 | 
778 | enum TestError: Error, LocalizedError {
    |      `- error: invalid redeclaration of 'TestError'
779 |     case configurationFailed
780 |     case networkError

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:34:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 32 |         mockService = MockLLMProviderSettingsService(
 33 |             biometricService: mockBiometricService,
 34 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 35 |             configurationService: mockConfigService
 36 |         )

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:35:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 33 |             biometricService: mockBiometricService,
 34 |             keychainService: mockKeychainService,
 35 |             configurationService: mockConfigService
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 36 |         )
 37 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:39:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 37 | 
 38 |         viewModel = LLMProviderSettingsViewModel(
 39 |             configurationService: mockConfigService,
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 40 |             keychainService: mockKeychainService,
 41 |             settingsService: mockService

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:40:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 38 |         viewModel = LLMProviderSettingsViewModel(
 39 |             configurationService: mockConfigService,
 40 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 41 |             settingsService: mockService
 42 |         )

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:41:30: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
 39 |             configurationService: mockConfigService,
 40 |             keychainService: mockKeychainService,
 41 |             settingsService: mockService
    |                              |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 42 |         )
 43 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:61:33: warning: 'is' test is always true
 59 |             return
 60 |         }
 61 |         XCTAssertTrue(viewModel is any LLMProviderSettingsViewModelProtocol)
    |                                 `- warning: 'is' test is always true
 62 |     }
 63 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:175:33: warning: 'is' test is always true
173 |             return
174 |         }
175 |         XCTAssertTrue(viewModel is ObservableObject)
    |                                 `- warning: 'is' test is always true
176 | 
177 |         // Test that property changes trigger objectWillChange

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:175:36: warning: use of 'ObservableObject' as a type must be written 'any ObservableObject'; this will be an error in a future Swift language mode
173 |             return
174 |         }
175 |         XCTAssertTrue(viewModel is ObservableObject)
    |                                    `- warning: use of 'ObservableObject' as a type must be written 'any ObservableObject'; this will be an error in a future Swift language mode
176 | 
177 |         // Test that property changes trigger objectWillChange

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:252:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
250 |     func test_loadConfigurations_stateTransition_idleToLoading() async {
251 |         // RED: Should fail - state management not implemented
252 |         XCTAssertEqual(viewModel.uiState, .idle)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
253 | 
254 |         let task = Task {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:255:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
253 | 
254 |         let task = Task {
255 |             await viewModel.loadConfigurations()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
256 |         }
257 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:263:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
261 | 
262 |         // This will fail in RED phase as state management is not implemented
263 |         XCTAssertNotEqual(viewModel.uiState, .idle)
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
264 |     }
265 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:260:9: warning: no 'async' operations occur within 'await' expression
258 |         // State should transition to loading (but will fail in RED phase)
259 |         try? await Task.sleep(nanoseconds: 10_000_000) // 10ms
260 |         await task.value
    |         `- warning: no 'async' operations occur within 'await' expression
261 | 
262 |         // This will fail in RED phase as state management is not implemented

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:268:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
266 |     func test_loadConfigurations_stateTransition_loadingToLoaded() async {
267 |         // RED: Should fail - state transitions not implemented
268 |         mockConfigService.shouldSucceed = true
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
269 | 
270 |         await viewModel.loadConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:270:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
268 |         mockConfigService.shouldSucceed = true
269 | 
270 |         await viewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
271 | 
272 |         // Should be loaded state (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:273:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
271 | 
272 |         // Should be loaded state (will fail in RED phase)
273 |         XCTAssertEqual(viewModel.uiState, .loaded)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
274 |     }
275 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:278:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
276 |     func test_loadConfigurations_stateTransition_loadingToError() async {
277 |         // RED: Should fail - error handling not implemented
278 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
279 |         mockConfigService.errorToThrow = TestError.configurationFailed
280 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:279:52: error: type 'TestError' has no member 'configurationFailed'
277 |         // RED: Should fail - error handling not implemented
278 |         mockConfigService.shouldSucceed = false
279 |         mockConfigService.errorToThrow = TestError.configurationFailed
    |                                                    `- error: type 'TestError' has no member 'configurationFailed'
280 | 
281 |         await viewModel.loadConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:281:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
279 |         mockConfigService.errorToThrow = TestError.configurationFailed
280 | 
281 |         await viewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
282 | 
283 |         // Should be error state (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:284:39: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
282 | 
283 |         // Should be error state (will fail in RED phase)
284 |         if case let .error(message) = viewModel.uiState {
    |                                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                       |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
285 |             XCTAssertFalse(message.isEmpty)
286 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:293:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
291 |     func test_saveConfiguration_stateTransition_loadedToSaving() async {
292 |         // RED: Should fail - saving state not implemented
293 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
294 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
295 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:294:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
292 |         // RED: Should fail - saving state not implemented
293 |         viewModel.selectedProvider = .claude
294 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
295 | 
296 |         let task = Task {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:297:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
295 | 
296 |         let task = Task {
297 |             await viewModel.saveProviderConfiguration()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
298 |         }
299 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:305:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
303 | 
304 |         // This will fail in RED phase
305 |         XCTAssertTrue(viewModel.providerConfigState?.isSaving == true || viewModel.uiState == .saving)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
306 |     }
307 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:305:74: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
303 | 
304 |         // This will fail in RED phase
305 |         XCTAssertTrue(viewModel.providerConfigState?.isSaving == true || viewModel.uiState == .saving)
    |                                                                          |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                                                          |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                                                                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
306 |     }
307 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:311:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
309 |         // RED: Should pass - @Observable should trigger updates
310 |         let expectation = XCTestExpectation(description: "State change triggers update")
311 |         let cancellable = viewModel.objectWillChange.sink {
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'objectWillChange' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
312 |             expectation.fulfill()
313 |         }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:315:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
313 |         }
314 | 
315 |         viewModel.uiState = .loading
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
316 |         wait(for: [expectation], timeout: 1.0)
317 |         cancellable.cancel()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:324:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
322 |         let tasks = (0 ..< 10).map { _ in
323 |             Task {
324 |                 await viewModel.loadConfigurations()
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
325 |             }
326 |         }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:338:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
336 |         // State should be consistent (will fail in RED phase)
337 |         // Note: This test is designed to fail as concurrent state management is not implemented
338 |         XCTAssertFalse(viewModel.uiState == .loading, "Should not be stuck in loading state after concurrent operations")
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
339 |     }
340 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:343:29: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
341 |     func test_stateRollback_onOperationFailure() async {
342 |         // RED: Should fail - rollback not implemented
343 |         let originalState = viewModel.uiState
    |                             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                             |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
344 |         mockConfigService.shouldSucceed = false
345 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:344:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
342 |         // RED: Should fail - rollback not implemented
343 |         let originalState = viewModel.uiState
344 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
345 | 
346 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:346:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
344 |         mockConfigService.shouldSucceed = false
345 | 
346 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
347 | 
348 |         // State should rollback on failure (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:349:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
347 | 
348 |         // State should rollback on failure (will fail in RED phase)
349 |         XCTAssertEqual(viewModel.uiState, originalState)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
350 |     }
351 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:354:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
352 |     func test_stateConsistency_acrossAsyncOperations() async {
353 |         // RED: Should fail - state consistency not guaranteed
354 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
355 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
356 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:355:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
353 |         // RED: Should fail - state consistency not guaranteed
354 |         viewModel.selectedProvider = .claude
355 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
356 | 
357 |         // Start multiple operations - capture viewModel to avoid concurrent access issues

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:362:19: warning: constant 'load' inferred to have type '()', which may be unexpected
360 |             return
361 |         }
362 |         async let load = localViewModel.loadConfigurations()
    |                   |- warning: constant 'load' inferred to have type '()', which may be unexpected
    |                   `- note: add an explicit type annotation to silence this warning
363 |         async let save = localViewModel.saveProviderConfiguration()
364 |         async let clear = localViewModel.clearAllConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:363:19: warning: constant 'save' inferred to have type '()', which may be unexpected
361 |         }
362 |         async let load = localViewModel.loadConfigurations()
363 |         async let save = localViewModel.saveProviderConfiguration()
    |                   |- warning: constant 'save' inferred to have type '()', which may be unexpected
    |                   `- note: add an explicit type annotation to silence this warning
364 |         async let clear = localViewModel.clearAllConfigurations()
365 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:364:19: warning: constant 'clear' inferred to have type '()', which may be unexpected
362 |         async let load = localViewModel.loadConfigurations()
363 |         async let save = localViewModel.saveProviderConfiguration()
364 |         async let clear = localViewModel.clearAllConfigurations()
    |                   |- warning: constant 'clear' inferred to have type '()', which may be unexpected
    |                   `- note: add an explicit type annotation to silence this warning
365 | 
366 |         await load

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:371:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
369 | 
370 |         // State should be consistent (will fail in RED phase)
371 |         XCTAssertNotEqual(viewModel.uiState, .loading) // Should not be stuck in loading
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
372 |     }
373 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:378:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
376 |     func test_selectProvider_updatesSelectedProvider() {
377 |         // RED: Should pass - basic property setting
378 |         viewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
379 |         XCTAssertEqual(viewModel.selectedProvider, .claude)
380 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:379:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
377 |         // RED: Should pass - basic property setting
378 |         viewModel.selectProvider(.claude)
379 |         XCTAssertEqual(viewModel.selectedProvider, .claude)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
380 |     }
381 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:384:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
382 |     func test_selectProvider_presentsConfigurationSheet() {
383 |         // RED: Should fail - sheet presentation logic not implemented
384 |         viewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
385 |         XCTAssertTrue(viewModel.isProviderConfigSheetPresented)
386 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:385:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
383 |         // RED: Should fail - sheet presentation logic not implemented
384 |         viewModel.selectProvider(.claude)
385 |         XCTAssertTrue(viewModel.isProviderConfigSheetPresented)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
386 |     }
387 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:390:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
388 |     func test_selectProvider_initializesProviderConfigState() {
389 |         // RED: Should fail - config state initialization not implemented
390 |         viewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
391 | 
392 |         XCTAssertNotNil(viewModel.providerConfigState)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:392:25: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
390 |         viewModel.selectProvider(.claude)
391 | 
392 |         XCTAssertNotNil(viewModel.providerConfigState)
    |                         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:393:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
391 | 
392 |         XCTAssertNotNil(viewModel.providerConfigState)
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:394:25: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
392 |         XCTAssertNotNil(viewModel.providerConfigState)
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
    |                         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)
396 |         XCTAssertFalse(viewModel.providerConfigState?.customEndpoint.isEmpty == false)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:395:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
396 |         XCTAssertFalse(viewModel.providerConfigState?.customEndpoint.isEmpty == false)
397 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:396:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)
396 |         XCTAssertFalse(viewModel.providerConfigState?.customEndpoint.isEmpty == false)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
397 |     }
398 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:402:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
400 |         // RED: Should fail - error handling for no models not implemented
401 |         // This test simulates a provider with no available models
402 |         viewModel.selectProvider(.custom) // Custom provider might have no models
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
403 | 
404 |         // Should show error for no models (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:405:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
403 | 
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
406 |         if case let .error(message) = viewModel.alert {
407 |             XCTAssertTrue(message.contains("No models available"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:406:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
406 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
407 |             XCTAssertTrue(message.contains("No models available"))
408 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:406:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
406 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
407 |             XCTAssertTrue(message.contains("No models available"))
408 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:406:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
406 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
407 |             XCTAssertTrue(message.contains("No models available"))
408 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:415:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
413 |     func test_updateAPIKey_updatesProviderConfigState() {
414 |         // RED: Should fail - API key update not implemented
415 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
416 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
417 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:416:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
414 |         // RED: Should fail - API key update not implemented
415 |         viewModel.selectedProvider = .claude
416 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
417 | 
418 |         viewModel.updateAPIKey("sk-ant-test123")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:418:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateAPIKey' of wrapped base type 'LLMProviderSettingsViewModel'
416 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
417 | 
418 |         viewModel.updateAPIKey("sk-ant-test123")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateAPIKey' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateAPIKey' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
419 | 
420 |         XCTAssertEqual(viewModel.providerConfigState?.apiKey, "sk-ant-test123")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:420:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
418 |         viewModel.updateAPIKey("sk-ant-test123")
419 | 
420 |         XCTAssertEqual(viewModel.providerConfigState?.apiKey, "sk-ant-test123")
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
421 |     }
422 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:425:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
423 |     func test_updateSelectedModel_updatesProviderConfigState() {
424 |         // RED: Should fail - model update not implemented
425 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
426 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
427 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:426:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
424 |         // RED: Should fail - model update not implemented
425 |         viewModel.selectedProvider = .claude
426 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
427 | 
428 |         let newModel = TestFixtures.testModel

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:429:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
427 | 
428 |         let newModel = TestFixtures.testModel
429 |         viewModel.updateSelectedModel(newModel)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateSelectedModel' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
430 | 
431 |         XCTAssertEqual(viewModel.providerConfigState?.selectedModel, newModel)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:431:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
429 |         viewModel.updateSelectedModel(newModel)
430 | 
431 |         XCTAssertEqual(viewModel.providerConfigState?.selectedModel, newModel)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
432 |     }
433 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:436:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
434 |     func test_updateTemperature_validatesRange() {
435 |         // RED: Should fail - temperature validation not implemented
436 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
437 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
438 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:437:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
435 |         // RED: Should fail - temperature validation not implemented
436 |         viewModel.selectedProvider = .claude
437 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
438 | 
439 |         viewModel.updateTemperature(0.5)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:439:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
437 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
438 | 
439 |         viewModel.updateTemperature(0.5)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
440 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.5)
441 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:440:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
438 | 
439 |         viewModel.updateTemperature(0.5)
440 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.5)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
441 | 
442 |         // Test boundary values

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:443:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
441 | 
442 |         // Test boundary values
443 |         viewModel.updateTemperature(0.0)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
444 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.0)
445 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:444:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
442 |         // Test boundary values
443 |         viewModel.updateTemperature(0.0)
444 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.0)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
445 | 
446 |         viewModel.updateTemperature(1.0)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:446:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
444 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.0)
445 | 
446 |         viewModel.updateTemperature(1.0)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
447 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 1.0)
448 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:447:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
445 | 
446 |         viewModel.updateTemperature(1.0)
447 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 1.0)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
448 | 
449 |         // Test invalid values (should be clamped or rejected)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:450:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
448 | 
449 |         // Test invalid values (should be clamped or rejected)
450 |         viewModel.updateTemperature(-0.1)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
451 |         XCTAssertGreaterThanOrEqual(viewModel.providerConfigState?.temperature ?? 0, 0.0)
452 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:451:37: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
449 |         // Test invalid values (should be clamped or rejected)
450 |         viewModel.updateTemperature(-0.1)
451 |         XCTAssertGreaterThanOrEqual(viewModel.providerConfigState?.temperature ?? 0, 0.0)
    |                                     |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                     |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
452 | 
453 |         viewModel.updateTemperature(1.1)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:453:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
451 |         XCTAssertGreaterThanOrEqual(viewModel.providerConfigState?.temperature ?? 0, 0.0)
452 | 
453 |         viewModel.updateTemperature(1.1)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
454 |         XCTAssertLessThanOrEqual(viewModel.providerConfigState?.temperature ?? 1, 1.0)
455 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:454:34: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
452 | 
453 |         viewModel.updateTemperature(1.1)
454 |         XCTAssertLessThanOrEqual(viewModel.providerConfigState?.temperature ?? 1, 1.0)
    |                                  |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                  |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                  `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
455 |     }
456 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:459:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
457 |     func test_updateCustomEndpoint_validatesURL() {
458 |         // RED: Should fail - URL validation not implemented
459 |         viewModel.selectedProvider = .custom
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
460 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
461 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:460:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
458 |         // RED: Should fail - URL validation not implemented
459 |         viewModel.selectedProvider = .custom
460 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
461 | 
462 |         viewModel.updateCustomEndpoint("https://api.test.com")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:462:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
460 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
461 | 
462 |         viewModel.updateCustomEndpoint("https://api.test.com")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
463 |         XCTAssertEqual(viewModel.providerConfigState?.customEndpoint, "https://api.test.com")
464 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:463:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
461 | 
462 |         viewModel.updateCustomEndpoint("https://api.test.com")
463 |         XCTAssertEqual(viewModel.providerConfigState?.customEndpoint, "https://api.test.com")
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
464 | 
465 |         // Test invalid URLs (should show error or reject)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:466:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
464 | 
465 |         // Test invalid URLs (should show error or reject)
466 |         viewModel.updateCustomEndpoint("invalid-url")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
467 |         // Should either reject or show error (will fail in RED phase)
468 |         XCTAssertTrue(viewModel.alert != nil || viewModel.providerConfigState?.customEndpoint != "invalid-url")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:468:33: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
466 |         viewModel.updateCustomEndpoint("invalid-url")
467 |         // Should either reject or show error (will fail in RED phase)
468 |         XCTAssertTrue(viewModel.alert != nil || viewModel.providerConfigState?.customEndpoint != "invalid-url")
    |                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
469 |     }
470 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:468:49: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
466 |         viewModel.updateCustomEndpoint("invalid-url")
467 |         // Should either reject or show error (will fail in RED phase)
468 |         XCTAssertTrue(viewModel.alert != nil || viewModel.providerConfigState?.customEndpoint != "invalid-url")
    |                                                 |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                                 |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
469 |     }
470 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:473:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
471 |     func test_saveConfiguration_callsServiceWithCorrectParameters() async {
472 |         // RED: Should fail - service integration not implemented
473 |         mockService.shouldAuthenticate = true
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldAuthenticate' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
474 |         viewModel.selectedProvider = .claude
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:474:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
472 |         // RED: Should fail - service integration not implemented
473 |         mockService.shouldAuthenticate = true
474 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:475:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
473 |         mockService.shouldAuthenticate = true
474 |         viewModel.selectedProvider = .claude
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
477 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:476:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
474 |         viewModel.selectedProvider = .claude
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
477 | 
478 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:478:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
477 | 
478 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
479 | 
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:480:23: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
478 |         await viewModel.saveProviderConfiguration()
479 | 
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)
    |                       |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
    |                       |- note: chain the optional using '?' to access member 'authenticateAndSaveAPICalled' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
481 |         XCTAssertEqual(mockService.lastSavedAPIKey, "sk-ant-test123")
482 |         XCTAssertEqual(mockService.lastSavedProvider, .claude)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:481:24: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedAPIKey' of wrapped base type 'MockLLMProviderSettingsService'
479 | 
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)
481 |         XCTAssertEqual(mockService.lastSavedAPIKey, "sk-ant-test123")
    |                        |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedAPIKey' of wrapped base type 'MockLLMProviderSettingsService'
    |                        |- note: chain the optional using '?' to access member 'lastSavedAPIKey' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
482 |         XCTAssertEqual(mockService.lastSavedProvider, .claude)
483 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:482:24: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedProvider' of wrapped base type 'MockLLMProviderSettingsService'
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)
481 |         XCTAssertEqual(mockService.lastSavedAPIKey, "sk-ant-test123")
482 |         XCTAssertEqual(mockService.lastSavedProvider, .claude)
    |                        |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedProvider' of wrapped base type 'MockLLMProviderSettingsService'
    |                        |- note: chain the optional using '?' to access member 'lastSavedProvider' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
483 |     }
484 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:487:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
485 |     func test_removeConfiguration_clearsProviderState() async {
486 |         // RED: Should fail - remove configuration not implemented
487 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
488 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
489 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:488:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
486 |         // RED: Should fail - remove configuration not implemented
487 |         viewModel.selectedProvider = .claude
488 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
489 | 
490 |         await viewModel.removeProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:490:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
488 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
489 | 
490 |         await viewModel.removeProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'removeProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
491 | 
492 |         // Should clear state and update UI (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:493:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
491 | 
492 |         // Should clear state and update UI (will fail in RED phase)
493 |         XCTAssertFalse(viewModel.isProviderConfigSheetPresented)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
494 |         XCTAssertNil(viewModel.selectedProvider)
495 |         XCTAssertNil(viewModel.providerConfigState)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:494:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
492 |         // Should clear state and update UI (will fail in RED phase)
493 |         XCTAssertFalse(viewModel.isProviderConfigSheetPresented)
494 |         XCTAssertNil(viewModel.selectedProvider)
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
495 |         XCTAssertNil(viewModel.providerConfigState)
496 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:495:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
493 |         XCTAssertFalse(viewModel.isProviderConfigSheetPresented)
494 |         XCTAssertNil(viewModel.selectedProvider)
495 |         XCTAssertNil(viewModel.providerConfigState)
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
496 |     }
497 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:502:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
500 |     func test_saveConfiguration_emptyAPIKey_showsValidationError() async {
501 |         // RED: Should fail - validation not implemented
502 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
503 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
504 |         viewModel.providerConfigState?.apiKey = ""

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:503:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
501 |         // RED: Should fail - validation not implemented
502 |         viewModel.selectedProvider = .claude
503 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
504 |         viewModel.providerConfigState?.apiKey = ""
505 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:504:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
502 |         viewModel.selectedProvider = .claude
503 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
504 |         viewModel.providerConfigState?.apiKey = ""
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
505 | 
506 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:506:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
504 |         viewModel.providerConfigState?.apiKey = ""
505 | 
506 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
507 | 
508 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:508:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
506 |         await viewModel.saveProviderConfiguration()
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
509 |         if case let .error(message) = viewModel.alert {
510 |             XCTAssertTrue(message.contains("API key is required"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:509:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
509 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
510 |             XCTAssertTrue(message.contains("API key is required"))
511 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:509:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
509 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
510 |             XCTAssertTrue(message.contains("API key is required"))
511 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:509:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
509 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
510 |             XCTAssertTrue(message.contains("API key is required"))
511 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:518:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldValidateFormat' of wrapped base type 'MockLLMProviderSettingsService'
516 |     func test_saveConfiguration_invalidAPIKeyFormat_showsError() async {
517 |         // RED: Should fail - format validation not implemented
518 |         mockService.shouldValidateFormat = false
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldValidateFormat' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldValidateFormat' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
519 |         viewModel.selectedProvider = .claude
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:519:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
517 |         // RED: Should fail - format validation not implemented
518 |         mockService.shouldValidateFormat = false
519 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:520:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
518 |         mockService.shouldValidateFormat = false
519 |         viewModel.selectedProvider = .claude
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"
522 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:521:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
519 |         viewModel.selectedProvider = .claude
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
522 | 
523 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:523:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"
522 | 
523 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
524 | 
525 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:525:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
523 |         await viewModel.saveProviderConfiguration()
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
526 |         if case let .error(message) = viewModel.alert {
527 |             XCTAssertTrue(message.contains("Invalid API key format"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:526:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
526 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
527 |             XCTAssertTrue(message.contains("Invalid API key format"))
528 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:526:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
526 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
527 |             XCTAssertTrue(message.contains("Invalid API key format"))
528 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:526:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
526 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
527 |             XCTAssertTrue(message.contains("Invalid API key format"))
528 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:535:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
533 |     func test_updateTemperature_invalidRange_showsError() {
534 |         // RED: Should fail - range validation not implemented
535 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
536 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
537 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:536:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
534 |         // RED: Should fail - range validation not implemented
535 |         viewModel.selectedProvider = .claude
536 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
537 | 
538 |         viewModel.updateTemperature(-1.0)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:538:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
536 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
537 | 
538 |         viewModel.updateTemperature(-1.0)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
539 | 
540 |         // Should show error for invalid range (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:541:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
539 | 
540 |         // Should show error for invalid range (will fail in RED phase)
541 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
542 |     }
543 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:546:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
544 |     func test_updateCustomEndpoint_invalidURL_showsError() {
545 |         // RED: Should fail - URL validation not implemented
546 |         viewModel.selectedProvider = .custom
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
547 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
548 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:547:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
545 |         // RED: Should fail - URL validation not implemented
546 |         viewModel.selectedProvider = .custom
547 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
548 | 
549 |         viewModel.updateCustomEndpoint("not-a-url")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:549:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
547 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
548 | 
549 |         viewModel.updateCustomEndpoint("not-a-url")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
550 | 
551 |         // Should show error for invalid URL (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:552:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
550 | 
551 |         // Should show error for invalid URL (will fail in RED phase)
552 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
553 |     }
554 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:557:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
555 |     func test_loadConfigurations_serviceError_setsErrorState() async {
556 |         // RED: Should fail - error handling not implemented
557 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
558 |         mockConfigService.errorToThrow = TestError.networkError
559 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:558:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'errorToThrow' of wrapped base type 'MockLLMConfigurationService'
556 |         // RED: Should fail - error handling not implemented
557 |         mockConfigService.shouldSucceed = false
558 |         mockConfigService.errorToThrow = TestError.networkError
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'errorToThrow' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'errorToThrow' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
559 | 
560 |         await viewModel.loadConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:560:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
558 |         mockConfigService.errorToThrow = TestError.networkError
559 | 
560 |         await viewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
561 | 
562 |         if case let .error(message) = viewModel.uiState {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:562:39: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
560 |         await viewModel.loadConfigurations()
561 | 
562 |         if case let .error(message) = viewModel.uiState {
    |                                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                       |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
563 |             XCTAssertFalse(message.isEmpty)
564 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:571:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
569 |     func test_saveConfiguration_serviceError_showsAlert() async {
570 |         // RED: Should fail - error handling not implemented
571 |         mockService.shouldAuthenticate = false
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldAuthenticate' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
572 |         mockService.errorToThrow = TestError.authenticationFailed
573 |         viewModel.selectedProvider = .claude

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:572:46: error: type 'TestError' has no member 'authenticationFailed'
570 |         // RED: Should fail - error handling not implemented
571 |         mockService.shouldAuthenticate = false
572 |         mockService.errorToThrow = TestError.authenticationFailed
    |                                              `- error: type 'TestError' has no member 'authenticationFailed'
573 |         viewModel.selectedProvider = .claude
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:573:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
571 |         mockService.shouldAuthenticate = false
572 |         mockService.errorToThrow = TestError.authenticationFailed
573 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:574:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
572 |         mockService.errorToThrow = TestError.authenticationFailed
573 |         viewModel.selectedProvider = .claude
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
576 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:575:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
573 |         viewModel.selectedProvider = .claude
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
576 | 
577 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:577:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
576 | 
577 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
578 | 
579 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:579:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
577 |         await viewModel.saveProviderConfiguration()
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
580 |         if case let .error(message) = viewModel.alert {
581 |             XCTAssertTrue(message.contains("Authentication failed"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:580:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
580 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
581 |             XCTAssertTrue(message.contains("Authentication failed"))
582 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:580:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
580 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
581 |             XCTAssertTrue(message.contains("Authentication failed"))
582 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:580:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
580 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
581 |             XCTAssertTrue(message.contains("Authentication failed"))
582 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:589:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
587 |     func test_removeConfiguration_serviceError_maintainsState() async {
588 |         // RED: Should fail - error recovery not implemented
589 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
590 |         mockConfigService.errorToThrow = TestError.configurationFailed
591 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:590:52: error: type 'TestError' has no member 'configurationFailed'
588 |         // RED: Should fail - error recovery not implemented
589 |         mockConfigService.shouldSucceed = false
590 |         mockConfigService.errorToThrow = TestError.configurationFailed
    |                                                    `- error: type 'TestError' has no member 'configurationFailed'
591 | 
592 |         let originalConfigState = viewModel.providerConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:592:35: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
590 |         mockConfigService.errorToThrow = TestError.configurationFailed
591 | 
592 |         let originalConfigState = viewModel.providerConfigState
    |                                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                   |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
593 | 
594 |         await viewModel.removeProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:594:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
592 |         let originalConfigState = viewModel.providerConfigState
593 | 
594 |         await viewModel.removeProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'removeProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
595 | 
596 |         // Should maintain state on error (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:597:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
595 | 
596 |         // Should maintain state on error (will fail in RED phase)
597 |         XCTAssertEqual(viewModel.providerConfigState, originalConfigState)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
598 |     }
599 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:602:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMProviderSettingsService'
600 |     func test_clearAllConfigurations_serviceError_showsAlert() async {
601 |         // RED: Should fail - error handling not implemented
602 |         mockService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
603 |         mockService.errorToThrow = TestError.configurationFailed
604 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:603:46: error: type 'TestError' has no member 'configurationFailed'
601 |         // RED: Should fail - error handling not implemented
602 |         mockService.shouldSucceed = false
603 |         mockService.errorToThrow = TestError.configurationFailed
    |                                              `- error: type 'TestError' has no member 'configurationFailed'
604 | 
605 |         await viewModel.clearAllConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:605:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
603 |         mockService.errorToThrow = TestError.configurationFailed
604 | 
605 |         await viewModel.clearAllConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'clearAllConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
606 | 
607 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:607:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
605 |         await viewModel.clearAllConfigurations()
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
608 |         if case let .error(message) = viewModel.alert {
609 |             XCTAssertFalse(message.isEmpty)

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:608:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
608 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
609 |             XCTAssertFalse(message.isEmpty)
610 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:608:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
608 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
609 |             XCTAssertFalse(message.isEmpty)
610 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:608:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
608 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
609 |             XCTAssertFalse(message.isEmpty)
610 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:620:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
618 |         // RED: Should pass - @Observable should trigger updates
619 |         let expectation = XCTestExpectation(description: "Alert update triggers UI update")
620 |         let cancellable = viewModel.objectWillChange.sink {
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'objectWillChange' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
621 |             expectation.fulfill()
622 |         }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:624:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
622 |         }
623 | 
624 |         viewModel.alert = .error("Test error")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
625 |         wait(for: [expectation], timeout: 1.0)
626 |         cancellable.cancel()

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:624:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
622 |         }
623 | 
624 |         viewModel.alert = .error("Test error")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
625 |         wait(for: [expectation], timeout: 1.0)
626 |         cancellable.cancel()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:631:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
629 |     func test_dismissAlert_clearsAlertState() {
630 |         // RED: Should pass - basic property clearing
631 |         viewModel.alert = .error("Test error")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:631:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
629 |     func test_dismissAlert_clearsAlertState() {
630 |         // RED: Should pass - basic property clearing
631 |         viewModel.alert = .error("Test error")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:632:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
630 |         // RED: Should pass - basic property clearing
631 |         viewModel.alert = .error("Test error")
632 |         viewModel.dismissAlert()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'dismissAlert' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
633 |         XCTAssertNil(viewModel.alert)
634 |         XCTAssertFalse(viewModel.isAlertPresented)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:633:32: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
631 |         viewModel.alert = .error("Test error")
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)
    |                                `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
634 |         XCTAssertFalse(viewModel.isAlertPresented)
635 |     }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:634:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)
634 |         XCTAssertFalse(viewModel.isAlertPresented)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
635 |     }
636 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:639:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
637 |     func test_multipleAlerts_latestOverridesPrevious() {
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
640 |         viewModel.alert = .success("Success message")
641 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:639:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
637 |     func test_multipleAlerts_latestOverridesPrevious() {
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
640 |         viewModel.alert = .success("Success message")
641 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:640:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
640 |         viewModel.alert = .success("Success message")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
641 | 
642 |         if case let .success(message) = viewModel.alert {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:640:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
640 |         viewModel.alert = .success("Success message")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
641 | 
642 |         if case let .success(message) = viewModel.alert {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:642:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
640 |         viewModel.alert = .success("Success message")
641 | 
642 |         if case let .success(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
643 |             XCTAssertEqual(message, "Success message")
644 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:642:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
640 |         viewModel.alert = .success("Success message")
641 | 
642 |         if case let .success(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
643 |             XCTAssertEqual(message, "Success message")
644 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:642:51: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
640 |         viewModel.alert = .success("Success message")
641 | 
642 |         if case let .success(message) = viewModel.alert {
    |                                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
643 |             XCTAssertEqual(message, "Success message")
644 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:651:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
649 |     func test_errorAlert_setsCorrectMessage() {
650 |         // RED: Should pass - basic property setting
651 |         viewModel.showError("Test error message")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showError' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
652 | 
653 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:653:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
651 |         viewModel.showError("Test error message")
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
654 |         if case let .error(message) = viewModel.alert {
655 |             XCTAssertEqual(message, "Test error message")

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:654:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
654 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
655 |             XCTAssertEqual(message, "Test error message")
656 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:654:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
654 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
655 |             XCTAssertEqual(message, "Test error message")
656 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:654:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
654 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
655 |             XCTAssertEqual(message, "Test error message")
656 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:663:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showSuccess' of wrapped base type 'LLMProviderSettingsViewModel'
661 |     func test_successAlert_setsCorrectMessage() {
662 |         // RED: Should pass - basic property setting
663 |         viewModel.showSuccess("Test success message")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showSuccess' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showSuccess' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
664 | 
665 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:665:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
663 |         viewModel.showSuccess("Test success message")
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
666 |         if case let .success(message) = viewModel.alert {
667 |             XCTAssertEqual(message, "Test success message")

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:666:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
666 |         if case let .success(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
667 |             XCTAssertEqual(message, "Test success message")
668 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:666:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
666 |         if case let .success(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
667 |             XCTAssertEqual(message, "Test success message")
668 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:666:51: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
666 |         if case let .success(message) = viewModel.alert {
    |                                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
667 |             XCTAssertEqual(message, "Test success message")
668 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:675:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
673 |     func test_clearConfirmationAlert_setsCorrectActions() {
674 |         // RED: Should pass - basic property setting
675 |         viewModel.showClearConfirmation()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showClearConfirmation' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:677:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
675 |         viewModel.showClearConfirmation()
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
678 |         if case .clearConfirmation = viewModel.alert {
679 |             // Correct alert type set

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:678:18: error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
678 |         if case .clearConfirmation = viewModel.alert {
    |                  `- error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
679 |             // Correct alert type set
680 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:678:18: error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
678 |         if case .clearConfirmation = viewModel.alert {
    |                  `- error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
679 |             // Correct alert type set
680 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:678:48: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
678 |         if case .clearConfirmation = viewModel.alert {
    |                                                `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
679 |             // Correct alert type set
680 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:812:45: error: type 'TestError' has no member 'authenticationFailed'
810 | 
811 |         if !shouldAuthenticate {
812 |             throw errorToThrow ?? TestError.authenticationFailed
    |                                             `- error: type 'TestError' has no member 'authenticationFailed'
813 |         }
814 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:816:45: error: type 'TestError' has no member 'configurationFailed'
814 | 
815 |         if !shouldSucceed {
816 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
817 |         }
818 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:838:45: error: type 'TestError' has no member 'configurationFailed'
836 |     func getActiveProvider() async throws -> LLMProviderConfig? {
837 |         if !shouldSucceed {
838 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
839 |         }
840 |         return nil

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:845:45: error: type 'TestError' has no member 'configurationFailed'
843 |     func getAvailableProviders() async throws -> [LLMProvider] {
844 |         if !shouldSucceed {
845 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
846 |         }
847 |         return []

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:852:45: error: type 'TestError' has no member 'configurationFailed'
850 |     func getProviderPriority() async throws -> LLMProviderSettingsViewModel.ProviderPriority? {
851 |         if !shouldSucceed {
852 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
853 |         }
854 |         return nil

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:859:45: error: type 'TestError' has no member 'configurationFailed'
857 |     func configureProvider(_: LLMProvider, apiKey _: String, config _: LLMProviderConfig) async throws {
858 |         if !shouldSucceed {
859 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
860 |         }
861 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:865:45: error: type 'TestError' has no member 'configurationFailed'
863 |     func removeProvider(_: LLMProvider) async throws {
864 |         if !shouldSucceed {
865 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
866 |         }
867 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:871:45: error: type 'TestError' has no member 'configurationFailed'
869 |     func clearAllConfigurations() async throws {
870 |         if !shouldSucceed {
871 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
872 |         }
873 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:877:45: error: type 'TestError' has no member 'configurationFailed'
875 |     func updateProviderPriority(_: LLMProviderSettingsViewModel.ProviderPriority) async throws {
876 |         if !shouldSucceed {
877 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
878 |         }
879 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:35:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 33 |         mockService = MockLLMProviderSettingsService(
 34 |             biometricService: mockBiometricService,
 35 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 36 |             configurationService: mockConfigService
 37 |         )

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:36:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 34 |             biometricService: mockBiometricService,
 35 |             keychainService: mockKeychainService,
 36 |             configurationService: mockConfigService
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 37 |         )
 38 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:40:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 38 | 
 39 |         modernViewModel = LLMProviderSettingsViewModel(
 40 |             configurationService: mockConfigService,
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 41 |             keychainService: mockKeychainService,
 42 |             settingsService: mockService

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:41:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 39 |         modernViewModel = LLMProviderSettingsViewModel(
 40 |             configurationService: mockConfigService,
 41 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 42 |             settingsService: mockService
 43 |         )

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:42:30: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
 40 |             configurationService: mockConfigService,
 41 |             keychainService: mockKeychainService,
 42 |             settingsService: mockService
    |                              |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 43 |         )
 44 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:73:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
 71 | 
 72 |         // Test provider selection
 73 |         modernViewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 74 |         if modernViewModel.selectedProvider == .claude,
 75 |            modernViewModel.isProviderConfigSheetPresented {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:74:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
 72 |         // Test provider selection
 73 |         modernViewModel.selectProvider(.claude)
 74 |         if modernViewModel.selectedProvider == .claude,
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 75 |            modernViewModel.isProviderConfigSheetPresented {
 76 |             implementedFeatures.append("Provider selection and configuration")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:75:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
 73 |         modernViewModel.selectProvider(.claude)
 74 |         if modernViewModel.selectedProvider == .claude,
 75 |            modernViewModel.isProviderConfigSheetPresented {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 76 |             implementedFeatures.append("Provider selection and configuration")
 77 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:80:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
 78 | 
 79 |         // Test biometric authentication
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'isAuthenticating' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 81 |             await modernViewModel.authenticateAndSave()
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:81:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
 79 |         // Test biometric authentication
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
 81 |             await modernViewModel.authenticateAndSave()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'authenticateAndSave' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {
 83 |                 implementedFeatures.append("Biometric authentication for API key saving")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:82:16: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
 81 |             await modernViewModel.authenticateAndSave()
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {
    |                |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
    |                |- note: chain the optional using '?' to access member 'isAuthenticating' only for non-'nil' base values
    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 83 |                 implementedFeatures.append("Biometric authentication for API key saving")
 84 |             }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:82:52: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
 81 |             await modernViewModel.authenticateAndSave()
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {
    |                                                    |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
    |                                                    |- note: chain the optional using '?' to access member 'authenticateAndSaveAPICalled' only for non-'nil' base values
    |                                                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 83 |                 implementedFeatures.append("Biometric authentication for API key saving")
 84 |             }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:88:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
 86 | 
 87 |         // Test provider priority
 88 |         await modernViewModel.updateFallbackBehavior(.loadBalanced)
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'updateFallbackBehavior' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 89 |         if modernViewModel.providerPriority.fallbackBehavior == .loadBalanced {
 90 |             implementedFeatures.append("Provider priority management")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:89:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
 87 |         // Test provider priority
 88 |         await modernViewModel.updateFallbackBehavior(.loadBalanced)
 89 |         if modernViewModel.providerPriority.fallbackBehavior == .loadBalanced {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 90 |             implementedFeatures.append("Provider priority management")
 91 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:94:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
 92 | 
 93 |         // Test clear all
 94 |         await modernViewModel.clearAllConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'clearAllConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 95 |         if modernViewModel.configuredProviders.isEmpty {
 96 |             implementedFeatures.append("Clear all configurations")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:95:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'configuredProviders' of wrapped base type 'LLMProviderSettingsViewModel'
 93 |         // Test clear all
 94 |         await modernViewModel.clearAllConfigurations()
 95 |         if modernViewModel.configuredProviders.isEmpty {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'configuredProviders' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'configuredProviders' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 96 |             implementedFeatures.append("Clear all configurations")
 97 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:100:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
 98 | 
 99 |         // Test model selection
100 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
101 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
102 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:101:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
 99 |         // Test model selection
100 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
101 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateSelectedModel' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
102 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {
103 |             implementedFeatures.append("Model selection and temperature adjustment")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:102:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
100 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
101 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
102 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
103 |             implementedFeatures.append("Model selection and temperature adjustment")
104 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:107:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
105 | 
106 |         // Test custom endpoint
107 |         modernViewModel.updateCustomEndpoint("https://api.test.com")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
108 |         if modernViewModel.providerConfigState?.customEndpoint == "https://api.test.com" {
109 |             implementedFeatures.append("Custom endpoint configuration")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:108:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
106 |         // Test custom endpoint
107 |         modernViewModel.updateCustomEndpoint("https://api.test.com")
108 |         if modernViewModel.providerConfigState?.customEndpoint == "https://api.test.com" {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
109 |             implementedFeatures.append("Custom endpoint configuration")
110 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:113:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
111 | 
112 |         // Test validation and error handling
113 |         modernViewModel.showError("Test error")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showError' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
114 |         if modernViewModel.alert != nil {
115 |             implementedFeatures.append("Real-time validation and error handling")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:114:28: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
112 |         // Test validation and error handling
113 |         modernViewModel.showError("Test error")
114 |         if modernViewModel.alert != nil {
    |                            `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
115 |             implementedFeatures.append("Real-time validation and error handling")
116 |         }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:141:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
139 | 
140 |         // Tap provider to configure
141 |         modernViewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
142 |         if modernViewModel.isProviderConfigSheetPresented {
143 |             workingInteractions.append("Tap provider to configure")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:142:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
140 |         // Tap provider to configure
141 |         modernViewModel.selectProvider(.claude)
142 |         if modernViewModel.isProviderConfigSheetPresented {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
143 |             workingInteractions.append("Tap provider to configure")
144 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:147:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
145 | 
146 |         // API key field (simulated - actual implementation in view)
147 |         if modernViewModel.providerConfigState != nil {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
148 |             workingInteractions.append("Show/hide API key in secure field")
149 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:152:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'getModelsForProvider' of wrapped base type 'LLMProviderSettingsViewModel'
150 | 
151 |         // Model selection
152 |         let models = modernViewModel.getModelsForProvider(.claude)
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'getModelsForProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'getModelsForProvider' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
153 |         if !models.isEmpty {
154 |             workingInteractions.append("Select model from picker")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:158:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
156 | 
157 |         // Temperature adjustment
158 |         modernViewModel.updateTemperature(0.8)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
159 |         if modernViewModel.providerConfigState?.temperature == 0.8 {
160 |             workingInteractions.append("Adjust temperature slider")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:159:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
157 |         // Temperature adjustment
158 |         modernViewModel.updateTemperature(0.8)
159 |         if modernViewModel.providerConfigState?.temperature == 0.8 {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
160 |             workingInteractions.append("Adjust temperature slider")
161 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:164:12: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
162 | 
163 |         // Biometric auth (simulated)
164 |         if mockService.shouldAuthenticate {
    |            |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
    |            |- note: chain the optional using '?' to access member 'shouldAuthenticate' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
165 |             workingInteractions.append("Save configuration with biometric auth")
166 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:174:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'moveProvider' of wrapped base type 'LLMProviderSettingsViewModel'
172 |         let indexSet = IndexSet([0])
173 |         Task {
174 |             await modernViewModel.moveProvider(from: indexSet, to: 1)
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'moveProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'moveProvider' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
175 |         }
176 |         workingInteractions.append("Drag to reorder providers")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:179:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
177 | 
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showClearConfirmation' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
180 |         if case .clearConfirmation = modernViewModel.alert {
181 |             workingInteractions.append("Clear all with confirmation")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:180:18: error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
180 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
181 |             workingInteractions.append("Clear all with confirmation")
182 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:180:18: error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
180 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
181 |             workingInteractions.append("Clear all with confirmation")
182 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:180:54: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
180 |         if case .clearConfirmation = modernViewModel.alert {
    |                                                      `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
181 |             workingInteractions.append("Clear all with confirmation")
182 |         }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:193:29: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
191 | 
192 |         // Test state transitions match TCA behavior
193 |         let originalState = modernViewModel.uiState
    |                             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                             |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
194 |         XCTAssertEqual(originalState, .idle)
195 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:194:40: error: type 'Equatable' has no member 'idle'
192 |         // Test state transitions match TCA behavior
193 |         let originalState = modernViewModel.uiState
194 |         XCTAssertEqual(originalState, .idle)
    |                                        `- error: type 'Equatable' has no member 'idle'
195 | 
196 |         // Loading state

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:198:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
196 |         // Loading state
197 |         let loadTask = Task {
198 |             await modernViewModel.loadConfigurations()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
199 |         }
200 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:206:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
204 | 
205 |         // State should be loaded or error (not idle)
206 |         XCTAssertNotEqual(modernViewModel.uiState, .idle)
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
207 | 
208 |         // Error state handling

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:209:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
207 | 
208 |         // Error state handling
209 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
210 |         await modernViewModel.loadConfigurations()
211 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:210:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
208 |         // Error state handling
209 |         mockConfigService.shouldSucceed = false
210 |         await modernViewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
211 | 
212 |         if case .error = modernViewModel.uiState {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:212:26: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
210 |         await modernViewModel.loadConfigurations()
211 | 
212 |         if case .error = modernViewModel.uiState {
    |                          |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                          |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
213 |             // Error state correctly set
214 |         } else {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:219:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
217 | 
218 |         // Alert state management
219 |         modernViewModel.showError("Test error")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showError' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
220 |         XCTAssertTrue(modernViewModel.isAlertPresented)
221 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:220:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
218 |         // Alert state management
219 |         modernViewModel.showError("Test error")
220 |         XCTAssertTrue(modernViewModel.isAlertPresented)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
221 | 
222 |         modernViewModel.dismissAlert()

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:222:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
220 |         XCTAssertTrue(modernViewModel.isAlertPresented)
221 | 
222 |         modernViewModel.dismissAlert()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'dismissAlert' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
223 |         XCTAssertFalse(modernViewModel.isAlertPresented)
224 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:223:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
221 | 
222 |         modernViewModel.dismissAlert()
223 |         XCTAssertFalse(modernViewModel.isAlertPresented)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
224 |     }
225 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:247:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
245 | 
246 |         // Test each mapping
247 |         modernViewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
248 |         if modernViewModel.selectedProvider == .claude {
249 |             mappedActions.append("providerTapped")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:248:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
246 |         // Test each mapping
247 |         modernViewModel.selectProvider(.claude)
248 |         if modernViewModel.selectedProvider == .claude {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
249 |             mappedActions.append("providerTapped")
250 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:252:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
250 |         }
251 | 
252 |         modernViewModel.showClearConfirmation()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showClearConfirmation' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
253 |         if case .clearConfirmation = modernViewModel.alert {
254 |             mappedActions.append("clearAllTapped")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:253:18: error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
251 | 
252 |         modernViewModel.showClearConfirmation()
253 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
254 |             mappedActions.append("clearAllTapped")
255 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:253:18: error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
251 | 
252 |         modernViewModel.showClearConfirmation()
253 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
254 |             mappedActions.append("clearAllTapped")
255 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:253:54: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
251 | 
252 |         modernViewModel.showClearConfirmation()
253 |         if case .clearConfirmation = modernViewModel.alert {
    |                                                      `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
254 |             mappedActions.append("clearAllTapped")
255 |         }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:258:13: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
256 | 
257 |         // Sheet binding (property access)
258 |         _ = modernViewModel.isProviderConfigSheetPresented
    |             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |             |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
259 |         mappedActions.append("setProviderConfigSheet")
260 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:263:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
261 |         // Configuration methods exist (compilation test)
262 |         Task {
263 |             await modernViewModel.saveProviderConfiguration()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
264 |             await modernViewModel.removeProviderConfiguration()
265 |             await modernViewModel.updateFallbackBehavior(.sequential)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:272:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
270 | 
271 |         // Model and config updates
272 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
274 |         modernViewModel.updateTemperature(0.5)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:273:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
271 |         // Model and config updates
272 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateSelectedModel' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
274 |         modernViewModel.updateTemperature(0.5)
275 |         modernViewModel.updateCustomEndpoint("https://test.com")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:274:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
272 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
274 |         modernViewModel.updateTemperature(0.5)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
275 |         modernViewModel.updateCustomEndpoint("https://test.com")
276 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:275:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
274 |         modernViewModel.updateTemperature(0.5)
275 |         modernViewModel.updateCustomEndpoint("https://test.com")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
276 | 
277 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:277:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
275 |         modernViewModel.updateCustomEndpoint("https://test.com")
276 | 
277 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
278 |             mappedActions.append("modelSelected")
279 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:280:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
278 |             mappedActions.append("modelSelected")
279 |         }
280 |         if modernViewModel.providerConfigState?.temperature == 0.5 {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
281 |             mappedActions.append("temperatureChanged")
282 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:283:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
281 |             mappedActions.append("temperatureChanged")
282 |         }
283 |         if modernViewModel.providerConfigState?.customEndpoint == "https://test.com" {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
284 |             mappedActions.append("customEndpointChanged")
285 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:307:41: warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any ObservableObject' is equivalent to an implicit conversion to an optional 'any ObservableObject'
305 | 
306 |         // Protocol conformance should be to SwiftUI protocols, not TCA
307 |         XCTAssertNotNil(modernViewModel as? any ObservableObject)
    |                                         `- warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any ObservableObject' is equivalent to an implicit conversion to an optional 'any ObservableObject'
308 |         XCTAssertNotNil(modernViewModel as? any LLMProviderSettingsViewModelProtocol)
309 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:308:41: warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any LLMProviderSettingsViewModelProtocol' is equivalent to an implicit conversion to an optional 'any LLMProviderSettingsViewModelProtocol'
306 |         // Protocol conformance should be to SwiftUI protocols, not TCA
307 |         XCTAssertNotNil(modernViewModel as? any ObservableObject)
308 |         XCTAssertNotNil(modernViewModel as? any LLMProviderSettingsViewModelProtocol)
    |                                         `- warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any LLMProviderSettingsViewModelProtocol' is equivalent to an implicit conversion to an optional 'any LLMProviderSettingsViewModelProtocol'
309 | 
310 |         // State management should be @Observable, not TCA State

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:320:39: warning: checking a value with optional type 'LLMProviderSettingsViewModel?' against type 'any ObservableObject' succeeds whenever the value is non-nil; did you mean to use '!= nil'?
318 | 
319 |         // @Observable pattern
320 |         XCTAssertTrue(modernViewModel is any ObservableObject)
    |                                       `- warning: checking a value with optional type 'LLMProviderSettingsViewModel?' against type 'any ObservableObject' succeeds whenever the value is non-nil; did you mean to use '!= nil'?
321 | 
322 |         // Property wrappers (simulated - actual test in view)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:324:13: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
322 |         // Property wrappers (simulated - actual test in view)
323 |         let hasBindableProperties = [
324 |             modernViewModel.isProviderConfigSheetPresented,
    |             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |             |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
325 |             modernViewModel.selectedProvider != nil,
326 |             modernViewModel.alert != nil,

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:325:13: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
323 |         let hasBindableProperties = [
324 |             modernViewModel.isProviderConfigSheetPresented,
325 |             modernViewModel.selectedProvider != nil,
    |             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |             |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
326 |             modernViewModel.alert != nil,
327 |         ].contains(true)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:326:29: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
324 |             modernViewModel.isProviderConfigSheetPresented,
325 |             modernViewModel.selectedProvider != nil,
326 |             modernViewModel.alert != nil,
    |                             `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
327 |         ].contains(true)
328 |         XCTAssertTrue(hasBindableProperties)

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:332:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
330 |         // Async/await pattern
331 |         Task {
332 |             await modernViewModel.loadConfigurations()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
333 |             await modernViewModel.saveProviderConfiguration()
334 |             await modernViewModel.clearAllConfigurations()

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:339:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'testProviderConnection' of wrapped base type 'LLMProviderSettingsViewModel'
337 |         // Error handling with Result/throwing functions
338 |         do {
339 |             _ = try await modernViewModel.testProviderConnection(TestFixtures.testConfig)
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'testProviderConnection' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'testProviderConnection' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
340 |         } catch {
341 |             // Expected to fail in RED phase

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:345:33: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
343 | 
344 |         // State consistency
345 |         let stateIsConsistent = modernViewModel.isAlertPresented == (modernViewModel.alert != nil)
    |                                 |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                 |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
346 |         XCTAssertTrue(stateIsConsistent)
347 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:345:86: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
343 | 
344 |         // State consistency
345 |         let stateIsConsistent = modernViewModel.isAlertPresented == (modernViewModel.alert != nil)
    |                                                                                      `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
346 |         XCTAssertTrue(stateIsConsistent)
347 |     }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:355:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
353 | 
354 |         // Simulate existing configuration
355 |         mockConfigService.shouldSucceed = true
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
356 |         _ = TestFixtures.testConfig
357 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:358:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
356 |         _ = TestFixtures.testConfig
357 | 
358 |         await modernViewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
359 | 
360 |         // Existing configuration should be loaded (will fail in RED phase)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:362:25: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'activeProvider' of wrapped base type 'LLMProviderSettingsViewModel'
360 |         // Existing configuration should be loaded (will fail in RED phase)
361 |         // This test ensures no data loss during migration
362 |         XCTAssertNotNil(modernViewModel.activeProvider ?? mockConfigService.mockActiveProvider)
    |                         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'activeProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                         `- note: chain the optional using '?' to access member 'activeProvider' only for non-'nil' base values
363 |     }
364 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:362:59: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'mockActiveProvider' of wrapped base type 'MockLLMConfigurationService'
360 |         // Existing configuration should be loaded (will fail in RED phase)
361 |         // This test ensures no data loss during migration
362 |         XCTAssertNotNil(modernViewModel.activeProvider ?? mockConfigService.mockActiveProvider)
    |                                                           |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'mockActiveProvider' of wrapped base type 'MockLLMConfigurationService'
    |                                                           `- note: chain the optional using '?' to access member 'mockActiveProvider' only for non-'nil' base values
363 |     }
364 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:370:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'validateAPIKeyFormat' of wrapped base type 'LLMProviderSettingsViewModel'
368 |         // Simulate existing API keys in keychain (property is read-only, simulated via mock setup)
369 | 
370 |         let isValid = modernViewModel.validateAPIKeyFormat("sk-ant-test123", for: .claude)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'validateAPIKeyFormat' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'validateAPIKeyFormat' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
371 |         XCTAssertTrue(isValid)
372 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:375:23: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'hasStoredKeys' of wrapped base type 'MockLLMKeychainService'
373 |         // Keys should remain accessible after migration
374 |         // This test ensures no security data loss
375 |         XCTAssertTrue(mockKeychainService.hasStoredKeys)
    |                       |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'hasStoredKeys' of wrapped base type 'MockLLMKeychainService'
    |                       |- note: chain the optional using '?' to access member 'hasStoredKeys' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
376 |     }
377 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:387:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
385 |         )
386 | 
387 |         modernViewModel.providerPriority = testPriority
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
388 |         await modernViewModel.updateFallbackBehavior(.costOptimized)
389 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:388:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
386 | 
387 |         modernViewModel.providerPriority = testPriority
388 |         await modernViewModel.updateFallbackBehavior(.costOptimized)
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'updateFallbackBehavior' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
389 | 
390 |         // Priority should be preserved (will fail in RED phase)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:391:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
389 | 
390 |         // Priority should be preserved (will fail in RED phase)
391 |         XCTAssertEqual(modernViewModel.providerPriority.fallbackBehavior, .costOptimized)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
392 |         XCTAssertEqual(modernViewModel.providerPriority.providers, [.claude, .openAI, .gemini])
393 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:392:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
390 |         // Priority should be preserved (will fail in RED phase)
391 |         XCTAssertEqual(modernViewModel.providerPriority.fallbackBehavior, .costOptimized)
392 |         XCTAssertEqual(modernViewModel.providerPriority.providers, [.claude, .openAI, .gemini])
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
393 |     }
394 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:410:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
408 | 
409 |         // Test biometric authentication
410 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
411 |         await modernViewModel.authenticateAndSave()
412 |         if mockService.authenticateAndSaveAPICalled {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:411:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
409 |         // Test biometric authentication
410 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
411 |         await modernViewModel.authenticateAndSave()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'authenticateAndSave' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
412 |         if mockService.authenticateAndSaveAPICalled {
413 |             validatedFeatures["Biometric authentication required"] = true

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:412:12: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
410 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
411 |         await modernViewModel.authenticateAndSave()
412 |         if mockService.authenticateAndSaveAPICalled {
    |            |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
    |            |- note: chain the optional using '?' to access member 'authenticateAndSaveAPICalled' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
413 |             validatedFeatures["Biometric authentication required"] = true
414 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:417:12: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'usesEncryption' of wrapped base type 'MockLLMKeychainService'
415 | 
416 |         // Test encrypted storage (simulated)
417 |         if mockKeychainService.usesEncryption {
    |            |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'usesEncryption' of wrapped base type 'MockLLMKeychainService'
    |            |- note: chain the optional using '?' to access member 'usesEncryption' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
418 |             validatedFeatures["API keys encrypted in keychain"] = true
419 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:422:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
420 | 
421 |         // Test no plaintext storage
422 |         let apiKey = modernViewModel.providerConfigState?.apiKey ?? ""
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
423 |         if apiKey.isEmpty || !apiKey.contains("plaintext") {
424 |             validatedFeatures["No plaintext key storage"] = true
[33/35] Compiling AIKOTests NavigationSplitViewTests.swift
/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:778:6: error: invalid redeclaration of 'TestError'
776 | }
777 | 
778 | enum TestError: Error, LocalizedError {
    |      `- error: invalid redeclaration of 'TestError'
779 |     case configurationFailed
780 |     case networkError

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:34:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 32 |         mockService = MockLLMProviderSettingsService(
 33 |             biometricService: mockBiometricService,
 34 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 35 |             configurationService: mockConfigService
 36 |         )

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:35:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 33 |             biometricService: mockBiometricService,
 34 |             keychainService: mockKeychainService,
 35 |             configurationService: mockConfigService
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 36 |         )
 37 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:39:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 37 | 
 38 |         viewModel = LLMProviderSettingsViewModel(
 39 |             configurationService: mockConfigService,
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 40 |             keychainService: mockKeychainService,
 41 |             settingsService: mockService

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:40:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 38 |         viewModel = LLMProviderSettingsViewModel(
 39 |             configurationService: mockConfigService,
 40 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 41 |             settingsService: mockService
 42 |         )

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:41:30: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
 39 |             configurationService: mockConfigService,
 40 |             keychainService: mockKeychainService,
 41 |             settingsService: mockService
    |                              |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 42 |         )
 43 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:61:33: warning: 'is' test is always true
 59 |             return
 60 |         }
 61 |         XCTAssertTrue(viewModel is any LLMProviderSettingsViewModelProtocol)
    |                                 `- warning: 'is' test is always true
 62 |     }
 63 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:175:33: warning: 'is' test is always true
173 |             return
174 |         }
175 |         XCTAssertTrue(viewModel is ObservableObject)
    |                                 `- warning: 'is' test is always true
176 | 
177 |         // Test that property changes trigger objectWillChange

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:175:36: warning: use of 'ObservableObject' as a type must be written 'any ObservableObject'; this will be an error in a future Swift language mode
173 |             return
174 |         }
175 |         XCTAssertTrue(viewModel is ObservableObject)
    |                                    `- warning: use of 'ObservableObject' as a type must be written 'any ObservableObject'; this will be an error in a future Swift language mode
176 | 
177 |         // Test that property changes trigger objectWillChange

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:252:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
250 |     func test_loadConfigurations_stateTransition_idleToLoading() async {
251 |         // RED: Should fail - state management not implemented
252 |         XCTAssertEqual(viewModel.uiState, .idle)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
253 | 
254 |         let task = Task {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:255:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
253 | 
254 |         let task = Task {
255 |             await viewModel.loadConfigurations()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
256 |         }
257 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:263:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
261 | 
262 |         // This will fail in RED phase as state management is not implemented
263 |         XCTAssertNotEqual(viewModel.uiState, .idle)
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
264 |     }
265 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:260:9: warning: no 'async' operations occur within 'await' expression
258 |         // State should transition to loading (but will fail in RED phase)
259 |         try? await Task.sleep(nanoseconds: 10_000_000) // 10ms
260 |         await task.value
    |         `- warning: no 'async' operations occur within 'await' expression
261 | 
262 |         // This will fail in RED phase as state management is not implemented

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:268:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
266 |     func test_loadConfigurations_stateTransition_loadingToLoaded() async {
267 |         // RED: Should fail - state transitions not implemented
268 |         mockConfigService.shouldSucceed = true
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
269 | 
270 |         await viewModel.loadConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:270:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
268 |         mockConfigService.shouldSucceed = true
269 | 
270 |         await viewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
271 | 
272 |         // Should be loaded state (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:273:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
271 | 
272 |         // Should be loaded state (will fail in RED phase)
273 |         XCTAssertEqual(viewModel.uiState, .loaded)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
274 |     }
275 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:278:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
276 |     func test_loadConfigurations_stateTransition_loadingToError() async {
277 |         // RED: Should fail - error handling not implemented
278 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
279 |         mockConfigService.errorToThrow = TestError.configurationFailed
280 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:279:52: error: type 'TestError' has no member 'configurationFailed'
277 |         // RED: Should fail - error handling not implemented
278 |         mockConfigService.shouldSucceed = false
279 |         mockConfigService.errorToThrow = TestError.configurationFailed
    |                                                    `- error: type 'TestError' has no member 'configurationFailed'
280 | 
281 |         await viewModel.loadConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:281:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
279 |         mockConfigService.errorToThrow = TestError.configurationFailed
280 | 
281 |         await viewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
282 | 
283 |         // Should be error state (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:284:39: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
282 | 
283 |         // Should be error state (will fail in RED phase)
284 |         if case let .error(message) = viewModel.uiState {
    |                                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                       |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
285 |             XCTAssertFalse(message.isEmpty)
286 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:293:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
291 |     func test_saveConfiguration_stateTransition_loadedToSaving() async {
292 |         // RED: Should fail - saving state not implemented
293 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
294 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
295 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:294:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
292 |         // RED: Should fail - saving state not implemented
293 |         viewModel.selectedProvider = .claude
294 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
295 | 
296 |         let task = Task {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:297:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
295 | 
296 |         let task = Task {
297 |             await viewModel.saveProviderConfiguration()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
298 |         }
299 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:305:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
303 | 
304 |         // This will fail in RED phase
305 |         XCTAssertTrue(viewModel.providerConfigState?.isSaving == true || viewModel.uiState == .saving)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
306 |     }
307 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:305:74: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
303 | 
304 |         // This will fail in RED phase
305 |         XCTAssertTrue(viewModel.providerConfigState?.isSaving == true || viewModel.uiState == .saving)
    |                                                                          |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                                                          |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                                                                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
306 |     }
307 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:311:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
309 |         // RED: Should pass - @Observable should trigger updates
310 |         let expectation = XCTestExpectation(description: "State change triggers update")
311 |         let cancellable = viewModel.objectWillChange.sink {
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'objectWillChange' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
312 |             expectation.fulfill()
313 |         }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:315:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
313 |         }
314 | 
315 |         viewModel.uiState = .loading
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
316 |         wait(for: [expectation], timeout: 1.0)
317 |         cancellable.cancel()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:324:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
322 |         let tasks = (0 ..< 10).map { _ in
323 |             Task {
324 |                 await viewModel.loadConfigurations()
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
325 |             }
326 |         }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:338:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
336 |         // State should be consistent (will fail in RED phase)
337 |         // Note: This test is designed to fail as concurrent state management is not implemented
338 |         XCTAssertFalse(viewModel.uiState == .loading, "Should not be stuck in loading state after concurrent operations")
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
339 |     }
340 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:343:29: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
341 |     func test_stateRollback_onOperationFailure() async {
342 |         // RED: Should fail - rollback not implemented
343 |         let originalState = viewModel.uiState
    |                             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                             |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
344 |         mockConfigService.shouldSucceed = false
345 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:344:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
342 |         // RED: Should fail - rollback not implemented
343 |         let originalState = viewModel.uiState
344 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
345 | 
346 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:346:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
344 |         mockConfigService.shouldSucceed = false
345 | 
346 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
347 | 
348 |         // State should rollback on failure (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:349:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
347 | 
348 |         // State should rollback on failure (will fail in RED phase)
349 |         XCTAssertEqual(viewModel.uiState, originalState)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
350 |     }
351 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:354:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
352 |     func test_stateConsistency_acrossAsyncOperations() async {
353 |         // RED: Should fail - state consistency not guaranteed
354 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
355 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
356 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:355:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
353 |         // RED: Should fail - state consistency not guaranteed
354 |         viewModel.selectedProvider = .claude
355 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
356 | 
357 |         // Start multiple operations - capture viewModel to avoid concurrent access issues

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:362:19: warning: constant 'load' inferred to have type '()', which may be unexpected
360 |             return
361 |         }
362 |         async let load = localViewModel.loadConfigurations()
    |                   |- warning: constant 'load' inferred to have type '()', which may be unexpected
    |                   `- note: add an explicit type annotation to silence this warning
363 |         async let save = localViewModel.saveProviderConfiguration()
364 |         async let clear = localViewModel.clearAllConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:363:19: warning: constant 'save' inferred to have type '()', which may be unexpected
361 |         }
362 |         async let load = localViewModel.loadConfigurations()
363 |         async let save = localViewModel.saveProviderConfiguration()
    |                   |- warning: constant 'save' inferred to have type '()', which may be unexpected
    |                   `- note: add an explicit type annotation to silence this warning
364 |         async let clear = localViewModel.clearAllConfigurations()
365 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:364:19: warning: constant 'clear' inferred to have type '()', which may be unexpected
362 |         async let load = localViewModel.loadConfigurations()
363 |         async let save = localViewModel.saveProviderConfiguration()
364 |         async let clear = localViewModel.clearAllConfigurations()
    |                   |- warning: constant 'clear' inferred to have type '()', which may be unexpected
    |                   `- note: add an explicit type annotation to silence this warning
365 | 
366 |         await load

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:371:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
369 | 
370 |         // State should be consistent (will fail in RED phase)
371 |         XCTAssertNotEqual(viewModel.uiState, .loading) // Should not be stuck in loading
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
372 |     }
373 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:378:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
376 |     func test_selectProvider_updatesSelectedProvider() {
377 |         // RED: Should pass - basic property setting
378 |         viewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
379 |         XCTAssertEqual(viewModel.selectedProvider, .claude)
380 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:379:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
377 |         // RED: Should pass - basic property setting
378 |         viewModel.selectProvider(.claude)
379 |         XCTAssertEqual(viewModel.selectedProvider, .claude)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
380 |     }
381 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:384:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
382 |     func test_selectProvider_presentsConfigurationSheet() {
383 |         // RED: Should fail - sheet presentation logic not implemented
384 |         viewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
385 |         XCTAssertTrue(viewModel.isProviderConfigSheetPresented)
386 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:385:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
383 |         // RED: Should fail - sheet presentation logic not implemented
384 |         viewModel.selectProvider(.claude)
385 |         XCTAssertTrue(viewModel.isProviderConfigSheetPresented)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
386 |     }
387 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:390:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
388 |     func test_selectProvider_initializesProviderConfigState() {
389 |         // RED: Should fail - config state initialization not implemented
390 |         viewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
391 | 
392 |         XCTAssertNotNil(viewModel.providerConfigState)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:392:25: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
390 |         viewModel.selectProvider(.claude)
391 | 
392 |         XCTAssertNotNil(viewModel.providerConfigState)
    |                         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:393:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
391 | 
392 |         XCTAssertNotNil(viewModel.providerConfigState)
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:394:25: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
392 |         XCTAssertNotNil(viewModel.providerConfigState)
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
    |                         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)
396 |         XCTAssertFalse(viewModel.providerConfigState?.customEndpoint.isEmpty == false)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:395:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
393 |         XCTAssertEqual(viewModel.providerConfigState?.provider, .claude)
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
396 |         XCTAssertFalse(viewModel.providerConfigState?.customEndpoint.isEmpty == false)
397 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:396:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
394 |         XCTAssertNotNil(viewModel.providerConfigState?.selectedModel)
395 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.7)
396 |         XCTAssertFalse(viewModel.providerConfigState?.customEndpoint.isEmpty == false)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
397 |     }
398 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:402:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
400 |         // RED: Should fail - error handling for no models not implemented
401 |         // This test simulates a provider with no available models
402 |         viewModel.selectProvider(.custom) // Custom provider might have no models
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
403 | 
404 |         // Should show error for no models (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:405:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
403 | 
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
406 |         if case let .error(message) = viewModel.alert {
407 |             XCTAssertTrue(message.contains("No models available"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:406:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
406 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
407 |             XCTAssertTrue(message.contains("No models available"))
408 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:406:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
406 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
407 |             XCTAssertTrue(message.contains("No models available"))
408 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:406:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
404 |         // Should show error for no models (will fail in RED phase)
405 |         XCTAssertNotNil(viewModel.alert)
406 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
407 |             XCTAssertTrue(message.contains("No models available"))
408 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:415:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
413 |     func test_updateAPIKey_updatesProviderConfigState() {
414 |         // RED: Should fail - API key update not implemented
415 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
416 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
417 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:416:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
414 |         // RED: Should fail - API key update not implemented
415 |         viewModel.selectedProvider = .claude
416 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
417 | 
418 |         viewModel.updateAPIKey("sk-ant-test123")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:418:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateAPIKey' of wrapped base type 'LLMProviderSettingsViewModel'
416 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
417 | 
418 |         viewModel.updateAPIKey("sk-ant-test123")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateAPIKey' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateAPIKey' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
419 | 
420 |         XCTAssertEqual(viewModel.providerConfigState?.apiKey, "sk-ant-test123")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:420:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
418 |         viewModel.updateAPIKey("sk-ant-test123")
419 | 
420 |         XCTAssertEqual(viewModel.providerConfigState?.apiKey, "sk-ant-test123")
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
421 |     }
422 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:425:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
423 |     func test_updateSelectedModel_updatesProviderConfigState() {
424 |         // RED: Should fail - model update not implemented
425 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
426 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
427 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:426:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
424 |         // RED: Should fail - model update not implemented
425 |         viewModel.selectedProvider = .claude
426 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
427 | 
428 |         let newModel = TestFixtures.testModel

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:429:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
427 | 
428 |         let newModel = TestFixtures.testModel
429 |         viewModel.updateSelectedModel(newModel)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateSelectedModel' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
430 | 
431 |         XCTAssertEqual(viewModel.providerConfigState?.selectedModel, newModel)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:431:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
429 |         viewModel.updateSelectedModel(newModel)
430 | 
431 |         XCTAssertEqual(viewModel.providerConfigState?.selectedModel, newModel)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
432 |     }
433 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:436:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
434 |     func test_updateTemperature_validatesRange() {
435 |         // RED: Should fail - temperature validation not implemented
436 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
437 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
438 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:437:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
435 |         // RED: Should fail - temperature validation not implemented
436 |         viewModel.selectedProvider = .claude
437 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
438 | 
439 |         viewModel.updateTemperature(0.5)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:439:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
437 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
438 | 
439 |         viewModel.updateTemperature(0.5)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
440 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.5)
441 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:440:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
438 | 
439 |         viewModel.updateTemperature(0.5)
440 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.5)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
441 | 
442 |         // Test boundary values

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:443:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
441 | 
442 |         // Test boundary values
443 |         viewModel.updateTemperature(0.0)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
444 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.0)
445 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:444:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
442 |         // Test boundary values
443 |         viewModel.updateTemperature(0.0)
444 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.0)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
445 | 
446 |         viewModel.updateTemperature(1.0)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:446:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
444 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 0.0)
445 | 
446 |         viewModel.updateTemperature(1.0)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
447 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 1.0)
448 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:447:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
445 | 
446 |         viewModel.updateTemperature(1.0)
447 |         XCTAssertEqual(viewModel.providerConfigState?.temperature, 1.0)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
448 | 
449 |         // Test invalid values (should be clamped or rejected)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:450:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
448 | 
449 |         // Test invalid values (should be clamped or rejected)
450 |         viewModel.updateTemperature(-0.1)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
451 |         XCTAssertGreaterThanOrEqual(viewModel.providerConfigState?.temperature ?? 0, 0.0)
452 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:451:37: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
449 |         // Test invalid values (should be clamped or rejected)
450 |         viewModel.updateTemperature(-0.1)
451 |         XCTAssertGreaterThanOrEqual(viewModel.providerConfigState?.temperature ?? 0, 0.0)
    |                                     |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                     |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                     `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
452 | 
453 |         viewModel.updateTemperature(1.1)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:453:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
451 |         XCTAssertGreaterThanOrEqual(viewModel.providerConfigState?.temperature ?? 0, 0.0)
452 | 
453 |         viewModel.updateTemperature(1.1)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
454 |         XCTAssertLessThanOrEqual(viewModel.providerConfigState?.temperature ?? 1, 1.0)
455 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:454:34: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
452 | 
453 |         viewModel.updateTemperature(1.1)
454 |         XCTAssertLessThanOrEqual(viewModel.providerConfigState?.temperature ?? 1, 1.0)
    |                                  |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                  |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                  `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
455 |     }
456 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:459:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
457 |     func test_updateCustomEndpoint_validatesURL() {
458 |         // RED: Should fail - URL validation not implemented
459 |         viewModel.selectedProvider = .custom
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
460 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
461 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:460:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
458 |         // RED: Should fail - URL validation not implemented
459 |         viewModel.selectedProvider = .custom
460 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
461 | 
462 |         viewModel.updateCustomEndpoint("https://api.test.com")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:462:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
460 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
461 | 
462 |         viewModel.updateCustomEndpoint("https://api.test.com")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
463 |         XCTAssertEqual(viewModel.providerConfigState?.customEndpoint, "https://api.test.com")
464 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:463:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
461 | 
462 |         viewModel.updateCustomEndpoint("https://api.test.com")
463 |         XCTAssertEqual(viewModel.providerConfigState?.customEndpoint, "https://api.test.com")
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
464 | 
465 |         // Test invalid URLs (should show error or reject)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:466:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
464 | 
465 |         // Test invalid URLs (should show error or reject)
466 |         viewModel.updateCustomEndpoint("invalid-url")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
467 |         // Should either reject or show error (will fail in RED phase)
468 |         XCTAssertTrue(viewModel.alert != nil || viewModel.providerConfigState?.customEndpoint != "invalid-url")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:468:33: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
466 |         viewModel.updateCustomEndpoint("invalid-url")
467 |         // Should either reject or show error (will fail in RED phase)
468 |         XCTAssertTrue(viewModel.alert != nil || viewModel.providerConfigState?.customEndpoint != "invalid-url")
    |                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
469 |     }
470 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:468:49: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
466 |         viewModel.updateCustomEndpoint("invalid-url")
467 |         // Should either reject or show error (will fail in RED phase)
468 |         XCTAssertTrue(viewModel.alert != nil || viewModel.providerConfigState?.customEndpoint != "invalid-url")
    |                                                 |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                                 |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
469 |     }
470 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:473:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
471 |     func test_saveConfiguration_callsServiceWithCorrectParameters() async {
472 |         // RED: Should fail - service integration not implemented
473 |         mockService.shouldAuthenticate = true
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldAuthenticate' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
474 |         viewModel.selectedProvider = .claude
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:474:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
472 |         // RED: Should fail - service integration not implemented
473 |         mockService.shouldAuthenticate = true
474 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:475:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
473 |         mockService.shouldAuthenticate = true
474 |         viewModel.selectedProvider = .claude
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
477 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:476:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
474 |         viewModel.selectedProvider = .claude
475 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
477 | 
478 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:478:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
476 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
477 | 
478 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
479 | 
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:480:23: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
478 |         await viewModel.saveProviderConfiguration()
479 | 
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)
    |                       |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
    |                       |- note: chain the optional using '?' to access member 'authenticateAndSaveAPICalled' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
481 |         XCTAssertEqual(mockService.lastSavedAPIKey, "sk-ant-test123")
482 |         XCTAssertEqual(mockService.lastSavedProvider, .claude)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:481:24: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedAPIKey' of wrapped base type 'MockLLMProviderSettingsService'
479 | 
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)
481 |         XCTAssertEqual(mockService.lastSavedAPIKey, "sk-ant-test123")
    |                        |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedAPIKey' of wrapped base type 'MockLLMProviderSettingsService'
    |                        |- note: chain the optional using '?' to access member 'lastSavedAPIKey' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
482 |         XCTAssertEqual(mockService.lastSavedProvider, .claude)
483 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:482:24: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedProvider' of wrapped base type 'MockLLMProviderSettingsService'
480 |         XCTAssertTrue(mockService.authenticateAndSaveAPICalled)
481 |         XCTAssertEqual(mockService.lastSavedAPIKey, "sk-ant-test123")
482 |         XCTAssertEqual(mockService.lastSavedProvider, .claude)
    |                        |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'lastSavedProvider' of wrapped base type 'MockLLMProviderSettingsService'
    |                        |- note: chain the optional using '?' to access member 'lastSavedProvider' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
483 |     }
484 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:487:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
485 |     func test_removeConfiguration_clearsProviderState() async {
486 |         // RED: Should fail - remove configuration not implemented
487 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
488 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
489 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:488:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
486 |         // RED: Should fail - remove configuration not implemented
487 |         viewModel.selectedProvider = .claude
488 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
489 | 
490 |         await viewModel.removeProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:490:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
488 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
489 | 
490 |         await viewModel.removeProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'removeProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
491 | 
492 |         // Should clear state and update UI (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:493:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
491 | 
492 |         // Should clear state and update UI (will fail in RED phase)
493 |         XCTAssertFalse(viewModel.isProviderConfigSheetPresented)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
494 |         XCTAssertNil(viewModel.selectedProvider)
495 |         XCTAssertNil(viewModel.providerConfigState)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:494:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
492 |         // Should clear state and update UI (will fail in RED phase)
493 |         XCTAssertFalse(viewModel.isProviderConfigSheetPresented)
494 |         XCTAssertNil(viewModel.selectedProvider)
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
495 |         XCTAssertNil(viewModel.providerConfigState)
496 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:495:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
493 |         XCTAssertFalse(viewModel.isProviderConfigSheetPresented)
494 |         XCTAssertNil(viewModel.selectedProvider)
495 |         XCTAssertNil(viewModel.providerConfigState)
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
496 |     }
497 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:502:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
500 |     func test_saveConfiguration_emptyAPIKey_showsValidationError() async {
501 |         // RED: Should fail - validation not implemented
502 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
503 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
504 |         viewModel.providerConfigState?.apiKey = ""

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:503:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
501 |         // RED: Should fail - validation not implemented
502 |         viewModel.selectedProvider = .claude
503 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
504 |         viewModel.providerConfigState?.apiKey = ""
505 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:504:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
502 |         viewModel.selectedProvider = .claude
503 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
504 |         viewModel.providerConfigState?.apiKey = ""
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
505 | 
506 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:506:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
504 |         viewModel.providerConfigState?.apiKey = ""
505 | 
506 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
507 | 
508 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:508:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
506 |         await viewModel.saveProviderConfiguration()
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
509 |         if case let .error(message) = viewModel.alert {
510 |             XCTAssertTrue(message.contains("API key is required"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:509:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
509 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
510 |             XCTAssertTrue(message.contains("API key is required"))
511 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:509:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
509 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
510 |             XCTAssertTrue(message.contains("API key is required"))
511 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:509:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
507 | 
508 |         XCTAssertNotNil(viewModel.alert)
509 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
510 |             XCTAssertTrue(message.contains("API key is required"))
511 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:518:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldValidateFormat' of wrapped base type 'MockLLMProviderSettingsService'
516 |     func test_saveConfiguration_invalidAPIKeyFormat_showsError() async {
517 |         // RED: Should fail - format validation not implemented
518 |         mockService.shouldValidateFormat = false
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldValidateFormat' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldValidateFormat' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
519 |         viewModel.selectedProvider = .claude
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:519:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
517 |         // RED: Should fail - format validation not implemented
518 |         mockService.shouldValidateFormat = false
519 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:520:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
518 |         mockService.shouldValidateFormat = false
519 |         viewModel.selectedProvider = .claude
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"
522 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:521:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
519 |         viewModel.selectedProvider = .claude
520 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
522 | 
523 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:523:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
521 |         viewModel.providerConfigState?.apiKey = "invalid-key"
522 | 
523 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
524 | 
525 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:525:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
523 |         await viewModel.saveProviderConfiguration()
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
526 |         if case let .error(message) = viewModel.alert {
527 |             XCTAssertTrue(message.contains("Invalid API key format"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:526:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
526 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
527 |             XCTAssertTrue(message.contains("Invalid API key format"))
528 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:526:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
526 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
527 |             XCTAssertTrue(message.contains("Invalid API key format"))
528 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:526:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
524 | 
525 |         XCTAssertNotNil(viewModel.alert)
526 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
527 |             XCTAssertTrue(message.contains("Invalid API key format"))
528 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:535:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
533 |     func test_updateTemperature_invalidRange_showsError() {
534 |         // RED: Should fail - range validation not implemented
535 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
536 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
537 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:536:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
534 |         // RED: Should fail - range validation not implemented
535 |         viewModel.selectedProvider = .claude
536 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
537 | 
538 |         viewModel.updateTemperature(-1.0)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:538:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
536 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
537 | 
538 |         viewModel.updateTemperature(-1.0)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
539 | 
540 |         // Should show error for invalid range (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:541:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
539 | 
540 |         // Should show error for invalid range (will fail in RED phase)
541 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
542 |     }
543 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:546:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
544 |     func test_updateCustomEndpoint_invalidURL_showsError() {
545 |         // RED: Should fail - URL validation not implemented
546 |         viewModel.selectedProvider = .custom
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
547 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
548 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:547:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
545 |         // RED: Should fail - URL validation not implemented
546 |         viewModel.selectedProvider = .custom
547 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
548 | 
549 |         viewModel.updateCustomEndpoint("not-a-url")

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:549:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
547 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
548 | 
549 |         viewModel.updateCustomEndpoint("not-a-url")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
550 | 
551 |         // Should show error for invalid URL (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:552:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
550 | 
551 |         // Should show error for invalid URL (will fail in RED phase)
552 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
553 |     }
554 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:557:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
555 |     func test_loadConfigurations_serviceError_setsErrorState() async {
556 |         // RED: Should fail - error handling not implemented
557 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
558 |         mockConfigService.errorToThrow = TestError.networkError
559 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:558:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'errorToThrow' of wrapped base type 'MockLLMConfigurationService'
556 |         // RED: Should fail - error handling not implemented
557 |         mockConfigService.shouldSucceed = false
558 |         mockConfigService.errorToThrow = TestError.networkError
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'errorToThrow' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'errorToThrow' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
559 | 
560 |         await viewModel.loadConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:560:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
558 |         mockConfigService.errorToThrow = TestError.networkError
559 | 
560 |         await viewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
561 | 
562 |         if case let .error(message) = viewModel.uiState {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:562:39: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
560 |         await viewModel.loadConfigurations()
561 | 
562 |         if case let .error(message) = viewModel.uiState {
    |                                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                       |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
563 |             XCTAssertFalse(message.isEmpty)
564 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:571:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
569 |     func test_saveConfiguration_serviceError_showsAlert() async {
570 |         // RED: Should fail - error handling not implemented
571 |         mockService.shouldAuthenticate = false
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldAuthenticate' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
572 |         mockService.errorToThrow = TestError.authenticationFailed
573 |         viewModel.selectedProvider = .claude

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:572:46: error: type 'TestError' has no member 'authenticationFailed'
570 |         // RED: Should fail - error handling not implemented
571 |         mockService.shouldAuthenticate = false
572 |         mockService.errorToThrow = TestError.authenticationFailed
    |                                              `- error: type 'TestError' has no member 'authenticationFailed'
573 |         viewModel.selectedProvider = .claude
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:573:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
571 |         mockService.shouldAuthenticate = false
572 |         mockService.errorToThrow = TestError.authenticationFailed
573 |         viewModel.selectedProvider = .claude
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:574:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
572 |         mockService.errorToThrow = TestError.authenticationFailed
573 |         viewModel.selectedProvider = .claude
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
576 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:575:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
573 |         viewModel.selectedProvider = .claude
574 |         viewModel.providerConfigState = TestFixtures.testProviderConfigState
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
576 | 
577 |         await viewModel.saveProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:577:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
575 |         viewModel.providerConfigState?.apiKey = "sk-ant-test123"
576 | 
577 |         await viewModel.saveProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
578 | 
579 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:579:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
577 |         await viewModel.saveProviderConfiguration()
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
580 |         if case let .error(message) = viewModel.alert {
581 |             XCTAssertTrue(message.contains("Authentication failed"))

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:580:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
580 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
581 |             XCTAssertTrue(message.contains("Authentication failed"))
582 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:580:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
580 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
581 |             XCTAssertTrue(message.contains("Authentication failed"))
582 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:580:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
578 | 
579 |         XCTAssertNotNil(viewModel.alert)
580 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
581 |             XCTAssertTrue(message.contains("Authentication failed"))
582 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:589:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
587 |     func test_removeConfiguration_serviceError_maintainsState() async {
588 |         // RED: Should fail - error recovery not implemented
589 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
590 |         mockConfigService.errorToThrow = TestError.configurationFailed
591 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:590:52: error: type 'TestError' has no member 'configurationFailed'
588 |         // RED: Should fail - error recovery not implemented
589 |         mockConfigService.shouldSucceed = false
590 |         mockConfigService.errorToThrow = TestError.configurationFailed
    |                                                    `- error: type 'TestError' has no member 'configurationFailed'
591 | 
592 |         let originalConfigState = viewModel.providerConfigState

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:592:35: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
590 |         mockConfigService.errorToThrow = TestError.configurationFailed
591 | 
592 |         let originalConfigState = viewModel.providerConfigState
    |                                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                   |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
593 | 
594 |         await viewModel.removeProviderConfiguration()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:594:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
592 |         let originalConfigState = viewModel.providerConfigState
593 | 
594 |         await viewModel.removeProviderConfiguration()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'removeProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'removeProviderConfiguration' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
595 | 
596 |         // Should maintain state on error (will fail in RED phase)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:597:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
595 | 
596 |         // Should maintain state on error (will fail in RED phase)
597 |         XCTAssertEqual(viewModel.providerConfigState, originalConfigState)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
598 |     }
599 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:602:9: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMProviderSettingsService'
600 |     func test_clearAllConfigurations_serviceError_showsAlert() async {
601 |         // RED: Should fail - error handling not implemented
602 |         mockService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMProviderSettingsService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
603 |         mockService.errorToThrow = TestError.configurationFailed
604 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:603:46: error: type 'TestError' has no member 'configurationFailed'
601 |         // RED: Should fail - error handling not implemented
602 |         mockService.shouldSucceed = false
603 |         mockService.errorToThrow = TestError.configurationFailed
    |                                              `- error: type 'TestError' has no member 'configurationFailed'
604 | 
605 |         await viewModel.clearAllConfigurations()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:605:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
603 |         mockService.errorToThrow = TestError.configurationFailed
604 | 
605 |         await viewModel.clearAllConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'clearAllConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
606 | 
607 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:607:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
605 |         await viewModel.clearAllConfigurations()
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
608 |         if case let .error(message) = viewModel.alert {
609 |             XCTAssertFalse(message.isEmpty)

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:608:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
608 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
609 |             XCTAssertFalse(message.isEmpty)
610 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:608:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
608 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
609 |             XCTAssertFalse(message.isEmpty)
610 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:608:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
606 | 
607 |         XCTAssertNotNil(viewModel.alert)
608 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
609 |             XCTAssertFalse(message.isEmpty)
610 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:620:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
618 |         // RED: Should pass - @Observable should trigger updates
619 |         let expectation = XCTestExpectation(description: "Alert update triggers UI update")
620 |         let cancellable = viewModel.objectWillChange.sink {
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'objectWillChange' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'objectWillChange' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
621 |             expectation.fulfill()
622 |         }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:624:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
622 |         }
623 | 
624 |         viewModel.alert = .error("Test error")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
625 |         wait(for: [expectation], timeout: 1.0)
626 |         cancellable.cancel()

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:624:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
622 |         }
623 | 
624 |         viewModel.alert = .error("Test error")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
625 |         wait(for: [expectation], timeout: 1.0)
626 |         cancellable.cancel()

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:631:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
629 |     func test_dismissAlert_clearsAlertState() {
630 |         // RED: Should pass - basic property clearing
631 |         viewModel.alert = .error("Test error")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:631:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
629 |     func test_dismissAlert_clearsAlertState() {
630 |         // RED: Should pass - basic property clearing
631 |         viewModel.alert = .error("Test error")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:632:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
630 |         // RED: Should pass - basic property clearing
631 |         viewModel.alert = .error("Test error")
632 |         viewModel.dismissAlert()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'dismissAlert' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
633 |         XCTAssertNil(viewModel.alert)
634 |         XCTAssertFalse(viewModel.isAlertPresented)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:633:32: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
631 |         viewModel.alert = .error("Test error")
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)
    |                                `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
634 |         XCTAssertFalse(viewModel.isAlertPresented)
635 |     }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:634:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
632 |         viewModel.dismissAlert()
633 |         XCTAssertNil(viewModel.alert)
634 |         XCTAssertFalse(viewModel.isAlertPresented)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
635 |     }
636 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:639:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
637 |     func test_multipleAlerts_latestOverridesPrevious() {
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
640 |         viewModel.alert = .success("Success message")
641 | 

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:639:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
637 |     func test_multipleAlerts_latestOverridesPrevious() {
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
640 |         viewModel.alert = .success("Success message")
641 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:640:19: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
640 |         viewModel.alert = .success("Success message")
    |                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
641 | 
642 |         if case let .success(message) = viewModel.alert {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:640:28: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
638 |         // RED: Should pass - property replacement
639 |         viewModel.alert = .error("First error")
640 |         viewModel.alert = .success("Success message")
    |                            `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
641 | 
642 |         if case let .success(message) = viewModel.alert {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:642:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
640 |         viewModel.alert = .success("Success message")
641 | 
642 |         if case let .success(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
643 |             XCTAssertEqual(message, "Success message")
644 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:642:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
640 |         viewModel.alert = .success("Success message")
641 | 
642 |         if case let .success(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
643 |             XCTAssertEqual(message, "Success message")
644 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:642:51: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
640 |         viewModel.alert = .success("Success message")
641 | 
642 |         if case let .success(message) = viewModel.alert {
    |                                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
643 |             XCTAssertEqual(message, "Success message")
644 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:651:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
649 |     func test_errorAlert_setsCorrectMessage() {
650 |         // RED: Should pass - basic property setting
651 |         viewModel.showError("Test error message")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showError' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
652 | 
653 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:653:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
651 |         viewModel.showError("Test error message")
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
654 |         if case let .error(message) = viewModel.alert {
655 |             XCTAssertEqual(message, "Test error message")

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:654:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
654 |         if case let .error(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
655 |             XCTAssertEqual(message, "Test error message")
656 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:654:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
654 |         if case let .error(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'error'
655 |             XCTAssertEqual(message, "Test error message")
656 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:654:49: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
652 | 
653 |         XCTAssertNotNil(viewModel.alert)
654 |         if case let .error(message) = viewModel.alert {
    |                                                 `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
655 |             XCTAssertEqual(message, "Test error message")
656 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:663:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showSuccess' of wrapped base type 'LLMProviderSettingsViewModel'
661 |     func test_successAlert_setsCorrectMessage() {
662 |         // RED: Should pass - basic property setting
663 |         viewModel.showSuccess("Test success message")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showSuccess' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showSuccess' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
664 | 
665 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:665:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
663 |         viewModel.showSuccess("Test success message")
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
666 |         if case let .success(message) = viewModel.alert {
667 |             XCTAssertEqual(message, "Test success message")

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:666:22: error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
666 |         if case let .success(message) = viewModel.alert {
    |                      `- error: type '@Sendable (Binding<Bool>, () -> Alert) -> some View' has no member 'success'
667 |             XCTAssertEqual(message, "Test success message")
668 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:666:22: error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
666 |         if case let .success(message) = viewModel.alert {
    |                      `- error: converting non-sendable function value to '@Sendable (Binding<Bool>, () -> Alert) -> some View' may introduce data races
667 |             XCTAssertEqual(message, "Test success message")
668 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:666:51: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
664 | 
665 |         XCTAssertNotNil(viewModel.alert)
666 |         if case let .success(message) = viewModel.alert {
    |                                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
667 |             XCTAssertEqual(message, "Test success message")
668 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:675:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
673 |     func test_clearConfirmationAlert_setsCorrectActions() {
674 |         // RED: Should pass - basic property setting
675 |         viewModel.showClearConfirmation()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showClearConfirmation' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:677:35: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
675 |         viewModel.showClearConfirmation()
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
    |                                   `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
678 |         if case .clearConfirmation = viewModel.alert {
679 |             // Correct alert type set

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:678:18: error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
678 |         if case .clearConfirmation = viewModel.alert {
    |                  `- error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
679 |             // Correct alert type set
680 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:678:18: error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
678 |         if case .clearConfirmation = viewModel.alert {
    |                  `- error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
679 |             // Correct alert type set
680 |         } else {

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:678:48: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
676 | 
677 |         XCTAssertNotNil(viewModel.alert)
678 |         if case .clearConfirmation = viewModel.alert {
    |                                                `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
679 |             // Correct alert type set
680 |         } else {

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:812:45: error: type 'TestError' has no member 'authenticationFailed'
810 | 
811 |         if !shouldAuthenticate {
812 |             throw errorToThrow ?? TestError.authenticationFailed
    |                                             `- error: type 'TestError' has no member 'authenticationFailed'
813 |         }
814 | 

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:816:45: error: type 'TestError' has no member 'configurationFailed'
814 | 
815 |         if !shouldSucceed {
816 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
817 |         }
818 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:838:45: error: type 'TestError' has no member 'configurationFailed'
836 |     func getActiveProvider() async throws -> LLMProviderConfig? {
837 |         if !shouldSucceed {
838 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
839 |         }
840 |         return nil

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:845:45: error: type 'TestError' has no member 'configurationFailed'
843 |     func getAvailableProviders() async throws -> [LLMProvider] {
844 |         if !shouldSucceed {
845 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
846 |         }
847 |         return []

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:852:45: error: type 'TestError' has no member 'configurationFailed'
850 |     func getProviderPriority() async throws -> LLMProviderSettingsViewModel.ProviderPriority? {
851 |         if !shouldSucceed {
852 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
853 |         }
854 |         return nil

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:859:45: error: type 'TestError' has no member 'configurationFailed'
857 |     func configureProvider(_: LLMProvider, apiKey _: String, config _: LLMProviderConfig) async throws {
858 |         if !shouldSucceed {
859 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
860 |         }
861 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:865:45: error: type 'TestError' has no member 'configurationFailed'
863 |     func removeProvider(_: LLMProvider) async throws {
864 |         if !shouldSucceed {
865 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
866 |         }
867 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:871:45: error: type 'TestError' has no member 'configurationFailed'
869 |     func clearAllConfigurations() async throws {
870 |         if !shouldSucceed {
871 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
872 |         }
873 |     }

/Users/J/aiko/Tests/LLMProviderSettingsProtocolTests.swift:877:45: error: type 'TestError' has no member 'configurationFailed'
875 |     func updateProviderPriority(_: LLMProviderSettingsViewModel.ProviderPriority) async throws {
876 |         if !shouldSucceed {
877 |             throw errorToThrow ?? TestError.configurationFailed
    |                                             `- error: type 'TestError' has no member 'configurationFailed'
878 |         }
879 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:35:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 33 |         mockService = MockLLMProviderSettingsService(
 34 |             biometricService: mockBiometricService,
 35 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 36 |             configurationService: mockConfigService
 37 |         )

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:36:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 34 |             biometricService: mockBiometricService,
 35 |             keychainService: mockKeychainService,
 36 |             configurationService: mockConfigService
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 37 |         )
 38 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:40:35: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
 38 | 
 39 |         modernViewModel = LLMProviderSettingsViewModel(
 40 |             configurationService: mockConfigService,
    |                                   |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to a value of type 'MockLLMConfigurationService'
    |                                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 41 |             keychainService: mockKeychainService,
 42 |             settingsService: mockService

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:41:30: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
 39 |         modernViewModel = LLMProviderSettingsViewModel(
 40 |             configurationService: mockConfigService,
 41 |             keychainService: mockKeychainService,
    |                              |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to a value of type 'MockLLMKeychainService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 42 |             settingsService: mockService
 43 |         )

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:42:30: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
 40 |             configurationService: mockConfigService,
 41 |             keychainService: mockKeychainService,
 42 |             settingsService: mockService
    |                              |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to a value of type 'MockLLMProviderSettingsService'
    |                              |- note: coalesce using '??' to provide a default when the optional value contains 'nil'
    |                              `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 43 |         )
 44 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:73:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
 71 | 
 72 |         // Test provider selection
 73 |         modernViewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 74 |         if modernViewModel.selectedProvider == .claude,
 75 |            modernViewModel.isProviderConfigSheetPresented {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:74:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
 72 |         // Test provider selection
 73 |         modernViewModel.selectProvider(.claude)
 74 |         if modernViewModel.selectedProvider == .claude,
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 75 |            modernViewModel.isProviderConfigSheetPresented {
 76 |             implementedFeatures.append("Provider selection and configuration")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:75:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
 73 |         modernViewModel.selectProvider(.claude)
 74 |         if modernViewModel.selectedProvider == .claude,
 75 |            modernViewModel.isProviderConfigSheetPresented {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 76 |             implementedFeatures.append("Provider selection and configuration")
 77 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:80:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
 78 | 
 79 |         // Test biometric authentication
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'isAuthenticating' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 81 |             await modernViewModel.authenticateAndSave()
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:81:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
 79 |         // Test biometric authentication
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
 81 |             await modernViewModel.authenticateAndSave()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'authenticateAndSave' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {
 83 |                 implementedFeatures.append("Biometric authentication for API key saving")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:82:16: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
 81 |             await modernViewModel.authenticateAndSave()
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {
    |                |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAuthenticating' of wrapped base type 'LLMProviderSettingsViewModel'
    |                |- note: chain the optional using '?' to access member 'isAuthenticating' only for non-'nil' base values
    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 83 |                 implementedFeatures.append("Biometric authentication for API key saving")
 84 |             }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:82:52: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
 80 |         if modernViewModel.isAuthenticating == false { // Will be true during auth
 81 |             await modernViewModel.authenticateAndSave()
 82 |             if modernViewModel.isAuthenticating || mockService.authenticateAndSaveAPICalled {
    |                                                    |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
    |                                                    |- note: chain the optional using '?' to access member 'authenticateAndSaveAPICalled' only for non-'nil' base values
    |                                                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 83 |                 implementedFeatures.append("Biometric authentication for API key saving")
 84 |             }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:88:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
 86 | 
 87 |         // Test provider priority
 88 |         await modernViewModel.updateFallbackBehavior(.loadBalanced)
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'updateFallbackBehavior' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 89 |         if modernViewModel.providerPriority.fallbackBehavior == .loadBalanced {
 90 |             implementedFeatures.append("Provider priority management")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:89:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
 87 |         // Test provider priority
 88 |         await modernViewModel.updateFallbackBehavior(.loadBalanced)
 89 |         if modernViewModel.providerPriority.fallbackBehavior == .loadBalanced {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 90 |             implementedFeatures.append("Provider priority management")
 91 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:94:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
 92 | 
 93 |         // Test clear all
 94 |         await modernViewModel.clearAllConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'clearAllConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'clearAllConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 95 |         if modernViewModel.configuredProviders.isEmpty {
 96 |             implementedFeatures.append("Clear all configurations")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:95:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'configuredProviders' of wrapped base type 'LLMProviderSettingsViewModel'
 93 |         // Test clear all
 94 |         await modernViewModel.clearAllConfigurations()
 95 |         if modernViewModel.configuredProviders.isEmpty {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'configuredProviders' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'configuredProviders' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
 96 |             implementedFeatures.append("Clear all configurations")
 97 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:100:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
 98 | 
 99 |         // Test model selection
100 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
101 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
102 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:101:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
 99 |         // Test model selection
100 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
101 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateSelectedModel' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
102 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {
103 |             implementedFeatures.append("Model selection and temperature adjustment")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:102:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
100 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
101 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
102 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
103 |             implementedFeatures.append("Model selection and temperature adjustment")
104 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:107:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
105 | 
106 |         // Test custom endpoint
107 |         modernViewModel.updateCustomEndpoint("https://api.test.com")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
108 |         if modernViewModel.providerConfigState?.customEndpoint == "https://api.test.com" {
109 |             implementedFeatures.append("Custom endpoint configuration")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:108:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
106 |         // Test custom endpoint
107 |         modernViewModel.updateCustomEndpoint("https://api.test.com")
108 |         if modernViewModel.providerConfigState?.customEndpoint == "https://api.test.com" {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
109 |             implementedFeatures.append("Custom endpoint configuration")
110 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:113:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
111 | 
112 |         // Test validation and error handling
113 |         modernViewModel.showError("Test error")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showError' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
114 |         if modernViewModel.alert != nil {
115 |             implementedFeatures.append("Real-time validation and error handling")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:114:28: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
112 |         // Test validation and error handling
113 |         modernViewModel.showError("Test error")
114 |         if modernViewModel.alert != nil {
    |                            `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
115 |             implementedFeatures.append("Real-time validation and error handling")
116 |         }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:141:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
139 | 
140 |         // Tap provider to configure
141 |         modernViewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
142 |         if modernViewModel.isProviderConfigSheetPresented {
143 |             workingInteractions.append("Tap provider to configure")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:142:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
140 |         // Tap provider to configure
141 |         modernViewModel.selectProvider(.claude)
142 |         if modernViewModel.isProviderConfigSheetPresented {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
143 |             workingInteractions.append("Tap provider to configure")
144 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:147:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
145 | 
146 |         // API key field (simulated - actual implementation in view)
147 |         if modernViewModel.providerConfigState != nil {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
148 |             workingInteractions.append("Show/hide API key in secure field")
149 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:152:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'getModelsForProvider' of wrapped base type 'LLMProviderSettingsViewModel'
150 | 
151 |         // Model selection
152 |         let models = modernViewModel.getModelsForProvider(.claude)
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'getModelsForProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'getModelsForProvider' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
153 |         if !models.isEmpty {
154 |             workingInteractions.append("Select model from picker")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:158:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
156 | 
157 |         // Temperature adjustment
158 |         modernViewModel.updateTemperature(0.8)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
159 |         if modernViewModel.providerConfigState?.temperature == 0.8 {
160 |             workingInteractions.append("Adjust temperature slider")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:159:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
157 |         // Temperature adjustment
158 |         modernViewModel.updateTemperature(0.8)
159 |         if modernViewModel.providerConfigState?.temperature == 0.8 {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
160 |             workingInteractions.append("Adjust temperature slider")
161 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:164:12: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
162 | 
163 |         // Biometric auth (simulated)
164 |         if mockService.shouldAuthenticate {
    |            |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'shouldAuthenticate' of wrapped base type 'MockLLMProviderSettingsService'
    |            |- note: chain the optional using '?' to access member 'shouldAuthenticate' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
165 |             workingInteractions.append("Save configuration with biometric auth")
166 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:174:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'moveProvider' of wrapped base type 'LLMProviderSettingsViewModel'
172 |         let indexSet = IndexSet([0])
173 |         Task {
174 |             await modernViewModel.moveProvider(from: indexSet, to: 1)
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'moveProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'moveProvider' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
175 |         }
176 |         workingInteractions.append("Drag to reorder providers")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:179:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
177 | 
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showClearConfirmation' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
180 |         if case .clearConfirmation = modernViewModel.alert {
181 |             workingInteractions.append("Clear all with confirmation")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:180:18: error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
180 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
181 |             workingInteractions.append("Clear all with confirmation")
182 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:180:18: error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
180 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
181 |             workingInteractions.append("Clear all with confirmation")
182 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:180:54: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
178 |         // Clear all confirmation
179 |         modernViewModel.showClearConfirmation()
180 |         if case .clearConfirmation = modernViewModel.alert {
    |                                                      `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
181 |             workingInteractions.append("Clear all with confirmation")
182 |         }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:193:29: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
191 | 
192 |         // Test state transitions match TCA behavior
193 |         let originalState = modernViewModel.uiState
    |                             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                             |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
194 |         XCTAssertEqual(originalState, .idle)
195 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:194:40: error: type 'Equatable' has no member 'idle'
192 |         // Test state transitions match TCA behavior
193 |         let originalState = modernViewModel.uiState
194 |         XCTAssertEqual(originalState, .idle)
    |                                        `- error: type 'Equatable' has no member 'idle'
195 | 
196 |         // Loading state

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:198:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
196 |         // Loading state
197 |         let loadTask = Task {
198 |             await modernViewModel.loadConfigurations()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
199 |         }
200 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:206:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
204 | 
205 |         // State should be loaded or error (not idle)
206 |         XCTAssertNotEqual(modernViewModel.uiState, .idle)
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
207 | 
208 |         // Error state handling

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:209:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
207 | 
208 |         // Error state handling
209 |         mockConfigService.shouldSucceed = false
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
210 |         await modernViewModel.loadConfigurations()
211 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:210:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
208 |         // Error state handling
209 |         mockConfigService.shouldSucceed = false
210 |         await modernViewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
211 | 
212 |         if case .error = modernViewModel.uiState {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:212:26: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
210 |         await modernViewModel.loadConfigurations()
211 | 
212 |         if case .error = modernViewModel.uiState {
    |                          |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'uiState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                          |- note: chain the optional using '?' to access member 'uiState' only for non-'nil' base values
    |                          `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
213 |             // Error state correctly set
214 |         } else {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:219:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
217 | 
218 |         // Alert state management
219 |         modernViewModel.showError("Test error")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showError' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showError' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
220 |         XCTAssertTrue(modernViewModel.isAlertPresented)
221 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:220:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
218 |         // Alert state management
219 |         modernViewModel.showError("Test error")
220 |         XCTAssertTrue(modernViewModel.isAlertPresented)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
221 | 
222 |         modernViewModel.dismissAlert()

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:222:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
220 |         XCTAssertTrue(modernViewModel.isAlertPresented)
221 | 
222 |         modernViewModel.dismissAlert()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'dismissAlert' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'dismissAlert' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
223 |         XCTAssertFalse(modernViewModel.isAlertPresented)
224 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:223:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
221 | 
222 |         modernViewModel.dismissAlert()
223 |         XCTAssertFalse(modernViewModel.isAlertPresented)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
224 |     }
225 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:247:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
245 | 
246 |         // Test each mapping
247 |         modernViewModel.selectProvider(.claude)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'selectProvider' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
248 |         if modernViewModel.selectedProvider == .claude {
249 |             mappedActions.append("providerTapped")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:248:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
246 |         // Test each mapping
247 |         modernViewModel.selectProvider(.claude)
248 |         if modernViewModel.selectedProvider == .claude {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
249 |             mappedActions.append("providerTapped")
250 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:252:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
250 |         }
251 | 
252 |         modernViewModel.showClearConfirmation()
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'showClearConfirmation' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'showClearConfirmation' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
253 |         if case .clearConfirmation = modernViewModel.alert {
254 |             mappedActions.append("clearAllTapped")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:253:18: error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
251 | 
252 |         modernViewModel.showClearConfirmation()
253 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: pattern cannot match values of type '@Sendable (Binding<Bool>, () -> Alert) -> some View'
254 |             mappedActions.append("clearAllTapped")
255 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:253:18: error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
251 | 
252 |         modernViewModel.showClearConfirmation()
253 |         if case .clearConfirmation = modernViewModel.alert {
    |                  `- error: type '_ErrorCodeProtocol' has no member 'clearConfirmation'
254 |             mappedActions.append("clearAllTapped")
255 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:253:54: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
251 | 
252 |         modernViewModel.showClearConfirmation()
253 |         if case .clearConfirmation = modernViewModel.alert {
    |                                                      `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
254 |             mappedActions.append("clearAllTapped")
255 |         }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:258:13: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
256 | 
257 |         // Sheet binding (property access)
258 |         _ = modernViewModel.isProviderConfigSheetPresented
    |             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |             |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
259 |         mappedActions.append("setProviderConfigSheet")
260 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:263:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
261 |         // Configuration methods exist (compilation test)
262 |         Task {
263 |             await modernViewModel.saveProviderConfiguration()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'saveProviderConfiguration' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'saveProviderConfiguration' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
264 |             await modernViewModel.removeProviderConfiguration()
265 |             await modernViewModel.updateFallbackBehavior(.sequential)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:272:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
270 | 
271 |         // Model and config updates
272 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
274 |         modernViewModel.updateTemperature(0.5)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:273:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
271 |         // Model and config updates
272 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateSelectedModel' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateSelectedModel' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
274 |         modernViewModel.updateTemperature(0.5)
275 |         modernViewModel.updateCustomEndpoint("https://test.com")

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:274:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
272 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
274 |         modernViewModel.updateTemperature(0.5)
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateTemperature' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateTemperature' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
275 |         modernViewModel.updateCustomEndpoint("https://test.com")
276 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:275:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
273 |         modernViewModel.updateSelectedModel(TestFixtures.testModel)
274 |         modernViewModel.updateTemperature(0.5)
275 |         modernViewModel.updateCustomEndpoint("https://test.com")
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateCustomEndpoint' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'updateCustomEndpoint' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
276 | 
277 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:277:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
275 |         modernViewModel.updateCustomEndpoint("https://test.com")
276 | 
277 |         if modernViewModel.providerConfigState?.selectedModel == TestFixtures.testModel {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
278 |             mappedActions.append("modelSelected")
279 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:280:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
278 |             mappedActions.append("modelSelected")
279 |         }
280 |         if modernViewModel.providerConfigState?.temperature == 0.5 {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
281 |             mappedActions.append("temperatureChanged")
282 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:283:12: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
281 |             mappedActions.append("temperatureChanged")
282 |         }
283 |         if modernViewModel.providerConfigState?.customEndpoint == "https://test.com" {
    |            |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |            |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
284 |             mappedActions.append("customEndpointChanged")
285 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:307:41: warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any ObservableObject' is equivalent to an implicit conversion to an optional 'any ObservableObject'
305 | 
306 |         // Protocol conformance should be to SwiftUI protocols, not TCA
307 |         XCTAssertNotNil(modernViewModel as? any ObservableObject)
    |                                         `- warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any ObservableObject' is equivalent to an implicit conversion to an optional 'any ObservableObject'
308 |         XCTAssertNotNil(modernViewModel as? any LLMProviderSettingsViewModelProtocol)
309 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:308:41: warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any LLMProviderSettingsViewModelProtocol' is equivalent to an implicit conversion to an optional 'any LLMProviderSettingsViewModelProtocol'
306 |         // Protocol conformance should be to SwiftUI protocols, not TCA
307 |         XCTAssertNotNil(modernViewModel as? any ObservableObject)
308 |         XCTAssertNotNil(modernViewModel as? any LLMProviderSettingsViewModelProtocol)
    |                                         `- warning: conditional downcast from 'LLMProviderSettingsViewModel?' to 'any LLMProviderSettingsViewModelProtocol' is equivalent to an implicit conversion to an optional 'any LLMProviderSettingsViewModelProtocol'
309 | 
310 |         // State management should be @Observable, not TCA State

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:320:39: warning: checking a value with optional type 'LLMProviderSettingsViewModel?' against type 'any ObservableObject' succeeds whenever the value is non-nil; did you mean to use '!= nil'?
318 | 
319 |         // @Observable pattern
320 |         XCTAssertTrue(modernViewModel is any ObservableObject)
    |                                       `- warning: checking a value with optional type 'LLMProviderSettingsViewModel?' against type 'any ObservableObject' succeeds whenever the value is non-nil; did you mean to use '!= nil'?
321 | 
322 |         // Property wrappers (simulated - actual test in view)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:324:13: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
322 |         // Property wrappers (simulated - actual test in view)
323 |         let hasBindableProperties = [
324 |             modernViewModel.isProviderConfigSheetPresented,
    |             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isProviderConfigSheetPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |             |- note: chain the optional using '?' to access member 'isProviderConfigSheetPresented' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
325 |             modernViewModel.selectedProvider != nil,
326 |             modernViewModel.alert != nil,

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:325:13: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
323 |         let hasBindableProperties = [
324 |             modernViewModel.isProviderConfigSheetPresented,
325 |             modernViewModel.selectedProvider != nil,
    |             |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'selectedProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |             |- note: chain the optional using '?' to access member 'selectedProvider' only for non-'nil' base values
    |             `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
326 |             modernViewModel.alert != nil,
327 |         ].contains(true)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:326:29: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
324 |             modernViewModel.isProviderConfigSheetPresented,
325 |             modernViewModel.selectedProvider != nil,
326 |             modernViewModel.alert != nil,
    |                             `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
327 |         ].contains(true)
328 |         XCTAssertTrue(hasBindableProperties)

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:332:19: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
330 |         // Async/await pattern
331 |         Task {
332 |             await modernViewModel.loadConfigurations()
    |                   |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |                   |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
333 |             await modernViewModel.saveProviderConfiguration()
334 |             await modernViewModel.clearAllConfigurations()

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:339:27: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'testProviderConnection' of wrapped base type 'LLMProviderSettingsViewModel'
337 |         // Error handling with Result/throwing functions
338 |         do {
339 |             _ = try await modernViewModel.testProviderConnection(TestFixtures.testConfig)
    |                           |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'testProviderConnection' of wrapped base type 'LLMProviderSettingsViewModel'
    |                           |- note: chain the optional using '?' to access member 'testProviderConnection' only for non-'nil' base values
    |                           `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
340 |         } catch {
341 |             // Expected to fail in RED phase

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:345:33: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
343 | 
344 |         // State consistency
345 |         let stateIsConsistent = modernViewModel.isAlertPresented == (modernViewModel.alert != nil)
    |                                 |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'isAlertPresented' of wrapped base type 'LLMProviderSettingsViewModel'
    |                                 |- note: chain the optional using '?' to access member 'isAlertPresented' only for non-'nil' base values
    |                                 `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
346 |         XCTAssertTrue(stateIsConsistent)
347 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:345:86: error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
343 | 
344 |         // State consistency
345 |         let stateIsConsistent = modernViewModel.isAlertPresented == (modernViewModel.alert != nil)
    |                                                                                      `- error: referencing instance method 'alert(isPresented:content:)' on 'Optional' requires that 'LLMProviderSettingsViewModel' conform to 'View'
346 |         XCTAssertTrue(stateIsConsistent)
347 |     }

SwiftUICore.Optional:2:11: note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
1 | @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
2 | extension Optional : View where Wrapped : View {
  |           `- note: requirement from conditional conformance of 'LLMProviderSettingsViewModel?' to 'View'
3 |     public typealias Body = Never
4 |     nonisolated public static func _makeView(view: _GraphValue<Wrapped?>, inputs: _ViewInputs) -> _ViewOutputs

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:355:9: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
353 | 
354 |         // Simulate existing configuration
355 |         mockConfigService.shouldSucceed = true
    |         |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'shouldSucceed' of wrapped base type 'MockLLMConfigurationService'
    |         |- note: chain the optional using '?' to access member 'shouldSucceed' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
356 |         _ = TestFixtures.testConfig
357 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:358:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
356 |         _ = TestFixtures.testConfig
357 | 
358 |         await modernViewModel.loadConfigurations()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'loadConfigurations' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'loadConfigurations' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
359 | 
360 |         // Existing configuration should be loaded (will fail in RED phase)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:362:25: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'activeProvider' of wrapped base type 'LLMProviderSettingsViewModel'
360 |         // Existing configuration should be loaded (will fail in RED phase)
361 |         // This test ensures no data loss during migration
362 |         XCTAssertNotNil(modernViewModel.activeProvider ?? mockConfigService.mockActiveProvider)
    |                         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'activeProvider' of wrapped base type 'LLMProviderSettingsViewModel'
    |                         `- note: chain the optional using '?' to access member 'activeProvider' only for non-'nil' base values
363 |     }
364 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:362:59: error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'mockActiveProvider' of wrapped base type 'MockLLMConfigurationService'
360 |         // Existing configuration should be loaded (will fail in RED phase)
361 |         // This test ensures no data loss during migration
362 |         XCTAssertNotNil(modernViewModel.activeProvider ?? mockConfigService.mockActiveProvider)
    |                                                           |- error: value of optional type 'MockLLMConfigurationService?' must be unwrapped to refer to member 'mockActiveProvider' of wrapped base type 'MockLLMConfigurationService'
    |                                                           `- note: chain the optional using '?' to access member 'mockActiveProvider' only for non-'nil' base values
363 |     }
364 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:370:23: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'validateAPIKeyFormat' of wrapped base type 'LLMProviderSettingsViewModel'
368 |         // Simulate existing API keys in keychain (property is read-only, simulated via mock setup)
369 | 
370 |         let isValid = modernViewModel.validateAPIKeyFormat("sk-ant-test123", for: .claude)
    |                       |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'validateAPIKeyFormat' of wrapped base type 'LLMProviderSettingsViewModel'
    |                       |- note: chain the optional using '?' to access member 'validateAPIKeyFormat' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
371 |         XCTAssertTrue(isValid)
372 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:375:23: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'hasStoredKeys' of wrapped base type 'MockLLMKeychainService'
373 |         // Keys should remain accessible after migration
374 |         // This test ensures no security data loss
375 |         XCTAssertTrue(mockKeychainService.hasStoredKeys)
    |                       |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'hasStoredKeys' of wrapped base type 'MockLLMKeychainService'
    |                       |- note: chain the optional using '?' to access member 'hasStoredKeys' only for non-'nil' base values
    |                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
376 |     }
377 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:387:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
385 |         )
386 | 
387 |         modernViewModel.providerPriority = testPriority
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
388 |         await modernViewModel.updateFallbackBehavior(.costOptimized)
389 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:388:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
386 | 
387 |         modernViewModel.providerPriority = testPriority
388 |         await modernViewModel.updateFallbackBehavior(.costOptimized)
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'updateFallbackBehavior' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'updateFallbackBehavior' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
389 | 
390 |         // Priority should be preserved (will fail in RED phase)

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:391:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
389 | 
390 |         // Priority should be preserved (will fail in RED phase)
391 |         XCTAssertEqual(modernViewModel.providerPriority.fallbackBehavior, .costOptimized)
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
392 |         XCTAssertEqual(modernViewModel.providerPriority.providers, [.claude, .openAI, .gemini])
393 |     }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:392:24: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
390 |         // Priority should be preserved (will fail in RED phase)
391 |         XCTAssertEqual(modernViewModel.providerPriority.fallbackBehavior, .costOptimized)
392 |         XCTAssertEqual(modernViewModel.providerPriority.providers, [.claude, .openAI, .gemini])
    |                        |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerPriority' of wrapped base type 'LLMProviderSettingsViewModel'
    |                        |- note: chain the optional using '?' to access member 'providerPriority' only for non-'nil' base values
    |                        `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
393 |     }
394 | 

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:410:9: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
408 | 
409 |         // Test biometric authentication
410 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
    |         |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |         |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |         `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
411 |         await modernViewModel.authenticateAndSave()
412 |         if mockService.authenticateAndSaveAPICalled {

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:411:15: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
409 |         // Test biometric authentication
410 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
411 |         await modernViewModel.authenticateAndSave()
    |               |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'authenticateAndSave' of wrapped base type 'LLMProviderSettingsViewModel'
    |               |- note: chain the optional using '?' to access member 'authenticateAndSave' only for non-'nil' base values
    |               `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
412 |         if mockService.authenticateAndSaveAPICalled {
413 |             validatedFeatures["Biometric authentication required"] = true

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:412:12: error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
410 |         modernViewModel.providerConfigState = TestFixtures.testProviderConfigState
411 |         await modernViewModel.authenticateAndSave()
412 |         if mockService.authenticateAndSaveAPICalled {
    |            |- error: value of optional type 'MockLLMProviderSettingsService?' must be unwrapped to refer to member 'authenticateAndSaveAPICalled' of wrapped base type 'MockLLMProviderSettingsService'
    |            |- note: chain the optional using '?' to access member 'authenticateAndSaveAPICalled' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
413 |             validatedFeatures["Biometric authentication required"] = true
414 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:417:12: error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'usesEncryption' of wrapped base type 'MockLLMKeychainService'
415 | 
416 |         // Test encrypted storage (simulated)
417 |         if mockKeychainService.usesEncryption {
    |            |- error: value of optional type 'MockLLMKeychainService?' must be unwrapped to refer to member 'usesEncryption' of wrapped base type 'MockLLMKeychainService'
    |            |- note: chain the optional using '?' to access member 'usesEncryption' only for non-'nil' base values
    |            `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
418 |             validatedFeatures["API keys encrypted in keychain"] = true
419 |         }

/Users/J/aiko/Tests/Migration_TCAToSwiftUIValidationTests.swift:422:22: error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
420 | 
421 |         // Test no plaintext storage
422 |         let apiKey = modernViewModel.providerConfigState?.apiKey ?? ""
    |                      |- error: value of optional type 'LLMProviderSettingsViewModel?' must be unwrapped to refer to member 'providerConfigState' of wrapped base type 'LLMProviderSettingsViewModel'
    |                      |- note: chain the optional using '?' to access member 'providerConfigState' only for non-'nil' base values
    |                      `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'
423 |         if apiKey.isEmpty || !apiKey.contains("plaintext") {
424 |             validatedFeatures["No plaintext key storage"] = true
error: fatalError
